
RTOs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  08009a50  08009a50  00019a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ff4  08009ff4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009ff4  08009ff4  00019ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ffc  08009ffc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ffc  08009ffc  00019ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a000  0800a000  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049b4  200001e0  0800a1e4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b94  0800a1e4  00024b94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8c1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ca  00000000  00000000  0002fad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  000324a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00033238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004306  00000000  00000000  00033ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4d9  00000000  00000000  000381ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008efc5  00000000  00000000  00047687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d664c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000489c  00000000  00000000  000d669c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009a34 	.word	0x08009a34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009a34 	.word	0x08009a34

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <ADC_Init>:
};
/* USER CODE BEGIN PV */
float temp = 0;

void ADC_Init()
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	4b29      	ldr	r3, [pc, #164]	; (800100c <ADC_Init+0xb0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a28      	ldr	r2, [pc, #160]	; (800100c <ADC_Init+0xb0>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b26      	ldr	r3, [pc, #152]	; (800100c <ADC_Init+0xb0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
	uint32_t* MODER = (uint32_t*)0x40020000;
 8000f7e:	4b24      	ldr	r3, [pc, #144]	; (8001010 <ADC_Init+0xb4>)
 8000f80:	61fb      	str	r3, [r7, #28]
	*MODER |= (0b11<<0);
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f043 0203 	orr.w	r2, r3, #3
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	601a      	str	r2, [r3, #0]

	__HAL_RCC_ADC1_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <ADC_Init+0xb0>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	4a1d      	ldr	r2, [pc, #116]	; (800100c <ADC_Init+0xb0>)
 8000f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <ADC_Init+0xb0>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
	uint32_t* SMPR1 = (uint32_t*)0x4001200c;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <ADC_Init+0xb8>)
 8000fac:	61bb      	str	r3, [r7, #24]
	*SMPR1 |= (0b111<<18);
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f443 12e0 	orr.w	r2, r3, #1835008	; 0x1c0000
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	601a      	str	r2, [r3, #0]
	uint32_t* SMPR2 = (uint32_t*)0x40012010;
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <ADC_Init+0xbc>)
 8000fbc:	617b      	str	r3, [r7, #20]
	*SMPR2 |= (0b111<<0);
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f043 0207 	orr.w	r2, r3, #7
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	601a      	str	r2, [r3, #0]

	uint32_t* JSQR = (uint32_t*)0x40012038;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <ADC_Init+0xc0>)
 8000fcc:	613b      	str	r3, [r7, #16]
	*JSQR |= (16<<15); //set channel 16 (temp sensor)
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	601a      	str	r2, [r3, #0]

//	uint32_t* CR1 = (uint32_t*)0x40012004;
	uint32_t* CR2 = (uint32_t*)0x40012008;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <ADC_Init+0xc4>)
 8000fdc:	60fb      	str	r3, [r7, #12]
	*CR2 |= (0b01 << 20) |(1<<0);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	6013      	str	r3, [r2, #0]

	uint32_t* CCR = (uint32_t*)0x40012304;
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <ADC_Init+0xc8>)
 8000ff0:	60bb      	str	r3, [r7, #8]
	*CCR |= (1<<23);
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	601a      	str	r2, [r3, #0]
}
 8000ffe:	bf00      	nop
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40020000 	.word	0x40020000
 8001014:	4001200c 	.word	0x4001200c
 8001018:	40012010 	.word	0x40012010
 800101c:	40012038 	.word	0x40012038
 8001020:	40012008 	.word	0x40012008
 8001024:	40012304 	.word	0x40012304

08001028 <Read_ADC>:
uint16_t Read_ADC ()
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
	uint32_t* CR2 = (uint32_t*)0x40012008;
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <Read_ADC+0x50>)
 8001030:	60fb      	str	r3, [r7, #12]
	*CR2 |= (1<<22);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	601a      	str	r2, [r3, #0]
	uint32_t* SR = (uint32_t*)0x40012000;
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <Read_ADC+0x54>)
 8001040:	60bb      	str	r3, [r7, #8]
	while (((*SR >> 2)&1) == 0){osDelay(1);};
 8001042:	e002      	b.n	800104a <Read_ADC+0x22>
 8001044:	2001      	movs	r0, #1
 8001046:	f001 fcc7 	bl	80029d8 <osDelay>
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f5      	beq.n	8001044 <Read_ADC+0x1c>
	*SR &=~(1<<2);
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f023 0204 	bic.w	r2, r3, #4
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	601a      	str	r2, [r3, #0]

	uint32_t* JDR1 = (uint32_t*)0x4001203c;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <Read_ADC+0x58>)
 8001066:	607b      	str	r3, [r7, #4]
	return *JDR1;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	b29b      	uxth	r3, r3
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40012008 	.word	0x40012008
 800107c:	40012000 	.word	0x40012000
 8001080:	4001203c 	.word	0x4001203c

08001084 <UART_Init>:

void UART_Init()
{
 8001084:	b480      	push	{r7}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <UART_Init+0x98>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a22      	ldr	r2, [pc, #136]	; (800111c <UART_Init+0x98>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <UART_Init+0x98>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_USART2_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <UART_Init+0x98>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a1b      	ldr	r2, [pc, #108]	; (800111c <UART_Init+0x98>)
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <UART_Init+0x98>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]

	uint32_t* GPIOA_MODER = (uint32_t*)0x40020000;
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <UART_Init+0x9c>)
 80010c4:	617b      	str	r3, [r7, #20]
	*GPIOA_MODER &= ~(0b1111 << 4); // set PIN2,3
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER |= (0b10 << 4) | (0b10 << 6);// Pin2,3 Analog
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	601a      	str	r2, [r3, #0]
	uint32_t* GPIOA_AFRL = (uint32_t*)0x40020020;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <UART_Init+0xa0>)
 80010e0:	613b      	str	r3, [r7, #16]
	*GPIOA_AFRL |= (7 << 8) | (7 << 12);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f443 42ee 	orr.w	r2, r3, #30464	; 0x7700
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	601a      	str	r2, [r3, #0]

	// set baud rate 9600
	uint32_t* UART2_BRR = (uint32_t*)0x40004408;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <UART_Init+0xa4>)
 80010f0:	60fb      	str	r3, [r7, #12]
	*UART2_BRR = (104 << 4) | 3;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f240 6283 	movw	r2, #1667	; 0x683
 80010f8:	601a      	str	r2, [r3, #0]

	//set 13 enable UART, set 2 r/w enable TX, set 3 r/w enable RX
	// set 5 enable Interrupt of UART
	//size 8 byte and check chan le
	uint32_t* UART2_CR1 = (uint32_t*)0x4000440c;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <UART_Init+0xa8>)
 80010fc:	60bb      	str	r3, [r7, #8]
	*UART2_CR1 |= (0b1 << 13) | (0b1 << 2) | (0b1 << 3);// | (0b1 << 5);
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001106:	f043 030c 	orr.w	r3, r3, #12
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	6013      	str	r3, [r2, #0]

	//set enable DMA of UART
//	uint32_t* UART2_CR3 = (uint32_t*)0x40004414;
//	*UART2_CR3 |= (0b1 << 6);
}
 800110e:	bf00      	nop
 8001110:	371c      	adds	r7, #28
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000
 8001124:	40020020 	.word	0x40020020
 8001128:	40004408 	.word	0x40004408
 800112c:	4000440c 	.word	0x4000440c

08001130 <UART_Send_1Byte>:




void UART_Send_1Byte(char data)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
	uint32_t* DR = (uint32_t*)0x40004404;
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <UART_Send_1Byte+0x48>)
 800113c:	60fb      	str	r3, [r7, #12]
	uint32_t* SR = (uint32_t*)0x40004400;
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <UART_Send_1Byte+0x4c>)
 8001140:	60bb      	str	r3, [r7, #8]
	while(((*SR >> 7)&1) !=1){osDelay(1);};
 8001142:	e002      	b.n	800114a <UART_Send_1Byte+0x1a>
 8001144:	2001      	movs	r0, #1
 8001146:	f001 fc47 	bl	80029d8 <osDelay>
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	09db      	lsrs	r3, r3, #7
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0f5      	beq.n	8001144 <UART_Send_1Byte+0x14>
	*DR = data;
 8001158:	79fa      	ldrb	r2, [r7, #7]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	601a      	str	r2, [r3, #0]
	while(((*SR >> 6)&1) !=1);
 800115e:	bf00      	nop
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	099b      	lsrs	r3, r3, #6
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f8      	beq.n	8001160 <UART_Send_1Byte+0x30>
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40004404 	.word	0x40004404
 800117c:	40004400 	.word	0x40004400

08001180 <UART_Send_Str>:


void UART_Send_Str(char* data)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	osMutexAcquire(UART_lockHandle, HAL_MAX_DELAY);
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <UART_Send_Str+0x54>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	4618      	mov	r0, r3
 8001192:	f001 fea1 	bl	8002ed8 <osMutexAcquire>
	int str_len = strlen(data);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff f822 	bl	80001e0 <strlen>
 800119c:	4603      	mov	r3, r0
 800119e:	60bb      	str	r3, [r7, #8]
	for(int i =0; i < str_len; i++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	e009      	b.n	80011ba <UART_Send_Str+0x3a>
	{
		UART_Send_1Byte( data [i]);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ffbe 	bl	8001130 <UART_Send_1Byte>
	for(int i =0; i < str_len; i++)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	3301      	adds	r3, #1
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	429a      	cmp	r2, r3
 80011c0:	dbf1      	blt.n	80011a6 <UART_Send_Str+0x26>
	}
	osMutexRelease(UART_lockHandle);
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <UART_Send_Str+0x54>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fed1 	bl	8002f6e <osMutexRelease>
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000218 	.word	0x20000218

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011dc:	f000 fbb8 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e0:	f000 f882 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e4:	f000 f8de 	bl	80013a4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011e8:	f001 fb1a 	bl	8002820 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of UART_lock */
  UART_lockHandle = osMutexNew(&UART_lock_attributes);
 80011ec:	4827      	ldr	r0, [pc, #156]	; (800128c <main+0xb4>)
 80011ee:	f001 fded 	bl	8002dcc <osMutexNew>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a26      	ldr	r2, [pc, #152]	; (8001290 <main+0xb8>)
 80011f6:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(4, 4, &myCountingSem01_attributes);
 80011f8:	4a26      	ldr	r2, [pc, #152]	; (8001294 <main+0xbc>)
 80011fa:	2104      	movs	r1, #4
 80011fc:	2004      	movs	r0, #4
 80011fe:	f001 fef3 	bl	8002fe8 <osSemaphoreNew>
 8001202:	4603      	mov	r3, r0
 8001204:	4a24      	ldr	r2, [pc, #144]	; (8001298 <main+0xc0>)
 8001206:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback_timer, osTimerPeriodic, NULL, &myTimer01_attributes);
 8001208:	4b24      	ldr	r3, [pc, #144]	; (800129c <main+0xc4>)
 800120a:	2200      	movs	r2, #0
 800120c:	2101      	movs	r1, #1
 800120e:	4824      	ldr	r0, [pc, #144]	; (80012a0 <main+0xc8>)
 8001210:	f001 fc12 	bl	8002a38 <osTimerNew>
 8001214:	4603      	mov	r3, r0
 8001216:	4a23      	ldr	r2, [pc, #140]	; (80012a4 <main+0xcc>)
 8001218:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of temp_queue */
  temp_queueHandle = osMessageQueueNew (16, sizeof(float), &temp_queue_attributes);
 800121a:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <main+0xd0>)
 800121c:	2104      	movs	r1, #4
 800121e:	2010      	movs	r0, #16
 8001220:	f001 ff6b 	bl	80030fa <osMessageQueueNew>
 8001224:	4603      	mov	r3, r0
 8001226:	4a21      	ldr	r2, [pc, #132]	; (80012ac <main+0xd4>)
 8001228:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(send_data_task, NULL, &defaultTask_attributes);
 800122a:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <main+0xd8>)
 800122c:	2100      	movs	r1, #0
 800122e:	4821      	ldr	r0, [pc, #132]	; (80012b4 <main+0xdc>)
 8001230:	f001 fb40 	bl	80028b4 <osThreadNew>
 8001234:	4603      	mov	r3, r0
 8001236:	4a20      	ldr	r2, [pc, #128]	; (80012b8 <main+0xe0>)
 8001238:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(read_temp_ss_task, NULL, &myTask02_attributes);
 800123a:	4a20      	ldr	r2, [pc, #128]	; (80012bc <main+0xe4>)
 800123c:	2100      	movs	r1, #0
 800123e:	4820      	ldr	r0, [pc, #128]	; (80012c0 <main+0xe8>)
 8001240:	f001 fb38 	bl	80028b4 <osThreadNew>
 8001244:	4603      	mov	r3, r0
 8001246:	4a1f      	ldr	r2, [pc, #124]	; (80012c4 <main+0xec>)
 8001248:	6013      	str	r3, [r2, #0]

  /* creation of task_helloTask */
  task_helloTaskHandle = osThreadNew(print_hello_func, NULL, &task_helloTask_attributes);
 800124a:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <main+0xf0>)
 800124c:	2100      	movs	r1, #0
 800124e:	481f      	ldr	r0, [pc, #124]	; (80012cc <main+0xf4>)
 8001250:	f001 fb30 	bl	80028b4 <osThreadNew>
 8001254:	4603      	mov	r3, r0
 8001256:	4a1e      	ldr	r2, [pc, #120]	; (80012d0 <main+0xf8>)
 8001258:	6013      	str	r3, [r2, #0]

  /* creation of putQueue */
  putQueueHandle = osThreadNew(StartTask04, NULL, &putQueue_attributes);
 800125a:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <main+0xfc>)
 800125c:	2100      	movs	r1, #0
 800125e:	481e      	ldr	r0, [pc, #120]	; (80012d8 <main+0x100>)
 8001260:	f001 fb28 	bl	80028b4 <osThreadNew>
 8001264:	4603      	mov	r3, r0
 8001266:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <main+0x104>)
 8001268:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of read_sensor_status */
  read_sensor_statusHandle = osEventFlagsNew(&read_sensor_status_attributes);
 800126a:	481d      	ldr	r0, [pc, #116]	; (80012e0 <main+0x108>)
 800126c:	f001 fcc5 	bl	8002bfa <osEventFlagsNew>
 8001270:	4603      	mov	r3, r0
 8001272:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <main+0x10c>)
 8001274:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  osTimerStart(myTimer01Handle, 1000);
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <main+0xcc>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800127e:	4618      	mov	r0, r3
 8001280:	f001 fc56 	bl	8002b30 <osTimerStart>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001284:	f001 faf0 	bl	8002868 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001288:	e7fe      	b.n	8001288 <main+0xb0>
 800128a:	bf00      	nop
 800128c:	08009bcc 	.word	0x08009bcc
 8001290:	20000218 	.word	0x20000218
 8001294:	08009bdc 	.word	0x08009bdc
 8001298:	2000021c 	.word	0x2000021c
 800129c:	08009bbc 	.word	0x08009bbc
 80012a0:	08001625 	.word	0x08001625
 80012a4:	20000214 	.word	0x20000214
 80012a8:	08009ba4 	.word	0x08009ba4
 80012ac:	20000210 	.word	0x20000210
 80012b0:	08009b14 	.word	0x08009b14
 80012b4:	0800142d 	.word	0x0800142d
 80012b8:	20000200 	.word	0x20000200
 80012bc:	08009b38 	.word	0x08009b38
 80012c0:	080014d9 	.word	0x080014d9
 80012c4:	20000204 	.word	0x20000204
 80012c8:	08009b5c 	.word	0x08009b5c
 80012cc:	080015c5 	.word	0x080015c5
 80012d0:	20000208 	.word	0x20000208
 80012d4:	08009b80 	.word	0x08009b80
 80012d8:	080015e1 	.word	0x080015e1
 80012dc:	2000020c 	.word	0x2000020c
 80012e0:	08009bec 	.word	0x08009bec
 80012e4:	20000220 	.word	0x20000220

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	; 0x50
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2230      	movs	r2, #48	; 0x30
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f005 fcc0 	bl	8006c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <SystemClock_Config+0xb4>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a21      	ldr	r2, [pc, #132]	; (800139c <SystemClock_Config+0xb4>)
 8001316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <SystemClock_Config+0xb4>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <SystemClock_Config+0xb8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <SystemClock_Config+0xb8>)
 8001332:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <SystemClock_Config+0xb8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134c:	2310      	movs	r3, #16
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001350:	2300      	movs	r3, #0
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	4618      	mov	r0, r3
 800135a:	f000 fe09 	bl	8001f70 <HAL_RCC_OscConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001364:	f000 f99e 	bl	80016a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001368:	230f      	movs	r3, #15
 800136a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f001 f86c 	bl	8002460 <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800138e:	f000 f989 	bl	80016a4 <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3750      	adds	r7, #80	; 0x50
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <MX_GPIO_Init+0x80>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a18      	ldr	r2, [pc, #96]	; (8001424 <MX_GPIO_Init+0x80>)
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_GPIO_Init+0x80>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <MX_GPIO_Init+0x80>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a11      	ldr	r2, [pc, #68]	; (8001424 <MX_GPIO_Init+0x80>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_GPIO_Init+0x80>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80013f8:	480b      	ldr	r0, [pc, #44]	; (8001428 <MX_GPIO_Init+0x84>)
 80013fa:	f000 fd85 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013fe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	4619      	mov	r1, r3
 8001416:	4804      	ldr	r0, [pc, #16]	; (8001428 <MX_GPIO_Init+0x84>)
 8001418:	f000 fbf2 	bl	8001c00 <HAL_GPIO_Init>

}
 800141c:	bf00      	nop
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40020c00 	.word	0x40020c00

0800142c <send_data_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_send_data_task */
void send_data_task(void *argument)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	; 0x30
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	UART_Init();
 8001434:	f7ff fe26 	bl	8001084 <UART_Init>
	float temp = 0;
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Infinite loop */
  for(;;)
  {
	  temp = temp_global;
 800143e:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <send_data_task+0x9c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
	  osMessageQueueGet(temp_queueHandle, &temp,  osPriorityNormal , 10000);
 8001444:	4b21      	ldr	r3, [pc, #132]	; (80014cc <send_data_task+0xa0>)
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800144c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001450:	2218      	movs	r2, #24
 8001452:	f001 ff25 	bl	80032a0 <osMessageQueueGet>
	  char msg[32] = {0};
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
 800146a:	615a      	str	r2, [r3, #20]
 800146c:	619a      	str	r2, [r3, #24]
	  char frac = (int)((temp - (int)temp)*100);
 800146e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001472:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800147a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001482:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80014d0 <send_data_task+0xa4>
 8001486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800148e:	edc7 7a00 	vstr	s15, [r7]
 8001492:	783b      	ldrb	r3, [r7, #0]
 8001494:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  sprintf(msg, "temp: %d.%d *C\r\n", (int)temp, frac);    //sprintf de format du lieu
 8001498:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800149c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014a4:	f107 0008 	add.w	r0, r7, #8
 80014a8:	ee17 2a90 	vmov	r2, s15
 80014ac:	4909      	ldr	r1, [pc, #36]	; (80014d4 <send_data_task+0xa8>)
 80014ae:	f006 f857 	bl	8007560 <siprintf>
	  UART_Send_Str(msg);
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fe62 	bl	8001180 <UART_Send_Str>
      osDelay(1000);
 80014bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014c0:	f001 fa8a 	bl	80029d8 <osDelay>
  {
 80014c4:	e7bb      	b.n	800143e <send_data_task+0x12>
 80014c6:	bf00      	nop
 80014c8:	200001fc 	.word	0x200001fc
 80014cc:	20000210 	.word	0x20000210
 80014d0:	42c80000 	.word	0x42c80000
 80014d4:	08009acc 	.word	0x08009acc

080014d8 <read_temp_ss_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_temp_ss_task */
void read_temp_ss_task(void *argument)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_temp_ss_task */
	ADC_Init();
 80014e0:	f7ff fd3c 	bl	8000f5c <ADC_Init>
	uint16_t data_raw =0; Read_ADC();
 80014e4:	2300      	movs	r3, #0
 80014e6:	81fb      	strh	r3, [r7, #14]
 80014e8:	f7ff fd9e 	bl	8001028 <Read_ADC>
	float vin =0;
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
//	  {int temp;}
	data_raw = Read_ADC();
 80014f2:	f7ff fd99 	bl	8001028 <Read_ADC>
 80014f6:	4603      	mov	r3, r0
 80014f8:	81fb      	strh	r3, [r7, #14]
	vin = (data_raw*3.0)/4095.0;
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f819 	bl	8000534 <__aeabi_i2d>
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <read_temp_ss_task+0xd8>)
 8001508:	f7ff f87e 	bl	8000608 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	a320      	add	r3, pc, #128	; (adr r3, 8001598 <read_temp_ss_task+0xc0>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff f99f 	bl	800085c <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fb47 	bl	8000bb8 <__aeabi_d2f>
 800152a:	4603      	mov	r3, r0
 800152c:	60bb      	str	r3, [r7, #8]
	temp = ((vin - 0.76) / 0.0025) + 25;
 800152e:	68b8      	ldr	r0, [r7, #8]
 8001530:	f7ff f812 	bl	8000558 <__aeabi_f2d>
 8001534:	a31a      	add	r3, pc, #104	; (adr r3, 80015a0 <read_temp_ss_task+0xc8>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f7fe fead 	bl	8000298 <__aeabi_dsub>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	a318      	add	r3, pc, #96	; (adr r3, 80015a8 <read_temp_ss_task+0xd0>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7ff f986 	bl	800085c <__aeabi_ddiv>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <read_temp_ss_task+0xdc>)
 800155e:	f7fe fe9d 	bl	800029c <__adddf3>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fb25 	bl	8000bb8 <__aeabi_d2f>
 800156e:	4603      	mov	r3, r0
 8001570:	4a11      	ldr	r2, [pc, #68]	; (80015b8 <read_temp_ss_task+0xe0>)
 8001572:	6013      	str	r3, [r2, #0]
	osEventFlagsSet(read_sensor_statusHandle, READ_SENSOR_DONE);
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <read_temp_ss_task+0xe4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2101      	movs	r1, #1
 800157a:	4618      	mov	r0, r3
 800157c:	f001 fb7c 	bl	8002c78 <osEventFlagsSet>
	osMessageQueuePut(temp_queueHandle, &temp,  osPriorityNormal , 10000);
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <read_temp_ss_task+0xe8>)
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	f242 7310 	movw	r3, #10000	; 0x2710
 8001588:	2218      	movs	r2, #24
 800158a:	490b      	ldr	r1, [pc, #44]	; (80015b8 <read_temp_ss_task+0xe0>)
 800158c:	f001 fe28 	bl	80031e0 <osMessageQueuePut>
//	temp_global = temp; //= la gan ghi du lieu vung nho
    osDelay(1);
 8001590:	2001      	movs	r0, #1
 8001592:	f001 fa21 	bl	80029d8 <osDelay>
	data_raw = Read_ADC();
 8001596:	e7ac      	b.n	80014f2 <read_temp_ss_task+0x1a>
 8001598:	00000000 	.word	0x00000000
 800159c:	40affe00 	.word	0x40affe00
 80015a0:	851eb852 	.word	0x851eb852
 80015a4:	3fe851eb 	.word	0x3fe851eb
 80015a8:	47ae147b 	.word	0x47ae147b
 80015ac:	3f647ae1 	.word	0x3f647ae1
 80015b0:	40080000 	.word	0x40080000
 80015b4:	40390000 	.word	0x40390000
 80015b8:	20000224 	.word	0x20000224
 80015bc:	20000220 	.word	0x20000220
 80015c0:	20000210 	.word	0x20000210

080015c4 <print_hello_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_print_hello_func */
void print_hello_func(void *argument)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN print_hello_func */
  /* Infinite loop */
  for(;;)
  {
	  UART_Send_Str("hello \r\n");
 80015cc:	4803      	ldr	r0, [pc, #12]	; (80015dc <print_hello_func+0x18>)
 80015ce:	f7ff fdd7 	bl	8001180 <UART_Send_Str>
	  osDelay(1000);
 80015d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015d6:	f001 f9ff 	bl	80029d8 <osDelay>
	  UART_Send_Str("hello \r\n");
 80015da:	e7f7      	b.n	80015cc <print_hello_func+0x8>
 80015dc:	08009ae0 	.word	0x08009ae0

080015e0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */

  for(;;)
  {
	  uint32_t flag_result = osEventFlagsWait(read_sensor_statusHandle, READ_SENSOR_DONE, osFlagsWaitAny, 10000);
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <StartTask04+0x38>)
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	f242 7310 	movw	r3, #10000	; 0x2710
 80015f0:	2200      	movs	r2, #0
 80015f2:	2101      	movs	r1, #1
 80015f4:	f001 fb84 	bl	8002d00 <osEventFlagsWait>
 80015f8:	60f8      	str	r0, [r7, #12]
	  if (flag_result == READ_SENSOR_DONE)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d107      	bne.n	8001610 <StartTask04+0x30>
		  osMessageQueuePut(temp_queueHandle, &temp,  osPriorityNormal , 10000);
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <StartTask04+0x3c>)
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	f242 7310 	movw	r3, #10000	; 0x2710
 8001608:	2218      	movs	r2, #24
 800160a:	4905      	ldr	r1, [pc, #20]	; (8001620 <StartTask04+0x40>)
 800160c:	f001 fde8 	bl	80031e0 <osMessageQueuePut>
	  osDelay(1);
 8001610:	2001      	movs	r0, #1
 8001612:	f001 f9e1 	bl	80029d8 <osDelay>
  {
 8001616:	e7e7      	b.n	80015e8 <StartTask04+0x8>
 8001618:	20000220 	.word	0x20000220
 800161c:	20000210 	.word	0x20000210
 8001620:	20000224 	.word	0x20000224

08001624 <Callback_timer>:
  /* USER CODE END StartTask04 */
}

/* Callback_timer function */
void Callback_timer(void *argument)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	; 0x30
 8001628:	af02      	add	r7, sp, #8
 800162a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback_timer */
	static int cnt = 0;
	char msg[32] = {0};
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
 8001640:	615a      	str	r2, [r3, #20]
 8001642:	619a      	str	r2, [r3, #24]
	sprintf(msg, "[%d] %s: %d\r\n", __LINE__, __FUNCTION__, cnt);
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <Callback_timer+0x6c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f107 0008 	add.w	r0, r7, #8
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <Callback_timer+0x70>)
 8001650:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001654:	4910      	ldr	r1, [pc, #64]	; (8001698 <Callback_timer+0x74>)
 8001656:	f005 ff83 	bl	8007560 <siprintf>
	UART_Send_Str(msg);
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fd8e 	bl	8001180 <UART_Send_Str>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <Callback_timer+0x78>)
 800166a:	f000 fc66 	bl	8001f3a <HAL_GPIO_TogglePin>
	if (cnt++ >10)
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <Callback_timer+0x6c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	4906      	ldr	r1, [pc, #24]	; (8001690 <Callback_timer+0x6c>)
 8001676:	600a      	str	r2, [r1, #0]
 8001678:	2b0a      	cmp	r3, #10
 800167a:	dd04      	ble.n	8001686 <Callback_timer+0x62>
		osTimerStop(myTimer01Handle);
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <Callback_timer+0x7c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f001 fa83 	bl	8002b8c <osTimerStop>
  /* USER CODE END Callback_timer */
}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000228 	.word	0x20000228
 8001694:	08009bfc 	.word	0x08009bfc
 8001698:	08009aec 	.word	0x08009aec
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	20000214 	.word	0x20000214

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a8:	b672      	cpsid	i
}
 80016aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ac:	e7fe      	b.n	80016ac <Error_Handler+0x8>
	...

080016b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_MspInit+0x54>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	4a11      	ldr	r2, [pc, #68]	; (8001704 <HAL_MspInit+0x54>)
 80016c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c4:	6453      	str	r3, [r2, #68]	; 0x44
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_MspInit+0x54>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_MspInit+0x54>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <HAL_MspInit+0x54>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_MspInit+0x54>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	210f      	movs	r1, #15
 80016f2:	f06f 0001 	mvn.w	r0, #1
 80016f6:	f000 fa5a 	bl	8001bae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800170c:	e7fe      	b.n	800170c <NMI_Handler+0x4>

0800170e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <MemManage_Handler+0x4>

0800171a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <UsageFault_Handler+0x4>

08001726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001738:	f000 f95c 	bl	80019f4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800173c:	f003 ffe8 	bl	8005710 <xTaskGetSchedulerState>
 8001740:	4603      	mov	r3, r0
 8001742:	2b01      	cmp	r3, #1
 8001744:	d001      	beq.n	800174a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001746:	f004 ffe7 	bl	8006718 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}

0800174e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  return 1;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_kill>:

int _kill(int pid, int sig)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001768:	f005 fa50 	bl	8006c0c <__errno>
 800176c:	4603      	mov	r3, r0
 800176e:	2216      	movs	r2, #22
 8001770:	601a      	str	r2, [r3, #0]
  return -1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <_exit>:

void _exit (int status)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001786:	f04f 31ff 	mov.w	r1, #4294967295
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ffe7 	bl	800175e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001790:	e7fe      	b.n	8001790 <_exit+0x12>

08001792 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	e00a      	b.n	80017ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017a4:	f3af 8000 	nop.w
 80017a8:	4601      	mov	r1, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	60ba      	str	r2, [r7, #8]
 80017b0:	b2ca      	uxtb	r2, r1
 80017b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	3301      	adds	r3, #1
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	429a      	cmp	r2, r3
 80017c0:	dbf0      	blt.n	80017a4 <_read+0x12>
  }

  return len;
 80017c2:	687b      	ldr	r3, [r7, #4]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e009      	b.n	80017f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	60ba      	str	r2, [r7, #8]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	dbf1      	blt.n	80017de <_write+0x12>
  }
  return len;
 80017fa:	687b      	ldr	r3, [r7, #4]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <_close>:

int _close(int file)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800182c:	605a      	str	r2, [r3, #4]
  return 0;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_isatty>:

int _isatty(int file)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001852:	b480      	push	{r7}
 8001854:	b085      	sub	sp, #20
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <_sbrk+0x5c>)
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <_sbrk+0x60>)
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <_sbrk+0x64>)
 800188a:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <_sbrk+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	429a      	cmp	r2, r3
 800189a:	d207      	bcs.n	80018ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800189c:	f005 f9b6 	bl	8006c0c <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	220c      	movs	r2, #12
 80018a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	e009      	b.n	80018c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <_sbrk+0x64>)
 80018bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20020000 	.word	0x20020000
 80018cc:	00000400 	.word	0x00000400
 80018d0:	2000022c 	.word	0x2000022c
 80018d4:	20004b98 	.word	0x20004b98

080018d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <SystemInit+0x20>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <SystemInit+0x20>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001934 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001900:	480d      	ldr	r0, [pc, #52]	; (8001938 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001902:	490e      	ldr	r1, [pc, #56]	; (800193c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001908:	e002      	b.n	8001910 <LoopCopyDataInit>

0800190a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800190c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190e:	3304      	adds	r3, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001914:	d3f9      	bcc.n	800190a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001918:	4c0b      	ldr	r4, [pc, #44]	; (8001948 <LoopFillZerobss+0x26>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800191c:	e001      	b.n	8001922 <LoopFillZerobss>

0800191e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001920:	3204      	adds	r2, #4

08001922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001924:	d3fb      	bcc.n	800191e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001926:	f7ff ffd7 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192a:	f005 f975 	bl	8006c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192e:	f7ff fc53 	bl	80011d8 <main>
  bx  lr    
 8001932:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800193c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001940:	0800a004 	.word	0x0800a004
  ldr r2, =_sbss
 8001944:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001948:	20004b94 	.word	0x20004b94

0800194c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC_IRQHandler>
	...

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <HAL_Init+0x40>)
 800195a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <HAL_Init+0x40>)
 8001966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a07      	ldr	r2, [pc, #28]	; (8001990 <HAL_Init+0x40>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f000 f90d 	bl	8001b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197e:	200f      	movs	r0, #15
 8001980:	f000 f808 	bl	8001994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001984:	f7ff fe94 	bl	80016b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023c00 	.word	0x40023c00

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_InitTick+0x54>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x58>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f917 	bl	8001be6 <HAL_SYSTICK_Config>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00e      	b.n	80019e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d80a      	bhi.n	80019de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f000 f8ed 	bl	8001bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d4:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <HAL_InitTick+0x5c>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000004 	.word	0x20000004

080019f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x24>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_IncTick+0x24>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000008 	.word	0x20000008
 8001a18:	20000230 	.word	0x20000230

08001a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_GetTick+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000230 	.word	0x20000230

08001a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a66:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60d3      	str	r3, [r2, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <__NVIC_GetPriorityGrouping+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0307 	and.w	r3, r3, #7
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	db0a      	blt.n	8001ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	490c      	ldr	r1, [pc, #48]	; (8001ae4 <__NVIC_SetPriority+0x4c>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	0112      	lsls	r2, r2, #4
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac0:	e00a      	b.n	8001ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4908      	ldr	r1, [pc, #32]	; (8001ae8 <__NVIC_SetPriority+0x50>)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	3b04      	subs	r3, #4
 8001ad0:	0112      	lsls	r2, r2, #4
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	761a      	strb	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000e100 	.word	0xe000e100
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f1c3 0307 	rsb	r3, r3, #7
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	bf28      	it	cs
 8001b0a:	2304      	movcs	r3, #4
 8001b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3304      	adds	r3, #4
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d902      	bls.n	8001b1c <NVIC_EncodePriority+0x30>
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3b03      	subs	r3, #3
 8001b1a:	e000      	b.n	8001b1e <NVIC_EncodePriority+0x32>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	401a      	ands	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	4313      	orrs	r3, r2
         );
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3724      	adds	r7, #36	; 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b64:	d301      	bcc.n	8001b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00f      	b.n	8001b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <SysTick_Config+0x40>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b72:	210f      	movs	r1, #15
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f7ff ff8e 	bl	8001a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <SysTick_Config+0x40>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b82:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <SysTick_Config+0x40>)
 8001b84:	2207      	movs	r2, #7
 8001b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	e000e010 	.word	0xe000e010

08001b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ff47 	bl	8001a34 <__NVIC_SetPriorityGrouping>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc0:	f7ff ff5c 	bl	8001a7c <__NVIC_GetPriorityGrouping>
 8001bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	6978      	ldr	r0, [r7, #20]
 8001bcc:	f7ff ff8e 	bl	8001aec <NVIC_EncodePriority>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff5d 	bl	8001a98 <__NVIC_SetPriority>
}
 8001bde:	bf00      	nop
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ffb0 	bl	8001b54 <SysTick_Config>
 8001bf4:	4603      	mov	r3, r0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	e159      	b.n	8001ed0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	f040 8148 	bne.w	8001eca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d005      	beq.n	8001c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d130      	bne.n	8001cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 0201 	and.w	r2, r3, #1
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d017      	beq.n	8001cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d123      	bne.n	8001d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	08da      	lsrs	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3208      	adds	r2, #8
 8001d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	220f      	movs	r2, #15
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	08da      	lsrs	r2, r3, #3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3208      	adds	r2, #8
 8001d3e:	69b9      	ldr	r1, [r7, #24]
 8001d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0203 	and.w	r2, r3, #3
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80a2 	beq.w	8001eca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b57      	ldr	r3, [pc, #348]	; (8001ee8 <HAL_GPIO_Init+0x2e8>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	4a56      	ldr	r2, [pc, #344]	; (8001ee8 <HAL_GPIO_Init+0x2e8>)
 8001d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d94:	6453      	str	r3, [r2, #68]	; 0x44
 8001d96:	4b54      	ldr	r3, [pc, #336]	; (8001ee8 <HAL_GPIO_Init+0x2e8>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001da2:	4a52      	ldr	r2, [pc, #328]	; (8001eec <HAL_GPIO_Init+0x2ec>)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	3302      	adds	r3, #2
 8001daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	220f      	movs	r2, #15
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a49      	ldr	r2, [pc, #292]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d019      	beq.n	8001e02 <HAL_GPIO_Init+0x202>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a48      	ldr	r2, [pc, #288]	; (8001ef4 <HAL_GPIO_Init+0x2f4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d013      	beq.n	8001dfe <HAL_GPIO_Init+0x1fe>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a47      	ldr	r2, [pc, #284]	; (8001ef8 <HAL_GPIO_Init+0x2f8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00d      	beq.n	8001dfa <HAL_GPIO_Init+0x1fa>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a46      	ldr	r2, [pc, #280]	; (8001efc <HAL_GPIO_Init+0x2fc>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d007      	beq.n	8001df6 <HAL_GPIO_Init+0x1f6>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a45      	ldr	r2, [pc, #276]	; (8001f00 <HAL_GPIO_Init+0x300>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d101      	bne.n	8001df2 <HAL_GPIO_Init+0x1f2>
 8001dee:	2304      	movs	r3, #4
 8001df0:	e008      	b.n	8001e04 <HAL_GPIO_Init+0x204>
 8001df2:	2307      	movs	r3, #7
 8001df4:	e006      	b.n	8001e04 <HAL_GPIO_Init+0x204>
 8001df6:	2303      	movs	r3, #3
 8001df8:	e004      	b.n	8001e04 <HAL_GPIO_Init+0x204>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e002      	b.n	8001e04 <HAL_GPIO_Init+0x204>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_GPIO_Init+0x204>
 8001e02:	2300      	movs	r3, #0
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	f002 0203 	and.w	r2, r2, #3
 8001e0a:	0092      	lsls	r2, r2, #2
 8001e0c:	4093      	lsls	r3, r2
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e14:	4935      	ldr	r1, [pc, #212]	; (8001eec <HAL_GPIO_Init+0x2ec>)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e22:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e46:	4a2f      	ldr	r2, [pc, #188]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e70:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e9a:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec4:	4a0f      	ldr	r2, [pc, #60]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	61fb      	str	r3, [r7, #28]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2b0f      	cmp	r3, #15
 8001ed4:	f67f aea2 	bls.w	8001c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40013800 	.word	0x40013800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	40020800 	.word	0x40020800
 8001efc:	40020c00 	.word	0x40020c00
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40013c00 	.word	0x40013c00

08001f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
 8001f14:	4613      	mov	r3, r2
 8001f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f18:	787b      	ldrb	r3, [r7, #1]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f24:	e003      	b.n	8001f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f26:	887b      	ldrh	r3, [r7, #2]
 8001f28:	041a      	lsls	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	619a      	str	r2, [r3, #24]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f4c:	887a      	ldrh	r2, [r7, #2]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4013      	ands	r3, r2
 8001f52:	041a      	lsls	r2, r3, #16
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	43d9      	mvns	r1, r3
 8001f58:	887b      	ldrh	r3, [r7, #2]
 8001f5a:	400b      	ands	r3, r1
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	619a      	str	r2, [r3, #24]
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e267      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d075      	beq.n	800207a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f8e:	4b88      	ldr	r3, [pc, #544]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d00c      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9a:	4b85      	ldr	r3, [pc, #532]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d112      	bne.n	8001fcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa6:	4b82      	ldr	r3, [pc, #520]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb2:	d10b      	bne.n	8001fcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb4:	4b7e      	ldr	r3, [pc, #504]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d05b      	beq.n	8002078 <HAL_RCC_OscConfig+0x108>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d157      	bne.n	8002078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e242      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd4:	d106      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x74>
 8001fd6:	4b76      	ldr	r3, [pc, #472]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a75      	ldr	r2, [pc, #468]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e01d      	b.n	8002020 <HAL_RCC_OscConfig+0xb0>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fec:	d10c      	bne.n	8002008 <HAL_RCC_OscConfig+0x98>
 8001fee:	4b70      	ldr	r3, [pc, #448]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a6f      	ldr	r2, [pc, #444]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	4b6d      	ldr	r3, [pc, #436]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a6c      	ldr	r2, [pc, #432]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e00b      	b.n	8002020 <HAL_RCC_OscConfig+0xb0>
 8002008:	4b69      	ldr	r3, [pc, #420]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a68      	ldr	r2, [pc, #416]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800200e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	4b66      	ldr	r3, [pc, #408]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a65      	ldr	r2, [pc, #404]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800201a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800201e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d013      	beq.n	8002050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff fcf8 	bl	8001a1c <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002030:	f7ff fcf4 	bl	8001a1c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	; 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e207      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	4b5b      	ldr	r3, [pc, #364]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0xc0>
 800204e:	e014      	b.n	800207a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff fce4 	bl	8001a1c <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff fce0 	bl	8001a1c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e1f3      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206a:	4b51      	ldr	r3, [pc, #324]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0xe8>
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d063      	beq.n	800214e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002086:	4b4a      	ldr	r3, [pc, #296]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00b      	beq.n	80020aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002092:	4b47      	ldr	r3, [pc, #284]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800209a:	2b08      	cmp	r3, #8
 800209c:	d11c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209e:	4b44      	ldr	r3, [pc, #272]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d116      	bne.n	80020d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020aa:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d005      	beq.n	80020c2 <HAL_RCC_OscConfig+0x152>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e1c7      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c2:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4937      	ldr	r1, [pc, #220]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d6:	e03a      	b.n	800214e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d020      	beq.n	8002122 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e0:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <HAL_RCC_OscConfig+0x244>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7ff fc99 	bl	8001a1c <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ee:	f7ff fc95 	bl	8001a1c <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e1a8      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002100:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210c:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4925      	ldr	r1, [pc, #148]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
 8002120:	e015      	b.n	800214e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_RCC_OscConfig+0x244>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7ff fc78 	bl	8001a1c <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002130:	f7ff fc74 	bl	8001a1c <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e187      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002142:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d036      	beq.n	80021c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d016      	beq.n	8002190 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_RCC_OscConfig+0x248>)
 8002164:	2201      	movs	r2, #1
 8002166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002168:	f7ff fc58 	bl	8001a1c <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002170:	f7ff fc54 	bl	8001a1c <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e167      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x200>
 800218e:	e01b      	b.n	80021c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_OscConfig+0x248>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7ff fc41 	bl	8001a1c <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219c:	e00e      	b.n	80021bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219e:	f7ff fc3d 	bl	8001a1c <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d907      	bls.n	80021bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e150      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
 80021b0:	40023800 	.word	0x40023800
 80021b4:	42470000 	.word	0x42470000
 80021b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021bc:	4b88      	ldr	r3, [pc, #544]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80021be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ea      	bne.n	800219e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8097 	beq.w	8002304 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d6:	2300      	movs	r3, #0
 80021d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021da:	4b81      	ldr	r3, [pc, #516]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10f      	bne.n	8002206 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	4b7d      	ldr	r3, [pc, #500]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a7c      	ldr	r2, [pc, #496]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80021f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b7a      	ldr	r3, [pc, #488]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002202:	2301      	movs	r3, #1
 8002204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	4b77      	ldr	r3, [pc, #476]	; (80023e4 <HAL_RCC_OscConfig+0x474>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d118      	bne.n	8002244 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002212:	4b74      	ldr	r3, [pc, #464]	; (80023e4 <HAL_RCC_OscConfig+0x474>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a73      	ldr	r2, [pc, #460]	; (80023e4 <HAL_RCC_OscConfig+0x474>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221e:	f7ff fbfd 	bl	8001a1c <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002226:	f7ff fbf9 	bl	8001a1c <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e10c      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	4b6a      	ldr	r3, [pc, #424]	; (80023e4 <HAL_RCC_OscConfig+0x474>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x2ea>
 800224c:	4b64      	ldr	r3, [pc, #400]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	4a63      	ldr	r2, [pc, #396]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6713      	str	r3, [r2, #112]	; 0x70
 8002258:	e01c      	b.n	8002294 <HAL_RCC_OscConfig+0x324>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b05      	cmp	r3, #5
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x30c>
 8002262:	4b5f      	ldr	r3, [pc, #380]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	4a5e      	ldr	r2, [pc, #376]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	6713      	str	r3, [r2, #112]	; 0x70
 800226e:	4b5c      	ldr	r3, [pc, #368]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	4a5b      	ldr	r2, [pc, #364]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6713      	str	r3, [r2, #112]	; 0x70
 800227a:	e00b      	b.n	8002294 <HAL_RCC_OscConfig+0x324>
 800227c:	4b58      	ldr	r3, [pc, #352]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	4a57      	ldr	r2, [pc, #348]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	6713      	str	r3, [r2, #112]	; 0x70
 8002288:	4b55      	ldr	r3, [pc, #340]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	4a54      	ldr	r2, [pc, #336]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 800228e:	f023 0304 	bic.w	r3, r3, #4
 8002292:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229c:	f7ff fbbe 	bl	8001a1c <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a4:	f7ff fbba 	bl	8001a1c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e0cb      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ba:	4b49      	ldr	r3, [pc, #292]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0ee      	beq.n	80022a4 <HAL_RCC_OscConfig+0x334>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c8:	f7ff fba8 	bl	8001a1c <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7ff fba4 	bl	8001a1c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e0b5      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e6:	4b3e      	ldr	r3, [pc, #248]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1ee      	bne.n	80022d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022f2:	7dfb      	ldrb	r3, [r7, #23]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d105      	bne.n	8002304 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f8:	4b39      	ldr	r3, [pc, #228]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	4a38      	ldr	r2, [pc, #224]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80022fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002302:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80a1 	beq.w	8002450 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800230e:	4b34      	ldr	r3, [pc, #208]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b08      	cmp	r3, #8
 8002318:	d05c      	beq.n	80023d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d141      	bne.n	80023a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002322:	4b31      	ldr	r3, [pc, #196]	; (80023e8 <HAL_RCC_OscConfig+0x478>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7ff fb78 	bl	8001a1c <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002330:	f7ff fb74 	bl	8001a1c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e087      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	019b      	lsls	r3, r3, #6
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	085b      	lsrs	r3, r3, #1
 8002366:	3b01      	subs	r3, #1
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	061b      	lsls	r3, r3, #24
 8002372:	491b      	ldr	r1, [pc, #108]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_RCC_OscConfig+0x478>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237e:	f7ff fb4d 	bl	8001a1c <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002386:	f7ff fb49 	bl	8001a1c <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e05c      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x416>
 80023a4:	e054      	b.n	8002450 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <HAL_RCC_OscConfig+0x478>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7ff fb36 	bl	8001a1c <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b4:	f7ff fb32 	bl	8001a1c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e045      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x444>
 80023d2:	e03d      	b.n	8002450 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d107      	bne.n	80023ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e038      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40007000 	.word	0x40007000
 80023e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_RCC_OscConfig+0x4ec>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d028      	beq.n	800244c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d121      	bne.n	800244c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d11a      	bne.n	800244c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800241c:	4013      	ands	r3, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002422:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002424:	4293      	cmp	r3, r2
 8002426:	d111      	bne.n	800244c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	3b01      	subs	r3, #1
 8002436:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d107      	bne.n	800244c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800

08002460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0cc      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002474:	4b68      	ldr	r3, [pc, #416]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d90c      	bls.n	800249c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b65      	ldr	r3, [pc, #404]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b63      	ldr	r3, [pc, #396]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0b8      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b4:	4b59      	ldr	r3, [pc, #356]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4a58      	ldr	r2, [pc, #352]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024cc:	4b53      	ldr	r3, [pc, #332]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4a52      	ldr	r2, [pc, #328]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d8:	4b50      	ldr	r3, [pc, #320]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	494d      	ldr	r1, [pc, #308]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d044      	beq.n	8002580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	4b47      	ldr	r3, [pc, #284]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d119      	bne.n	800253e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e07f      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d003      	beq.n	800251e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800251a:	2b03      	cmp	r3, #3
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251e:	4b3f      	ldr	r3, [pc, #252]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e06f      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252e:	4b3b      	ldr	r3, [pc, #236]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e067      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253e:	4b37      	ldr	r3, [pc, #220]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f023 0203 	bic.w	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	4934      	ldr	r1, [pc, #208]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	4313      	orrs	r3, r2
 800254e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002550:	f7ff fa64 	bl	8001a1c <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002556:	e00a      	b.n	800256e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002558:	f7ff fa60 	bl	8001a1c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	; 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e04f      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	4b2b      	ldr	r3, [pc, #172]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 020c 	and.w	r2, r3, #12
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	429a      	cmp	r2, r3
 800257e:	d1eb      	bne.n	8002558 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002580:	4b25      	ldr	r3, [pc, #148]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d20c      	bcs.n	80025a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b22      	ldr	r3, [pc, #136]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e032      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b4:	4b19      	ldr	r3, [pc, #100]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4916      	ldr	r1, [pc, #88]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	490e      	ldr	r1, [pc, #56]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025e6:	f000 f821 	bl	800262c <HAL_RCC_GetSysClockFreq>
 80025ea:	4602      	mov	r2, r0
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	490a      	ldr	r1, [pc, #40]	; (8002620 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	5ccb      	ldrb	r3, [r1, r3]
 80025fa:	fa22 f303 	lsr.w	r3, r2, r3
 80025fe:	4a09      	ldr	r2, [pc, #36]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_RCC_ClockConfig+0x1c8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff f9c4 	bl	8001994 <HAL_InitTick>

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40023c00 	.word	0x40023c00
 800261c:	40023800 	.word	0x40023800
 8002620:	08009c0c 	.word	0x08009c0c
 8002624:	20000000 	.word	0x20000000
 8002628:	20000004 	.word	0x20000004

0800262c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800262c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002630:	b090      	sub	sp, #64	; 0x40
 8002632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	637b      	str	r3, [r7, #52]	; 0x34
 8002638:	2300      	movs	r3, #0
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800263c:	2300      	movs	r3, #0
 800263e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002644:	4b59      	ldr	r3, [pc, #356]	; (80027ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b08      	cmp	r3, #8
 800264e:	d00d      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x40>
 8002650:	2b08      	cmp	r3, #8
 8002652:	f200 80a1 	bhi.w	8002798 <HAL_RCC_GetSysClockFreq+0x16c>
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x34>
 800265a:	2b04      	cmp	r3, #4
 800265c:	d003      	beq.n	8002666 <HAL_RCC_GetSysClockFreq+0x3a>
 800265e:	e09b      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002660:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002662:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002664:	e09b      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002666:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002668:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800266a:	e098      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800266c:	4b4f      	ldr	r3, [pc, #316]	; (80027ac <HAL_RCC_GetSysClockFreq+0x180>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002676:	4b4d      	ldr	r3, [pc, #308]	; (80027ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d028      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002682:	4b4a      	ldr	r3, [pc, #296]	; (80027ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	099b      	lsrs	r3, r3, #6
 8002688:	2200      	movs	r2, #0
 800268a:	623b      	str	r3, [r7, #32]
 800268c:	627a      	str	r2, [r7, #36]	; 0x24
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002694:	2100      	movs	r1, #0
 8002696:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002698:	fb03 f201 	mul.w	r2, r3, r1
 800269c:	2300      	movs	r3, #0
 800269e:	fb00 f303 	mul.w	r3, r0, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	4a43      	ldr	r2, [pc, #268]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80026a6:	fba0 1202 	umull	r1, r2, r0, r2
 80026aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026ac:	460a      	mov	r2, r1
 80026ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80026b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b2:	4413      	add	r3, r2
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b8:	2200      	movs	r2, #0
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	61fa      	str	r2, [r7, #28]
 80026be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80026c6:	f7fe fac7 	bl	8000c58 <__aeabi_uldivmod>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4613      	mov	r3, r2
 80026d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026d2:	e053      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d4:	4b35      	ldr	r3, [pc, #212]	; (80027ac <HAL_RCC_GetSysClockFreq+0x180>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	099b      	lsrs	r3, r3, #6
 80026da:	2200      	movs	r2, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	617a      	str	r2, [r7, #20]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026e6:	f04f 0b00 	mov.w	fp, #0
 80026ea:	4652      	mov	r2, sl
 80026ec:	465b      	mov	r3, fp
 80026ee:	f04f 0000 	mov.w	r0, #0
 80026f2:	f04f 0100 	mov.w	r1, #0
 80026f6:	0159      	lsls	r1, r3, #5
 80026f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026fc:	0150      	lsls	r0, r2, #5
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	ebb2 080a 	subs.w	r8, r2, sl
 8002706:	eb63 090b 	sbc.w	r9, r3, fp
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002716:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800271a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800271e:	ebb2 0408 	subs.w	r4, r2, r8
 8002722:	eb63 0509 	sbc.w	r5, r3, r9
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	00eb      	lsls	r3, r5, #3
 8002730:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002734:	00e2      	lsls	r2, r4, #3
 8002736:	4614      	mov	r4, r2
 8002738:	461d      	mov	r5, r3
 800273a:	eb14 030a 	adds.w	r3, r4, sl
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	eb45 030b 	adc.w	r3, r5, fp
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002752:	4629      	mov	r1, r5
 8002754:	028b      	lsls	r3, r1, #10
 8002756:	4621      	mov	r1, r4
 8002758:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800275c:	4621      	mov	r1, r4
 800275e:	028a      	lsls	r2, r1, #10
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002766:	2200      	movs	r2, #0
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	60fa      	str	r2, [r7, #12]
 800276c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002770:	f7fe fa72 	bl	8000c58 <__aeabi_uldivmod>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4613      	mov	r3, r2
 800277a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_GetSysClockFreq+0x180>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	3301      	adds	r3, #1
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800278c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002790:	fbb2 f3f3 	udiv	r3, r2, r3
 8002794:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002796:	e002      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800279a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800279c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3740      	adds	r7, #64	; 0x40
 80027a4:	46bd      	mov	sp, r7
 80027a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	00f42400 	.word	0x00f42400
 80027b4:	017d7840 	.word	0x017d7840

080027b8 <__NVIC_SetPriority>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	db0a      	blt.n	80027e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	490c      	ldr	r1, [pc, #48]	; (8002804 <__NVIC_SetPriority+0x4c>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	440b      	add	r3, r1
 80027dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027e0:	e00a      	b.n	80027f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4908      	ldr	r1, [pc, #32]	; (8002808 <__NVIC_SetPriority+0x50>)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3b04      	subs	r3, #4
 80027f0:	0112      	lsls	r2, r2, #4
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	440b      	add	r3, r1
 80027f6:	761a      	strb	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000e100 	.word	0xe000e100
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002810:	2100      	movs	r1, #0
 8002812:	f06f 0004 	mvn.w	r0, #4
 8002816:	f7ff ffcf 	bl	80027b8 <__NVIC_SetPriority>
#endif
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002826:	f3ef 8305 	mrs	r3, IPSR
 800282a:	603b      	str	r3, [r7, #0]
  return(result);
 800282c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002832:	f06f 0305 	mvn.w	r3, #5
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	e00c      	b.n	8002854 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <osKernelInitialize+0x44>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d105      	bne.n	800284e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <osKernelInitialize+0x44>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002848:	2300      	movs	r3, #0
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	e002      	b.n	8002854 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800284e:	f04f 33ff 	mov.w	r3, #4294967295
 8002852:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002854:	687b      	ldr	r3, [r7, #4]
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000234 	.word	0x20000234

08002868 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800286e:	f3ef 8305 	mrs	r3, IPSR
 8002872:	603b      	str	r3, [r7, #0]
  return(result);
 8002874:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <osKernelStart+0x1a>
    stat = osErrorISR;
 800287a:	f06f 0305 	mvn.w	r3, #5
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	e010      	b.n	80028a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <osKernelStart+0x48>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d109      	bne.n	800289e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800288a:	f7ff ffbf 	bl	800280c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800288e:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <osKernelStart+0x48>)
 8002890:	2202      	movs	r2, #2
 8002892:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002894:	f002 fa46 	bl	8004d24 <vTaskStartScheduler>
      stat = osOK;
 8002898:	2300      	movs	r3, #0
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	e002      	b.n	80028a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295
 80028a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028a4:	687b      	ldr	r3, [r7, #4]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000234 	.word	0x20000234

080028b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08e      	sub	sp, #56	; 0x38
 80028b8:	af04      	add	r7, sp, #16
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028c4:	f3ef 8305 	mrs	r3, IPSR
 80028c8:	617b      	str	r3, [r7, #20]
  return(result);
 80028ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d17e      	bne.n	80029ce <osThreadNew+0x11a>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d07b      	beq.n	80029ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80028da:	2318      	movs	r3, #24
 80028dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
 80028e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d045      	beq.n	800297a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <osThreadNew+0x48>
        name = attr->name;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <osThreadNew+0x6e>
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2b38      	cmp	r3, #56	; 0x38
 8002914:	d805      	bhi.n	8002922 <osThreadNew+0x6e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <osThreadNew+0x72>
        return (NULL);
 8002922:	2300      	movs	r3, #0
 8002924:	e054      	b.n	80029d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00e      	beq.n	800295c <osThreadNew+0xa8>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b5b      	cmp	r3, #91	; 0x5b
 8002944:	d90a      	bls.n	800295c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800294a:	2b00      	cmp	r3, #0
 800294c:	d006      	beq.n	800295c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <osThreadNew+0xa8>
        mem = 1;
 8002956:	2301      	movs	r3, #1
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	e010      	b.n	800297e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10c      	bne.n	800297e <osThreadNew+0xca>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d108      	bne.n	800297e <osThreadNew+0xca>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d104      	bne.n	800297e <osThreadNew+0xca>
          mem = 0;
 8002974:	2300      	movs	r3, #0
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	e001      	b.n	800297e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d110      	bne.n	80029a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800298c:	9202      	str	r2, [sp, #8]
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	6a3a      	ldr	r2, [r7, #32]
 8002998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f001 ffec 	bl	8004978 <xTaskCreateStatic>
 80029a0:	4603      	mov	r3, r0
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	e013      	b.n	80029ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d110      	bne.n	80029ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	f107 0310 	add.w	r3, r7, #16
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f002 f837 	bl	8004a32 <xTaskCreate>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d001      	beq.n	80029ce <osThreadNew+0x11a>
            hTask = NULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80029ce:	693b      	ldr	r3, [r7, #16]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3728      	adds	r7, #40	; 0x28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029e0:	f3ef 8305 	mrs	r3, IPSR
 80029e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80029e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <osDelay+0x1c>
    stat = osErrorISR;
 80029ec:	f06f 0305 	mvn.w	r3, #5
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	e007      	b.n	8002a04 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <osDelay+0x2c>
      vTaskDelay(ticks);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f002 f95c 	bl	8004cbc <vTaskDelay>
    }
  }

  return (stat);
 8002a04:	68fb      	ldr	r3, [r7, #12]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f003 fc81 	bl	800631e <pvTimerGetTimerID>
 8002a1c:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <TimerCallback+0x22>
    callb->func (callb->arg);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	6852      	ldr	r2, [r2, #4]
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4798      	blx	r3
  }
}
 8002a30:	bf00      	nop
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08c      	sub	sp, #48	; 0x30
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	460b      	mov	r3, r1
 8002a46:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a4c:	f3ef 8305 	mrs	r3, IPSR
 8002a50:	613b      	str	r3, [r7, #16]
  return(result);
 8002a52:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d163      	bne.n	8002b20 <osTimerNew+0xe8>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d060      	beq.n	8002b20 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8002a5e:	2008      	movs	r0, #8
 8002a60:	f003 feea 	bl	8006838 <pvPortMalloc>
 8002a64:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d059      	beq.n	8002b20 <osTimerNew+0xe8>
      callb->func = func;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8002a78:	7afb      	ldrb	r3, [r7, #11]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <osTimerNew+0x4c>
        reload = pdFALSE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	e001      	b.n	8002a88 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8002a84:	2301      	movs	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8002a88:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01c      	beq.n	8002ad2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <osTimerNew+0x6e>
          name = attr->name;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <osTimerNew+0x84>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2b2b      	cmp	r3, #43	; 0x2b
 8002ab4:	d902      	bls.n	8002abc <osTimerNew+0x84>
          mem = 1;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	e00c      	b.n	8002ad6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d108      	bne.n	8002ad6 <osTimerNew+0x9e>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d104      	bne.n	8002ad6 <osTimerNew+0x9e>
            mem = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]
 8002ad0:	e001      	b.n	8002ad6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d10c      	bne.n	8002af6 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <osTimerNew+0xf4>)
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	2101      	movs	r1, #1
 8002aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002aee:	f003 f86e 	bl	8005bce <xTimerCreateStatic>
 8002af2:	6238      	str	r0, [r7, #32]
 8002af4:	e00b      	b.n	8002b0e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d108      	bne.n	8002b0e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <osTimerNew+0xf4>)
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	2101      	movs	r1, #1
 8002b06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b08:	f003 f840 	bl	8005b8c <xTimerCreate>
 8002b0c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d105      	bne.n	8002b20 <osTimerNew+0xe8>
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <osTimerNew+0xe8>
        vPortFree (callb);
 8002b1a:	6978      	ldr	r0, [r7, #20]
 8002b1c:	f003 ff58 	bl	80069d0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8002b20:	6a3b      	ldr	r3, [r7, #32]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3728      	adds	r7, #40	; 0x28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	08002a0f 	.word	0x08002a0f

08002b30 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b3e:	f3ef 8305 	mrs	r3, IPSR
 8002b42:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b44:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <osTimerStart+0x22>
    stat = osErrorISR;
 8002b4a:	f06f 0305 	mvn.w	r3, #5
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e017      	b.n	8002b82 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d103      	bne.n	8002b60 <osTimerStart+0x30>
    stat = osErrorParameter;
 8002b58:	f06f 0303 	mvn.w	r3, #3
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	e010      	b.n	8002b82 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8002b60:	2300      	movs	r3, #0
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	2300      	movs	r3, #0
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	2104      	movs	r1, #4
 8002b6a:	6938      	ldr	r0, [r7, #16]
 8002b6c:	f003 f8a8 	bl	8005cc0 <xTimerGenericCommand>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d102      	bne.n	8002b7c <osTimerStart+0x4c>
      stat = osOK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	e002      	b.n	8002b82 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8002b7c:	f06f 0302 	mvn.w	r3, #2
 8002b80:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002b82:	697b      	ldr	r3, [r7, #20]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b98:	f3ef 8305 	mrs	r3, IPSR
 8002b9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <osTimerStop+0x20>
    stat = osErrorISR;
 8002ba4:	f06f 0305 	mvn.w	r3, #5
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	e021      	b.n	8002bf0 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <osTimerStop+0x2e>
    stat = osErrorParameter;
 8002bb2:	f06f 0303 	mvn.w	r3, #3
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	e01a      	b.n	8002bf0 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8002bba:	6938      	ldr	r0, [r7, #16]
 8002bbc:	f003 fb86 	bl	80062cc <xTimerIsTimerActive>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d103      	bne.n	8002bce <osTimerStop+0x42>
      stat = osErrorResource;
 8002bc6:	f06f 0302 	mvn.w	r3, #2
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	e010      	b.n	8002bf0 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8002bce:	2300      	movs	r3, #0
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2103      	movs	r1, #3
 8002bd8:	6938      	ldr	r0, [r7, #16]
 8002bda:	f003 f871 	bl	8005cc0 <xTimerGenericCommand>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d102      	bne.n	8002bea <osTimerStop+0x5e>
        stat = osOK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	e002      	b.n	8002bf0 <osTimerStop+0x64>
      } else {
        stat = osError;
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295
 8002bee:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002bf0:	697b      	ldr	r3, [r7, #20]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b086      	sub	sp, #24
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c06:	f3ef 8305 	mrs	r3, IPSR
 8002c0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c0c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d12d      	bne.n	8002c6e <osEventFlagsNew+0x74>
    mem = -1;
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295
 8002c16:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d015      	beq.n	8002c4a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d006      	beq.n	8002c34 <osEventFlagsNew+0x3a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	2b1f      	cmp	r3, #31
 8002c2c:	d902      	bls.n	8002c34 <osEventFlagsNew+0x3a>
        mem = 1;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	e00c      	b.n	8002c4e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d108      	bne.n	8002c4e <osEventFlagsNew+0x54>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d104      	bne.n	8002c4e <osEventFlagsNew+0x54>
          mem = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	e001      	b.n	8002c4e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d106      	bne.n	8002c62 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fbb3 	bl	80033c4 <xEventGroupCreateStatic>
 8002c5e:	6178      	str	r0, [r7, #20]
 8002c60:	e005      	b.n	8002c6e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8002c68:	f000 fbe3 	bl	8003432 <xEventGroupCreate>
 8002c6c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002c6e:	697b      	ldr	r3, [r7, #20]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <osEventFlagsSet+0x1e>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8002c96:	f06f 0303 	mvn.w	r3, #3
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	e028      	b.n	8002cf0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c9e:	f3ef 8305 	mrs	r3, IPSR
 8002ca2:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01d      	beq.n	8002ce6 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8002cae:	f107 0308 	add.w	r3, r7, #8
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	6839      	ldr	r1, [r7, #0]
 8002cb6:	6938      	ldr	r0, [r7, #16]
 8002cb8:	f000 fd5e 	bl	8003778 <xEventGroupSetBitsFromISR>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8002cc2:	f06f 0302 	mvn.w	r3, #2
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	e012      	b.n	8002cf0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00d      	beq.n	8002cf0 <osEventFlagsSet+0x78>
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <osEventFlagsSet+0x84>)
 8002cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	f3bf 8f6f 	isb	sy
 8002ce4:	e004      	b.n	8002cf0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8002ce6:	6839      	ldr	r1, [r7, #0]
 8002ce8:	6938      	ldr	r0, [r7, #16]
 8002cea:	f000 fc8b 	bl	8003604 <xEventGroupSetBits>
 8002cee:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8002cf0:	697b      	ldr	r3, [r7, #20]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	e000ed04 	.word	0xe000ed04

08002d00 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08c      	sub	sp, #48	; 0x30
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <osEventFlagsWait+0x22>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8002d22:	f06f 0303 	mvn.w	r3, #3
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	e04b      	b.n	8002dc2 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d2a:	f3ef 8305 	mrs	r3, IPSR
 8002d2e:	617b      	str	r3, [r7, #20]
  return(result);
 8002d30:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8002d36:	f06f 0305 	mvn.w	r3, #5
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	e041      	b.n	8002dc2 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4c:	e001      	b.n	8002d52 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	623b      	str	r3, [r7, #32]
 8002d60:	e001      	b.n	8002d66 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8002d62:	2301      	movs	r3, #1
 8002d64:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	6a3a      	ldr	r2, [r7, #32]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	69b8      	ldr	r0, [r7, #24]
 8002d72:	f000 fb79 	bl	8003468 <xEventGroupWaitBits>
 8002d76:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d010      	beq.n	8002da4 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	4013      	ands	r3, r2
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d019      	beq.n	8002dc2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8002d94:	f06f 0301 	mvn.w	r3, #1
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	e012      	b.n	8002dc2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002d9c:	f06f 0302 	mvn.w	r3, #2
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	e00e      	b.n	8002dc2 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8002db4:	f06f 0301 	mvn.w	r3, #1
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	e002      	b.n	8002dc2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002dbc:	f06f 0302 	mvn.w	r3, #2
 8002dc0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8002dc2:	69fb      	ldr	r3, [r7, #28]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3728      	adds	r7, #40	; 0x28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dd8:	f3ef 8305 	mrs	r3, IPSR
 8002ddc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dde:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d174      	bne.n	8002ece <osMutexNew+0x102>
    if (attr != NULL) {
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <osMutexNew+0x26>
      type = attr->attr_bits;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	e001      	b.n	8002df6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <osMutexNew+0x3a>
      rmtx = 1U;
 8002e00:	2301      	movs	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	e001      	b.n	8002e0a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d15c      	bne.n	8002ece <osMutexNew+0x102>
      mem = -1;
 8002e14:	f04f 33ff 	mov.w	r3, #4294967295
 8002e18:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d015      	beq.n	8002e4c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d006      	beq.n	8002e36 <osMutexNew+0x6a>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b4f      	cmp	r3, #79	; 0x4f
 8002e2e:	d902      	bls.n	8002e36 <osMutexNew+0x6a>
          mem = 1;
 8002e30:	2301      	movs	r3, #1
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	e00c      	b.n	8002e50 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d108      	bne.n	8002e50 <osMutexNew+0x84>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d104      	bne.n	8002e50 <osMutexNew+0x84>
            mem = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	e001      	b.n	8002e50 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d112      	bne.n	8002e7c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4619      	mov	r1, r3
 8002e62:	2004      	movs	r0, #4
 8002e64:	f000 febf 	bl	8003be6 <xQueueCreateMutexStatic>
 8002e68:	61f8      	str	r0, [r7, #28]
 8002e6a:	e016      	b.n	8002e9a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4619      	mov	r1, r3
 8002e72:	2001      	movs	r0, #1
 8002e74:	f000 feb7 	bl	8003be6 <xQueueCreateMutexStatic>
 8002e78:	61f8      	str	r0, [r7, #28]
 8002e7a:	e00e      	b.n	8002e9a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10b      	bne.n	8002e9a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8002e88:	2004      	movs	r0, #4
 8002e8a:	f000 fe94 	bl	8003bb6 <xQueueCreateMutex>
 8002e8e:	61f8      	str	r0, [r7, #28]
 8002e90:	e003      	b.n	8002e9a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8002e92:	2001      	movs	r0, #1
 8002e94:	f000 fe8f 	bl	8003bb6 <xQueueCreateMutex>
 8002e98:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00c      	beq.n	8002eba <osMutexNew+0xee>
        if (attr != NULL) {
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <osMutexNew+0xe2>
          name = attr->name;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	e001      	b.n	8002eb2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8002eb2:	68f9      	ldr	r1, [r7, #12]
 8002eb4:	69f8      	ldr	r0, [r7, #28]
 8002eb6:	f001 fcd7 	bl	8004868 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <osMutexNew+0x102>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002ece:	69fb      	ldr	r3, [r7, #28]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3720      	adds	r7, #32
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ef6:	f3ef 8305 	mrs	r3, IPSR
 8002efa:	60bb      	str	r3, [r7, #8]
  return(result);
 8002efc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8002f02:	f06f 0305 	mvn.w	r3, #5
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e02c      	b.n	8002f64 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d103      	bne.n	8002f18 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8002f10:	f06f 0303 	mvn.w	r3, #3
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	e025      	b.n	8002f64 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d011      	beq.n	8002f42 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002f1e:	6839      	ldr	r1, [r7, #0]
 8002f20:	6938      	ldr	r0, [r7, #16]
 8002f22:	f000 feaf 	bl	8003c84 <xQueueTakeMutexRecursive>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d01b      	beq.n	8002f64 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8002f32:	f06f 0301 	mvn.w	r3, #1
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	e014      	b.n	8002f64 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002f3a:	f06f 0302 	mvn.w	r3, #2
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	e010      	b.n	8002f64 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8002f42:	6839      	ldr	r1, [r7, #0]
 8002f44:	6938      	ldr	r0, [r7, #16]
 8002f46:	f001 f9b7 	bl	80042b8 <xQueueSemaphoreTake>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d009      	beq.n	8002f64 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8002f56:	f06f 0301 	mvn.w	r3, #1
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	e002      	b.n	8002f64 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002f5e:	f06f 0302 	mvn.w	r3, #2
 8002f62:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8002f64:	697b      	ldr	r3, [r7, #20]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b086      	sub	sp, #24
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f8a:	f3ef 8305 	mrs	r3, IPSR
 8002f8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f90:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <osMutexRelease+0x30>
    stat = osErrorISR;
 8002f96:	f06f 0305 	mvn.w	r3, #5
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	e01f      	b.n	8002fde <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d103      	bne.n	8002fac <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8002fa4:	f06f 0303 	mvn.w	r3, #3
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	e018      	b.n	8002fde <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8002fb2:	6938      	ldr	r0, [r7, #16]
 8002fb4:	f000 fe32 	bl	8003c1c <xQueueGiveMutexRecursive>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d00f      	beq.n	8002fde <osMutexRelease+0x70>
        stat = osErrorResource;
 8002fbe:	f06f 0302 	mvn.w	r3, #2
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	e00b      	b.n	8002fde <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2100      	movs	r1, #0
 8002fcc:	6938      	ldr	r0, [r7, #16]
 8002fce:	f000 fef9 	bl	8003dc4 <xQueueGenericSend>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d002      	beq.n	8002fde <osMutexRelease+0x70>
        stat = osErrorResource;
 8002fd8:	f06f 0302 	mvn.w	r3, #2
 8002fdc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002fde:	697b      	ldr	r3, [r7, #20]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	; 0x28
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ff8:	f3ef 8305 	mrs	r3, IPSR
 8002ffc:	613b      	str	r3, [r7, #16]
  return(result);
 8002ffe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003000:	2b00      	cmp	r3, #0
 8003002:	d175      	bne.n	80030f0 <osSemaphoreNew+0x108>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d072      	beq.n	80030f0 <osSemaphoreNew+0x108>
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	429a      	cmp	r2, r3
 8003010:	d86e      	bhi.n	80030f0 <osSemaphoreNew+0x108>
    mem = -1;
 8003012:	f04f 33ff 	mov.w	r3, #4294967295
 8003016:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d015      	beq.n	800304a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d006      	beq.n	8003034 <osSemaphoreNew+0x4c>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b4f      	cmp	r3, #79	; 0x4f
 800302c:	d902      	bls.n	8003034 <osSemaphoreNew+0x4c>
        mem = 1;
 800302e:	2301      	movs	r3, #1
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	e00c      	b.n	800304e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d108      	bne.n	800304e <osSemaphoreNew+0x66>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d104      	bne.n	800304e <osSemaphoreNew+0x66>
          mem = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	e001      	b.n	800304e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003054:	d04c      	beq.n	80030f0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d128      	bne.n	80030ae <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d10a      	bne.n	8003078 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2203      	movs	r2, #3
 8003068:	9200      	str	r2, [sp, #0]
 800306a:	2200      	movs	r2, #0
 800306c:	2100      	movs	r1, #0
 800306e:	2001      	movs	r0, #1
 8003070:	f000 fcb2 	bl	80039d8 <xQueueGenericCreateStatic>
 8003074:	61f8      	str	r0, [r7, #28]
 8003076:	e005      	b.n	8003084 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003078:	2203      	movs	r2, #3
 800307a:	2100      	movs	r1, #0
 800307c:	2001      	movs	r0, #1
 800307e:	f000 fd23 	bl	8003ac8 <xQueueGenericCreate>
 8003082:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d022      	beq.n	80030d0 <osSemaphoreNew+0xe8>
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01f      	beq.n	80030d0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003090:	2300      	movs	r3, #0
 8003092:	2200      	movs	r2, #0
 8003094:	2100      	movs	r1, #0
 8003096:	69f8      	ldr	r0, [r7, #28]
 8003098:	f000 fe94 	bl	8003dc4 <xQueueGenericSend>
 800309c:	4603      	mov	r3, r0
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d016      	beq.n	80030d0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80030a2:	69f8      	ldr	r0, [r7, #28]
 80030a4:	f001 fa94 	bl	80045d0 <vQueueDelete>
            hSemaphore = NULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	e010      	b.n	80030d0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d108      	bne.n	80030c6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	461a      	mov	r2, r3
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fe17 	bl	8003cf0 <xQueueCreateCountingSemaphoreStatic>
 80030c2:	61f8      	str	r0, [r7, #28]
 80030c4:	e004      	b.n	80030d0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fe48 	bl	8003d5e <xQueueCreateCountingSemaphore>
 80030ce:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00c      	beq.n	80030f0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <osSemaphoreNew+0xfc>
          name = attr->name;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	e001      	b.n	80030e8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80030e8:	6979      	ldr	r1, [r7, #20]
 80030ea:	69f8      	ldr	r0, [r7, #28]
 80030ec:	f001 fbbc 	bl	8004868 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80030f0:	69fb      	ldr	r3, [r7, #28]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b08a      	sub	sp, #40	; 0x28
 80030fe:	af02      	add	r7, sp, #8
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800310a:	f3ef 8305 	mrs	r3, IPSR
 800310e:	613b      	str	r3, [r7, #16]
  return(result);
 8003110:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003112:	2b00      	cmp	r3, #0
 8003114:	d15f      	bne.n	80031d6 <osMessageQueueNew+0xdc>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d05c      	beq.n	80031d6 <osMessageQueueNew+0xdc>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d059      	beq.n	80031d6 <osMessageQueueNew+0xdc>
    mem = -1;
 8003122:	f04f 33ff 	mov.w	r3, #4294967295
 8003126:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d029      	beq.n	8003182 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d012      	beq.n	800315c <osMessageQueueNew+0x62>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b4f      	cmp	r3, #79	; 0x4f
 800313c:	d90e      	bls.n	800315c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	429a      	cmp	r2, r3
 8003154:	d302      	bcc.n	800315c <osMessageQueueNew+0x62>
        mem = 1;
 8003156:	2301      	movs	r3, #1
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	e014      	b.n	8003186 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d110      	bne.n	8003186 <osMessageQueueNew+0x8c>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10c      	bne.n	8003186 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003170:	2b00      	cmp	r3, #0
 8003172:	d108      	bne.n	8003186 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d104      	bne.n	8003186 <osMessageQueueNew+0x8c>
          mem = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	e001      	b.n	8003186 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d10b      	bne.n	80031a4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2100      	movs	r1, #0
 8003196:	9100      	str	r1, [sp, #0]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fc1c 	bl	80039d8 <xQueueGenericCreateStatic>
 80031a0:	61f8      	str	r0, [r7, #28]
 80031a2:	e008      	b.n	80031b6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d105      	bne.n	80031b6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80031aa:	2200      	movs	r2, #0
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fc8a 	bl	8003ac8 <xQueueGenericCreate>
 80031b4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00c      	beq.n	80031d6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <osMessageQueueNew+0xd0>
        name = attr->name;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	e001      	b.n	80031ce <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80031ce:	6979      	ldr	r1, [r7, #20]
 80031d0:	69f8      	ldr	r0, [r7, #28]
 80031d2:	f001 fb49 	bl	8004868 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80031d6:	69fb      	ldr	r3, [r7, #28]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	4613      	mov	r3, r2
 80031ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031f8:	f3ef 8305 	mrs	r3, IPSR
 80031fc:	617b      	str	r3, [r7, #20]
  return(result);
 80031fe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003200:	2b00      	cmp	r3, #0
 8003202:	d028      	beq.n	8003256 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d005      	beq.n	8003216 <osMessageQueuePut+0x36>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <osMessageQueuePut+0x36>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003216:	f06f 0303 	mvn.w	r3, #3
 800321a:	61fb      	str	r3, [r7, #28]
 800321c:	e038      	b.n	8003290 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003222:	f107 0210 	add.w	r2, r7, #16
 8003226:	2300      	movs	r3, #0
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	69b8      	ldr	r0, [r7, #24]
 800322c:	f000 fec8 	bl	8003fc0 <xQueueGenericSendFromISR>
 8003230:	4603      	mov	r3, r0
 8003232:	2b01      	cmp	r3, #1
 8003234:	d003      	beq.n	800323e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003236:	f06f 0302 	mvn.w	r3, #2
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	e028      	b.n	8003290 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d025      	beq.n	8003290 <osMessageQueuePut+0xb0>
 8003244:	4b15      	ldr	r3, [pc, #84]	; (800329c <osMessageQueuePut+0xbc>)
 8003246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	e01c      	b.n	8003290 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <osMessageQueuePut+0x82>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003262:	f06f 0303 	mvn.w	r3, #3
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	e012      	b.n	8003290 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800326a:	2300      	movs	r3, #0
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	69b8      	ldr	r0, [r7, #24]
 8003272:	f000 fda7 	bl	8003dc4 <xQueueGenericSend>
 8003276:	4603      	mov	r3, r0
 8003278:	2b01      	cmp	r3, #1
 800327a:	d009      	beq.n	8003290 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003282:	f06f 0301 	mvn.w	r3, #1
 8003286:	61fb      	str	r3, [r7, #28]
 8003288:	e002      	b.n	8003290 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800328a:	f06f 0302 	mvn.w	r3, #2
 800328e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003290:	69fb      	ldr	r3, [r7, #28]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	e000ed04 	.word	0xe000ed04

080032a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032b6:	f3ef 8305 	mrs	r3, IPSR
 80032ba:	617b      	str	r3, [r7, #20]
  return(result);
 80032bc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d028      	beq.n	8003314 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <osMessageQueueGet+0x34>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <osMessageQueueGet+0x34>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80032d4:	f06f 0303 	mvn.w	r3, #3
 80032d8:	61fb      	str	r3, [r7, #28]
 80032da:	e037      	b.n	800334c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80032e0:	f107 0310 	add.w	r3, r7, #16
 80032e4:	461a      	mov	r2, r3
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	69b8      	ldr	r0, [r7, #24]
 80032ea:	f001 f8f1 	bl	80044d0 <xQueueReceiveFromISR>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d003      	beq.n	80032fc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80032f4:	f06f 0302 	mvn.w	r3, #2
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	e027      	b.n	800334c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d024      	beq.n	800334c <osMessageQueueGet+0xac>
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <osMessageQueueGet+0xb8>)
 8003304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	e01b      	b.n	800334c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <osMessageQueueGet+0x80>
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d103      	bne.n	8003328 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003320:	f06f 0303 	mvn.w	r3, #3
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	e011      	b.n	800334c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	69b8      	ldr	r0, [r7, #24]
 800332e:	f000 fee3 	bl	80040f8 <xQueueReceive>
 8003332:	4603      	mov	r3, r0
 8003334:	2b01      	cmp	r3, #1
 8003336:	d009      	beq.n	800334c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800333e:	f06f 0301 	mvn.w	r3, #1
 8003342:	61fb      	str	r3, [r7, #28]
 8003344:	e002      	b.n	800334c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003346:	f06f 0302 	mvn.w	r3, #2
 800334a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800334c:	69fb      	ldr	r3, [r7, #28]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3720      	adds	r7, #32
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	e000ed04 	.word	0xe000ed04

0800335c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4a07      	ldr	r2, [pc, #28]	; (8003388 <vApplicationGetIdleTaskMemory+0x2c>)
 800336c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	4a06      	ldr	r2, [pc, #24]	; (800338c <vApplicationGetIdleTaskMemory+0x30>)
 8003372:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2280      	movs	r2, #128	; 0x80
 8003378:	601a      	str	r2, [r3, #0]
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20000238 	.word	0x20000238
 800338c:	20000294 	.word	0x20000294

08003390 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4a07      	ldr	r2, [pc, #28]	; (80033bc <vApplicationGetTimerTaskMemory+0x2c>)
 80033a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4a06      	ldr	r2, [pc, #24]	; (80033c0 <vApplicationGetTimerTaskMemory+0x30>)
 80033a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033ae:	601a      	str	r2, [r3, #0]
}
 80033b0:	bf00      	nop
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	20000494 	.word	0x20000494
 80033c0:	200004f0 	.word	0x200004f0

080033c4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033e4:	bf00      	nop
 80033e6:	e7fe      	b.n	80033e6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80033e8:	2320      	movs	r3, #32
 80033ea:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d00a      	beq.n	8003408 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80033f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	60fb      	str	r3, [r7, #12]
}
 8003404:	bf00      	nop
 8003406:	e7fe      	b.n	8003406 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	3304      	adds	r3, #4
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f9bf 	bl	80037a0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2201      	movs	r2, #1
 8003426:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8003428:	697b      	ldr	r3, [r7, #20]
	}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003438:	2020      	movs	r0, #32
 800343a:	f003 f9fd 	bl	8006838 <pvPortMalloc>
 800343e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f9a5 	bl	80037a0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800345c:	687b      	ldr	r3, [r7, #4]
	}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b090      	sub	sp, #64	; 0x40
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800347e:	2300      	movs	r3, #0
 8003480:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10a      	bne.n	800349e <xEventGroupWaitBits+0x36>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	623b      	str	r3, [r7, #32]
}
 800349a:	bf00      	nop
 800349c:	e7fe      	b.n	800349c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <xEventGroupWaitBits+0x56>
	__asm volatile
 80034a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	61fb      	str	r3, [r7, #28]
}
 80034ba:	bf00      	nop
 80034bc:	e7fe      	b.n	80034bc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <xEventGroupWaitBits+0x72>
	__asm volatile
 80034c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	61bb      	str	r3, [r7, #24]
}
 80034d6:	bf00      	nop
 80034d8:	e7fe      	b.n	80034d8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034da:	f002 f919 	bl	8005710 <xTaskGetSchedulerState>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <xEventGroupWaitBits+0x82>
 80034e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <xEventGroupWaitBits+0x86>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <xEventGroupWaitBits+0x88>
 80034ee:	2300      	movs	r3, #0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <xEventGroupWaitBits+0xa2>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	617b      	str	r3, [r7, #20]
}
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800350a:	f001 fc71 	bl	8004df0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800350e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	68b9      	ldr	r1, [r7, #8]
 8003518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800351a:	f000 f90b 	bl	8003734 <prvTestWaitCondition>
 800351e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00e      	beq.n	8003544 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800352a:	2300      	movs	r3, #0
 800352c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d028      	beq.n	8003586 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	43db      	mvns	r3, r3
 800353c:	401a      	ands	r2, r3
 800353e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	e020      	b.n	8003586 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003546:	2b00      	cmp	r3, #0
 8003548:	d104      	bne.n	8003554 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800354e:	2301      	movs	r3, #1
 8003550:	633b      	str	r3, [r7, #48]	; 0x30
 8003552:	e018      	b.n	8003586 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800355a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003560:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800356e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003572:	1d18      	adds	r0, r3, #4
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003578:	4313      	orrs	r3, r2
 800357a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800357c:	4619      	mov	r1, r3
 800357e:	f001 fe2f 	bl	80051e0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003586:	f001 fc41 	bl	8004e0c <xTaskResumeAll>
 800358a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800358c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800358e:	2b00      	cmp	r3, #0
 8003590:	d031      	beq.n	80035f6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	2b00      	cmp	r3, #0
 8003596:	d107      	bne.n	80035a8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8003598:	4b19      	ldr	r3, [pc, #100]	; (8003600 <xEventGroupWaitBits+0x198>)
 800359a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80035a8:	f002 fa28 	bl	80059fc <uxTaskResetEventItemValue>
 80035ac:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80035ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d11a      	bne.n	80035ee <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80035b8:	f003 f81c 	bl	80065f4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80035bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80035c8:	f000 f8b4 	bl	8003734 <prvTestWaitCondition>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d009      	beq.n	80035e6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d006      	beq.n	80035e6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80035d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	43db      	mvns	r3, r3
 80035e0:	401a      	ands	r2, r3
 80035e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80035e6:	2301      	movs	r3, #1
 80035e8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80035ea:	f003 f833 	bl	8006654 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80035ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80035f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3740      	adds	r7, #64	; 0x40
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	e000ed04 	.word	0xe000ed04

08003604 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08e      	sub	sp, #56	; 0x38
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800360e:	2300      	movs	r3, #0
 8003610:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8003616:	2300      	movs	r3, #0
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <xEventGroupSetBits+0x32>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	613b      	str	r3, [r7, #16]
}
 8003632:	bf00      	nop
 8003634:	e7fe      	b.n	8003634 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <xEventGroupSetBits+0x52>
	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	60fb      	str	r3, [r7, #12]
}
 8003652:	bf00      	nop
 8003654:	e7fe      	b.n	8003654 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	3304      	adds	r3, #4
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	3308      	adds	r3, #8
 8003660:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8003662:	f001 fbc5 	bl	8004df0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	431a      	orrs	r2, r3
 8003674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003676:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003678:	e03c      	b.n	80036f4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800367a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8003686:	2300      	movs	r3, #0
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003690:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003698:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d108      	bne.n	80036b6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00b      	beq.n	80036c8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80036b0:	2301      	movs	r3, #1
 80036b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b4:	e008      	b.n	80036c8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d101      	bne.n	80036c8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80036c4:	2301      	movs	r3, #1
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d010      	beq.n	80036f0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80036d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	4313      	orrs	r3, r2
 80036de:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80036e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036e8:	4619      	mov	r1, r3
 80036ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036ec:	f001 fe44 	bl	8005378 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80036f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d1be      	bne.n	800367a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	43db      	mvns	r3, r3
 8003704:	401a      	ands	r2, r3
 8003706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003708:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800370a:	f001 fb7f 	bl	8004e0c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	681b      	ldr	r3, [r3, #0]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3738      	adds	r7, #56	; 0x38
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ff6c 	bl	8003604 <xEventGroupSetBits>
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d107      	bne.n	800375a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003754:	2301      	movs	r3, #1
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	e007      	b.n	800376a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4013      	ands	r3, r2
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	429a      	cmp	r2, r3
 8003764:	d101      	bne.n	800376a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003766:	2301      	movs	r3, #1
 8003768:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800376a:	697b      	ldr	r3, [r7, #20]
}
 800376c:	4618      	mov	r0, r3
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	68f9      	ldr	r1, [r7, #12]
 800378a:	4804      	ldr	r0, [pc, #16]	; (800379c <xEventGroupSetBitsFromISR+0x24>)
 800378c:	f002 fde8 	bl	8006360 <xTimerPendFunctionCallFromISR>
 8003790:	6178      	str	r0, [r7, #20]

		return xReturn;
 8003792:	697b      	ldr	r3, [r7, #20]
	}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	0800371b 	.word	0x0800371b

080037a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f103 0208 	add.w	r2, r3, #8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f04f 32ff 	mov.w	r2, #4294967295
 80037b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f103 0208 	add.w	r2, r3, #8
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f103 0208 	add.w	r2, r3, #8
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037fa:	b480      	push	{r7}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	601a      	str	r2, [r3, #0]
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003842:	b480      	push	{r7}
 8003844:	b085      	sub	sp, #20
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003858:	d103      	bne.n	8003862 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	e00c      	b.n	800387c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3308      	adds	r3, #8
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	e002      	b.n	8003870 <vListInsert+0x2e>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	429a      	cmp	r2, r3
 800387a:	d2f6      	bcs.n	800386a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	601a      	str	r2, [r3, #0]
}
 80038a8:	bf00      	nop
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6892      	ldr	r2, [r2, #8]
 80038ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6852      	ldr	r2, [r2, #4]
 80038d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d103      	bne.n	80038e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	1e5a      	subs	r2, r3, #1
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10a      	bne.n	8003932 <xQueueGenericReset+0x2a>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	60bb      	str	r3, [r7, #8]
}
 800392e:	bf00      	nop
 8003930:	e7fe      	b.n	8003930 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003932:	f002 fe5f 	bl	80065f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393e:	68f9      	ldr	r1, [r7, #12]
 8003940:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003942:	fb01 f303 	mul.w	r3, r1, r3
 8003946:	441a      	add	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	3b01      	subs	r3, #1
 8003964:	68f9      	ldr	r1, [r7, #12]
 8003966:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003968:	fb01 f303 	mul.w	r3, r1, r3
 800396c:	441a      	add	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	22ff      	movs	r2, #255	; 0xff
 8003976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	22ff      	movs	r2, #255	; 0xff
 800397e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d114      	bne.n	80039b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01a      	beq.n	80039c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3310      	adds	r3, #16
 8003994:	4618      	mov	r0, r3
 8003996:	f001 fc8b 	bl	80052b0 <xTaskRemoveFromEventList>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d012      	beq.n	80039c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <xQueueGenericReset+0xcc>)
 80039a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	e009      	b.n	80039c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	3310      	adds	r3, #16
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff fef2 	bl	80037a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3324      	adds	r3, #36	; 0x24
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff feed 	bl	80037a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039c6:	f002 fe45 	bl	8006654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039ca:	2301      	movs	r3, #1
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	e000ed04 	.word	0xe000ed04

080039d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08e      	sub	sp, #56	; 0x38
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10a      	bne.n	8003a02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80039ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039fe:	bf00      	nop
 8003a00:	e7fe      	b.n	8003a00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a1a:	bf00      	nop
 8003a1c:	e7fe      	b.n	8003a1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <xQueueGenericCreateStatic+0x52>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <xQueueGenericCreateStatic+0x56>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <xQueueGenericCreateStatic+0x58>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	623b      	str	r3, [r7, #32]
}
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <xQueueGenericCreateStatic+0x7e>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <xQueueGenericCreateStatic+0x82>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <xQueueGenericCreateStatic+0x84>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10a      	bne.n	8003a76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	61fb      	str	r3, [r7, #28]
}
 8003a72:	bf00      	nop
 8003a74:	e7fe      	b.n	8003a74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a76:	2350      	movs	r3, #80	; 0x50
 8003a78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2b50      	cmp	r3, #80	; 0x50
 8003a7e:	d00a      	beq.n	8003a96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	61bb      	str	r3, [r7, #24]
}
 8003a92:	bf00      	nop
 8003a94:	e7fe      	b.n	8003a94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00d      	beq.n	8003abe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003aaa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f83f 	bl	8003b3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3730      	adds	r7, #48	; 0x30
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	; 0x28
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	613b      	str	r3, [r7, #16]
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	3350      	adds	r3, #80	; 0x50
 8003b00:	4618      	mov	r0, r3
 8003b02:	f002 fe99 	bl	8006838 <pvPortMalloc>
 8003b06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d011      	beq.n	8003b32 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	3350      	adds	r3, #80	; 0x50
 8003b16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b20:	79fa      	ldrb	r2, [r7, #7]
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	4613      	mov	r3, r2
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f805 	bl	8003b3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b32:	69bb      	ldr	r3, [r7, #24]
	}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d103      	bne.n	8003b58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e002      	b.n	8003b5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	69b8      	ldr	r0, [r7, #24]
 8003b6e:	f7ff fecb 	bl	8003908 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	78fa      	ldrb	r2, [r7, #3]
 8003b76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00e      	beq.n	8003bae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f90b 	bl	8003dc4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b086      	sub	sp, #24
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	6939      	ldr	r1, [r7, #16]
 8003bce:	6978      	ldr	r0, [r7, #20]
 8003bd0:	f7ff ff7a 	bl	8003ac8 <xQueueGenericCreate>
 8003bd4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff ffd3 	bl	8003b82 <prvInitialiseMutex>

		return xNewQueue;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
	}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b088      	sub	sp, #32
 8003bea:	af02      	add	r7, sp, #8
 8003bec:	4603      	mov	r3, r0
 8003bee:	6039      	str	r1, [r7, #0]
 8003bf0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2200      	movs	r2, #0
 8003c02:	6939      	ldr	r1, [r7, #16]
 8003c04:	6978      	ldr	r0, [r7, #20]
 8003c06:	f7ff fee7 	bl	80039d8 <xQueueGenericCreateStatic>
 8003c0a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff ffb8 	bl	8003b82 <prvInitialiseMutex>

		return xNewQueue;
 8003c12:	68fb      	ldr	r3, [r7, #12]
	}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	60fb      	str	r3, [r7, #12]
}
 8003c40:	bf00      	nop
 8003c42:	e7fe      	b.n	8003c42 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	689c      	ldr	r4, [r3, #8]
 8003c48:	f001 fd52 	bl	80056f0 <xTaskGetCurrentTaskHandle>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	429c      	cmp	r4, r3
 8003c50:	d111      	bne.n	8003c76 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	1e5a      	subs	r2, r3, #1
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d105      	bne.n	8003c70 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003c64:	2300      	movs	r3, #0
 8003c66:	2200      	movs	r2, #0
 8003c68:	2100      	movs	r1, #0
 8003c6a:	6938      	ldr	r0, [r7, #16]
 8003c6c:	f000 f8aa 	bl	8003dc4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8003c70:	2301      	movs	r3, #1
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	e001      	b.n	8003c7a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8003c7a:	697b      	ldr	r3, [r7, #20]
	}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd90      	pop	{r4, r7, pc}

08003c84 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10a      	bne.n	8003cae <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	60fb      	str	r3, [r7, #12]
}
 8003caa:	bf00      	nop
 8003cac:	e7fe      	b.n	8003cac <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	689c      	ldr	r4, [r3, #8]
 8003cb2:	f001 fd1d 	bl	80056f0 <xTaskGetCurrentTaskHandle>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	429c      	cmp	r4, r3
 8003cba:	d107      	bne.n	8003ccc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	e00c      	b.n	8003ce6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8003ccc:	6839      	ldr	r1, [r7, #0]
 8003cce:	6938      	ldr	r0, [r7, #16]
 8003cd0:	f000 faf2 	bl	80042b8 <xQueueSemaphoreTake>
 8003cd4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8003ce6:	697b      	ldr	r3, [r7, #20]
	}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd90      	pop	{r4, r7, pc}

08003cf0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	; 0x28
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10a      	bne.n	8003d18 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	61bb      	str	r3, [r7, #24]
}
 8003d14:	bf00      	nop
 8003d16:	e7fe      	b.n	8003d16 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d90a      	bls.n	8003d36 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	617b      	str	r3, [r7, #20]
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003d36:	2302      	movs	r3, #2
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2100      	movs	r1, #0
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f7ff fe49 	bl	80039d8 <xQueueGenericCreateStatic>
 8003d46:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003d54:	69fb      	ldr	r3, [r7, #28]
	}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3720      	adds	r7, #32
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b086      	sub	sp, #24
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10a      	bne.n	8003d84 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	613b      	str	r3, [r7, #16]
}
 8003d80:	bf00      	nop
 8003d82:	e7fe      	b.n	8003d82 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d90a      	bls.n	8003da2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	60fb      	str	r3, [r7, #12]
}
 8003d9e:	bf00      	nop
 8003da0:	e7fe      	b.n	8003da0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003da2:	2202      	movs	r2, #2
 8003da4:	2100      	movs	r1, #0
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fe8e 	bl	8003ac8 <xQueueGenericCreate>
 8003dac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003dba:	697b      	ldr	r3, [r7, #20]
	}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08e      	sub	sp, #56	; 0x38
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <xQueueGenericSend+0x32>
	__asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003df2:	bf00      	nop
 8003df4:	e7fe      	b.n	8003df4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d103      	bne.n	8003e04 <xQueueGenericSend+0x40>
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <xQueueGenericSend+0x44>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <xQueueGenericSend+0x46>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <xQueueGenericSend+0x60>
	__asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e20:	bf00      	nop
 8003e22:	e7fe      	b.n	8003e22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d103      	bne.n	8003e32 <xQueueGenericSend+0x6e>
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <xQueueGenericSend+0x72>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <xQueueGenericSend+0x74>
 8003e36:	2300      	movs	r3, #0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <xQueueGenericSend+0x8e>
	__asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	623b      	str	r3, [r7, #32]
}
 8003e4e:	bf00      	nop
 8003e50:	e7fe      	b.n	8003e50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e52:	f001 fc5d 	bl	8005710 <xTaskGetSchedulerState>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <xQueueGenericSend+0x9e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <xQueueGenericSend+0xa2>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <xQueueGenericSend+0xa4>
 8003e66:	2300      	movs	r3, #0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <xQueueGenericSend+0xbe>
	__asm volatile
 8003e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	61fb      	str	r3, [r7, #28]
}
 8003e7e:	bf00      	nop
 8003e80:	e7fe      	b.n	8003e80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e82:	f002 fbb7 	bl	80065f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d302      	bcc.n	8003e98 <xQueueGenericSend+0xd4>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d129      	bne.n	8003eec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e9e:	f000 fbd2 	bl	8004646 <prvCopyDataToQueue>
 8003ea2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d010      	beq.n	8003ece <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	3324      	adds	r3, #36	; 0x24
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f001 f9fd 	bl	80052b0 <xTaskRemoveFromEventList>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d013      	beq.n	8003ee4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ebc:	4b3f      	ldr	r3, [pc, #252]	; (8003fbc <xQueueGenericSend+0x1f8>)
 8003ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	e00a      	b.n	8003ee4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ed4:	4b39      	ldr	r3, [pc, #228]	; (8003fbc <xQueueGenericSend+0x1f8>)
 8003ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ee4:	f002 fbb6 	bl	8006654 <vPortExitCritical>
				return pdPASS;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e063      	b.n	8003fb4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d103      	bne.n	8003efa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ef2:	f002 fbaf 	bl	8006654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e05c      	b.n	8003fb4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d106      	bne.n	8003f0e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f00:	f107 0314 	add.w	r3, r7, #20
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 fa99 	bl	800543c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f0e:	f002 fba1 	bl	8006654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f12:	f000 ff6d 	bl	8004df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f16:	f002 fb6d 	bl	80065f4 <vPortEnterCritical>
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f20:	b25b      	sxtb	r3, r3
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	d103      	bne.n	8003f30 <xQueueGenericSend+0x16c>
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f36:	b25b      	sxtb	r3, r3
 8003f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3c:	d103      	bne.n	8003f46 <xQueueGenericSend+0x182>
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f46:	f002 fb85 	bl	8006654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f4a:	1d3a      	adds	r2, r7, #4
 8003f4c:	f107 0314 	add.w	r3, r7, #20
 8003f50:	4611      	mov	r1, r2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f001 fa88 	bl	8005468 <xTaskCheckForTimeOut>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d124      	bne.n	8003fa8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f60:	f000 fc69 	bl	8004836 <prvIsQueueFull>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d018      	beq.n	8003f9c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	3310      	adds	r3, #16
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	4611      	mov	r1, r2
 8003f72:	4618      	mov	r0, r3
 8003f74:	f001 f910 	bl	8005198 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f7a:	f000 fbf4 	bl	8004766 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f7e:	f000 ff45 	bl	8004e0c <xTaskResumeAll>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f47f af7c 	bne.w	8003e82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <xQueueGenericSend+0x1f8>)
 8003f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	e772      	b.n	8003e82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f9e:	f000 fbe2 	bl	8004766 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fa2:	f000 ff33 	bl	8004e0c <xTaskResumeAll>
 8003fa6:	e76c      	b.n	8003e82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003faa:	f000 fbdc 	bl	8004766 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fae:	f000 ff2d 	bl	8004e0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003fb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3738      	adds	r7, #56	; 0x38
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	e000ed04 	.word	0xe000ed04

08003fc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b090      	sub	sp, #64	; 0x40
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fea:	bf00      	nop
 8003fec:	e7fe      	b.n	8003fec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d103      	bne.n	8003ffc <xQueueGenericSendFromISR+0x3c>
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <xQueueGenericSendFromISR+0x40>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <xQueueGenericSendFromISR+0x42>
 8004000:	2300      	movs	r3, #0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10a      	bne.n	800401c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004018:	bf00      	nop
 800401a:	e7fe      	b.n	800401a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d103      	bne.n	800402a <xQueueGenericSendFromISR+0x6a>
 8004022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <xQueueGenericSendFromISR+0x6e>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <xQueueGenericSendFromISR+0x70>
 800402e:	2300      	movs	r3, #0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	623b      	str	r3, [r7, #32]
}
 8004046:	bf00      	nop
 8004048:	e7fe      	b.n	8004048 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800404a:	f002 fbb5 	bl	80067b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800404e:	f3ef 8211 	mrs	r2, BASEPRI
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	61fa      	str	r2, [r7, #28]
 8004064:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004066:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800406e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004072:	429a      	cmp	r2, r3
 8004074:	d302      	bcc.n	800407c <xQueueGenericSendFromISR+0xbc>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b02      	cmp	r3, #2
 800407a:	d12f      	bne.n	80040dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004092:	f000 fad8 	bl	8004646 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004096:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d112      	bne.n	80040c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d016      	beq.n	80040d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040aa:	3324      	adds	r3, #36	; 0x24
 80040ac:	4618      	mov	r0, r3
 80040ae:	f001 f8ff 	bl	80052b0 <xTaskRemoveFromEventList>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00e      	beq.n	80040d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00b      	beq.n	80040d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e007      	b.n	80040d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040ca:	3301      	adds	r3, #1
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	b25a      	sxtb	r2, r3
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80040d6:	2301      	movs	r3, #1
 80040d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80040da:	e001      	b.n	80040e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3740      	adds	r7, #64	; 0x40
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08c      	sub	sp, #48	; 0x30
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004104:	2300      	movs	r3, #0
 8004106:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10a      	bne.n	8004128 <xQueueReceive+0x30>
	__asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	623b      	str	r3, [r7, #32]
}
 8004124:	bf00      	nop
 8004126:	e7fe      	b.n	8004126 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d103      	bne.n	8004136 <xQueueReceive+0x3e>
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <xQueueReceive+0x42>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <xQueueReceive+0x44>
 800413a:	2300      	movs	r3, #0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <xQueueReceive+0x5e>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	61fb      	str	r3, [r7, #28]
}
 8004152:	bf00      	nop
 8004154:	e7fe      	b.n	8004154 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004156:	f001 fadb 	bl	8005710 <xTaskGetSchedulerState>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d102      	bne.n	8004166 <xQueueReceive+0x6e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <xQueueReceive+0x72>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <xQueueReceive+0x74>
 800416a:	2300      	movs	r3, #0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <xQueueReceive+0x8e>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	61bb      	str	r3, [r7, #24]
}
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004186:	f002 fa35 	bl	80065f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01f      	beq.n	80041d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800419a:	f000 fabe 	bl	800471a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	1e5a      	subs	r2, r3, #1
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00f      	beq.n	80041ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b0:	3310      	adds	r3, #16
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 f87c 	bl	80052b0 <xTaskRemoveFromEventList>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d007      	beq.n	80041ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041be:	4b3d      	ldr	r3, [pc, #244]	; (80042b4 <xQueueReceive+0x1bc>)
 80041c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041ce:	f002 fa41 	bl	8006654 <vPortExitCritical>
				return pdPASS;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e069      	b.n	80042aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d103      	bne.n	80041e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041dc:	f002 fa3a 	bl	8006654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041e0:	2300      	movs	r3, #0
 80041e2:	e062      	b.n	80042aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041ea:	f107 0310 	add.w	r3, r7, #16
 80041ee:	4618      	mov	r0, r3
 80041f0:	f001 f924 	bl	800543c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041f8:	f002 fa2c 	bl	8006654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041fc:	f000 fdf8 	bl	8004df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004200:	f002 f9f8 	bl	80065f4 <vPortEnterCritical>
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800420a:	b25b      	sxtb	r3, r3
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d103      	bne.n	800421a <xQueueReceive+0x122>
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004220:	b25b      	sxtb	r3, r3
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d103      	bne.n	8004230 <xQueueReceive+0x138>
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004230:	f002 fa10 	bl	8006654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004234:	1d3a      	adds	r2, r7, #4
 8004236:	f107 0310 	add.w	r3, r7, #16
 800423a:	4611      	mov	r1, r2
 800423c:	4618      	mov	r0, r3
 800423e:	f001 f913 	bl	8005468 <xTaskCheckForTimeOut>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d123      	bne.n	8004290 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800424a:	f000 fade 	bl	800480a <prvIsQueueEmpty>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d017      	beq.n	8004284 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	3324      	adds	r3, #36	; 0x24
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	4611      	mov	r1, r2
 800425c:	4618      	mov	r0, r3
 800425e:	f000 ff9b 	bl	8005198 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004264:	f000 fa7f 	bl	8004766 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004268:	f000 fdd0 	bl	8004e0c <xTaskResumeAll>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d189      	bne.n	8004186 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <xQueueReceive+0x1bc>)
 8004274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	e780      	b.n	8004186 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004286:	f000 fa6e 	bl	8004766 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800428a:	f000 fdbf 	bl	8004e0c <xTaskResumeAll>
 800428e:	e77a      	b.n	8004186 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004292:	f000 fa68 	bl	8004766 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004296:	f000 fdb9 	bl	8004e0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800429a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800429c:	f000 fab5 	bl	800480a <prvIsQueueEmpty>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f43f af6f 	beq.w	8004186 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3730      	adds	r7, #48	; 0x30
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08e      	sub	sp, #56	; 0x38
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80042c2:	2300      	movs	r3, #0
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80042ca:	2300      	movs	r3, #0
 80042cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <xQueueSemaphoreTake+0x32>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	623b      	str	r3, [r7, #32]
}
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	61fb      	str	r3, [r7, #28]
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004308:	f001 fa02 	bl	8005710 <xTaskGetSchedulerState>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d102      	bne.n	8004318 <xQueueSemaphoreTake+0x60>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <xQueueSemaphoreTake+0x64>
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <xQueueSemaphoreTake+0x66>
 800431c:	2300      	movs	r3, #0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10a      	bne.n	8004338 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	61bb      	str	r3, [r7, #24]
}
 8004334:	bf00      	nop
 8004336:	e7fe      	b.n	8004336 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004338:	f002 f95c 	bl	80065f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800433c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	d024      	beq.n	8004392 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	1e5a      	subs	r2, r3, #1
 800434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d104      	bne.n	8004362 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004358:	f001 fb68 	bl	8005a2c <pvTaskIncrementMutexHeldCount>
 800435c:	4602      	mov	r2, r0
 800435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004360:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00f      	beq.n	800438a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436c:	3310      	adds	r3, #16
 800436e:	4618      	mov	r0, r3
 8004370:	f000 ff9e 	bl	80052b0 <xTaskRemoveFromEventList>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800437a:	4b54      	ldr	r3, [pc, #336]	; (80044cc <xQueueSemaphoreTake+0x214>)
 800437c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800438a:	f002 f963 	bl	8006654 <vPortExitCritical>
				return pdPASS;
 800438e:	2301      	movs	r3, #1
 8004390:	e097      	b.n	80044c2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d111      	bne.n	80043bc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	617b      	str	r3, [r7, #20]
}
 80043b0:	bf00      	nop
 80043b2:	e7fe      	b.n	80043b2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80043b4:	f002 f94e 	bl	8006654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043b8:	2300      	movs	r3, #0
 80043ba:	e082      	b.n	80044c2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043c2:	f107 030c 	add.w	r3, r7, #12
 80043c6:	4618      	mov	r0, r3
 80043c8:	f001 f838 	bl	800543c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043cc:	2301      	movs	r3, #1
 80043ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043d0:	f002 f940 	bl	8006654 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043d4:	f000 fd0c 	bl	8004df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043d8:	f002 f90c 	bl	80065f4 <vPortEnterCritical>
 80043dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043e2:	b25b      	sxtb	r3, r3
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d103      	bne.n	80043f2 <xQueueSemaphoreTake+0x13a>
 80043ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043f8:	b25b      	sxtb	r3, r3
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d103      	bne.n	8004408 <xQueueSemaphoreTake+0x150>
 8004400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004408:	f002 f924 	bl	8006654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800440c:	463a      	mov	r2, r7
 800440e:	f107 030c 	add.w	r3, r7, #12
 8004412:	4611      	mov	r1, r2
 8004414:	4618      	mov	r0, r3
 8004416:	f001 f827 	bl	8005468 <xTaskCheckForTimeOut>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d132      	bne.n	8004486 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004422:	f000 f9f2 	bl	800480a <prvIsQueueEmpty>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d026      	beq.n	800447a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d109      	bne.n	8004448 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004434:	f002 f8de 	bl	80065f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	4618      	mov	r0, r3
 800443e:	f001 f985 	bl	800574c <xTaskPriorityInherit>
 8004442:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004444:	f002 f906 	bl	8006654 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444a:	3324      	adds	r3, #36	; 0x24
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	4611      	mov	r1, r2
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fea1 	bl	8005198 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004458:	f000 f985 	bl	8004766 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800445c:	f000 fcd6 	bl	8004e0c <xTaskResumeAll>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	f47f af68 	bne.w	8004338 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004468:	4b18      	ldr	r3, [pc, #96]	; (80044cc <xQueueSemaphoreTake+0x214>)
 800446a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	e75e      	b.n	8004338 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800447a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800447c:	f000 f973 	bl	8004766 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004480:	f000 fcc4 	bl	8004e0c <xTaskResumeAll>
 8004484:	e758      	b.n	8004338 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004486:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004488:	f000 f96d 	bl	8004766 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800448c:	f000 fcbe 	bl	8004e0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004492:	f000 f9ba 	bl	800480a <prvIsQueueEmpty>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	f43f af4d 	beq.w	8004338 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800449e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00d      	beq.n	80044c0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80044a4:	f002 f8a6 	bl	80065f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80044a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044aa:	f000 f8b4 	bl	8004616 <prvGetDisinheritPriorityAfterTimeout>
 80044ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044b6:	4618      	mov	r0, r3
 80044b8:	f001 fa1e 	bl	80058f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80044bc:	f002 f8ca 	bl	8006654 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3738      	adds	r7, #56	; 0x38
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	e000ed04 	.word	0xe000ed04

080044d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08e      	sub	sp, #56	; 0x38
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10a      	bne.n	80044fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	623b      	str	r3, [r7, #32]
}
 80044f8:	bf00      	nop
 80044fa:	e7fe      	b.n	80044fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d103      	bne.n	800450a <xQueueReceiveFromISR+0x3a>
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <xQueueReceiveFromISR+0x3e>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <xQueueReceiveFromISR+0x40>
 800450e:	2300      	movs	r3, #0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	61fb      	str	r3, [r7, #28]
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800452a:	f002 f945 	bl	80067b8 <vPortValidateInterruptPriority>
	__asm volatile
 800452e:	f3ef 8211 	mrs	r2, BASEPRI
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	61ba      	str	r2, [r7, #24]
 8004544:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004546:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	2b00      	cmp	r3, #0
 8004554:	d02f      	beq.n	80045b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800455c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004564:	f000 f8d9 	bl	800471a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	1e5a      	subs	r2, r3, #1
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004570:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d112      	bne.n	80045a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d016      	beq.n	80045b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	3310      	adds	r3, #16
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fe92 	bl	80052b0 <xTaskRemoveFromEventList>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00e      	beq.n	80045b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00b      	beq.n	80045b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	e007      	b.n	80045b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80045a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045a4:	3301      	adds	r3, #1
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	b25a      	sxtb	r2, r3
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80045b0:	2301      	movs	r3, #1
 80045b2:	637b      	str	r3, [r7, #52]	; 0x34
 80045b4:	e001      	b.n	80045ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	637b      	str	r3, [r7, #52]	; 0x34
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f383 8811 	msr	BASEPRI, r3
}
 80045c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3738      	adds	r7, #56	; 0x38
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <vQueueDelete+0x28>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	60bb      	str	r3, [r7, #8]
}
 80045f4:	bf00      	nop
 80045f6:	e7fe      	b.n	80045f6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f95f 	bl	80048bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004604:	2b00      	cmp	r3, #0
 8004606:	d102      	bne.n	800460e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f002 f9e1 	bl	80069d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004616:	b480      	push	{r7}
 8004618:	b085      	sub	sp, #20
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	2b00      	cmp	r3, #0
 8004624:	d006      	beq.n	8004634 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e001      	b.n	8004638 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004634:	2300      	movs	r3, #0
 8004636:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004638:	68fb      	ldr	r3, [r7, #12]
	}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b086      	sub	sp, #24
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10d      	bne.n	8004680 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d14d      	bne.n	8004708 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	4618      	mov	r0, r3
 8004672:	f001 f8d3 	bl	800581c <xTaskPriorityDisinherit>
 8004676:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	609a      	str	r2, [r3, #8]
 800467e:	e043      	b.n	8004708 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d119      	bne.n	80046ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6858      	ldr	r0, [r3, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	461a      	mov	r2, r3
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	f002 fae5 	bl	8006c60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	441a      	add	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d32b      	bcc.n	8004708 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	605a      	str	r2, [r3, #4]
 80046b8:	e026      	b.n	8004708 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	68d8      	ldr	r0, [r3, #12]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	461a      	mov	r2, r3
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	f002 facb 	bl	8006c60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	425b      	negs	r3, r3
 80046d4:	441a      	add	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d207      	bcs.n	80046f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	425b      	negs	r3, r3
 80046f0:	441a      	add	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d105      	bne.n	8004708 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	3b01      	subs	r3, #1
 8004706:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004710:	697b      	ldr	r3, [r7, #20]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d018      	beq.n	800475e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	441a      	add	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	429a      	cmp	r2, r3
 8004744:	d303      	bcc.n	800474e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68d9      	ldr	r1, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	461a      	mov	r2, r3
 8004758:	6838      	ldr	r0, [r7, #0]
 800475a:	f002 fa81 	bl	8006c60 <memcpy>
	}
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b084      	sub	sp, #16
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800476e:	f001 ff41 	bl	80065f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004778:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800477a:	e011      	b.n	80047a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	d012      	beq.n	80047aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3324      	adds	r3, #36	; 0x24
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fd91 	bl	80052b0 <xTaskRemoveFromEventList>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004794:	f000 feca 	bl	800552c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	3b01      	subs	r3, #1
 800479c:	b2db      	uxtb	r3, r3
 800479e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	dce9      	bgt.n	800477c <prvUnlockQueue+0x16>
 80047a8:	e000      	b.n	80047ac <prvUnlockQueue+0x46>
					break;
 80047aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	22ff      	movs	r2, #255	; 0xff
 80047b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80047b4:	f001 ff4e 	bl	8006654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047b8:	f001 ff1c 	bl	80065f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047c4:	e011      	b.n	80047ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d012      	beq.n	80047f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3310      	adds	r3, #16
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fd6c 	bl	80052b0 <xTaskRemoveFromEventList>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047de:	f000 fea5 	bl	800552c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047e2:	7bbb      	ldrb	r3, [r7, #14]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	dce9      	bgt.n	80047c6 <prvUnlockQueue+0x60>
 80047f2:	e000      	b.n	80047f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	22ff      	movs	r2, #255	; 0xff
 80047fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80047fe:	f001 ff29 	bl	8006654 <vPortExitCritical>
}
 8004802:	bf00      	nop
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b084      	sub	sp, #16
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004812:	f001 feef 	bl	80065f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	2b00      	cmp	r3, #0
 800481c:	d102      	bne.n	8004824 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800481e:	2301      	movs	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	e001      	b.n	8004828 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004828:	f001 ff14 	bl	8006654 <vPortExitCritical>

	return xReturn;
 800482c:	68fb      	ldr	r3, [r7, #12]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800483e:	f001 fed9 	bl	80065f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484a:	429a      	cmp	r2, r3
 800484c:	d102      	bne.n	8004854 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800484e:	2301      	movs	r3, #1
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	e001      	b.n	8004858 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004858:	f001 fefc 	bl	8006654 <vPortExitCritical>

	return xReturn;
 800485c:	68fb      	ldr	r3, [r7, #12]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	e014      	b.n	80048a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004878:	4a0f      	ldr	r2, [pc, #60]	; (80048b8 <vQueueAddToRegistry+0x50>)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10b      	bne.n	800489c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004884:	490c      	ldr	r1, [pc, #48]	; (80048b8 <vQueueAddToRegistry+0x50>)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800488e:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <vQueueAddToRegistry+0x50>)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	4413      	add	r3, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800489a:	e006      	b.n	80048aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3301      	adds	r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b07      	cmp	r3, #7
 80048a6:	d9e7      	bls.n	8004878 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80048a8:	bf00      	nop
 80048aa:	bf00      	nop
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	200008f0 	.word	0x200008f0

080048bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	e016      	b.n	80048f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80048ca:	4a10      	ldr	r2, [pc, #64]	; (800490c <vQueueUnregisterQueue+0x50>)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	4413      	add	r3, r2
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d10b      	bne.n	80048f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80048da:	4a0c      	ldr	r2, [pc, #48]	; (800490c <vQueueUnregisterQueue+0x50>)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2100      	movs	r1, #0
 80048e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80048e4:	4a09      	ldr	r2, [pc, #36]	; (800490c <vQueueUnregisterQueue+0x50>)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	4413      	add	r3, r2
 80048ec:	2200      	movs	r2, #0
 80048ee:	605a      	str	r2, [r3, #4]
				break;
 80048f0:	e006      	b.n	8004900 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3301      	adds	r3, #1
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b07      	cmp	r3, #7
 80048fc:	d9e5      	bls.n	80048ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80048fe:	bf00      	nop
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	200008f0 	.word	0x200008f0

08004910 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004920:	f001 fe68 	bl	80065f4 <vPortEnterCritical>
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800492a:	b25b      	sxtb	r3, r3
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004930:	d103      	bne.n	800493a <vQueueWaitForMessageRestricted+0x2a>
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004940:	b25b      	sxtb	r3, r3
 8004942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004946:	d103      	bne.n	8004950 <vQueueWaitForMessageRestricted+0x40>
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004950:	f001 fe80 	bl	8006654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	2b00      	cmp	r3, #0
 800495a:	d106      	bne.n	800496a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	3324      	adds	r3, #36	; 0x24
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fc77 	bl	8005258 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800496a:	6978      	ldr	r0, [r7, #20]
 800496c:	f7ff fefb 	bl	8004766 <prvUnlockQueue>
	}
 8004970:	bf00      	nop
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08e      	sub	sp, #56	; 0x38
 800497c:	af04      	add	r7, sp, #16
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	623b      	str	r3, [r7, #32]
}
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80049a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <xTaskCreateStatic+0x46>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	61fb      	str	r3, [r7, #28]
}
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80049be:	235c      	movs	r3, #92	; 0x5c
 80049c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2b5c      	cmp	r3, #92	; 0x5c
 80049c6:	d00a      	beq.n	80049de <xTaskCreateStatic+0x66>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	61bb      	str	r3, [r7, #24]
}
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80049de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01e      	beq.n	8004a24 <xTaskCreateStatic+0xac>
 80049e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d01b      	beq.n	8004a24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	2202      	movs	r2, #2
 80049fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80049fe:	2300      	movs	r3, #0
 8004a00:	9303      	str	r3, [sp, #12]
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	9302      	str	r3, [sp, #8]
 8004a06:	f107 0314 	add.w	r3, r7, #20
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f850 	bl	8004abc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a1e:	f000 f8dd 	bl	8004bdc <prvAddNewTaskToReadyList>
 8004a22:	e001      	b.n	8004a28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a28:	697b      	ldr	r3, [r7, #20]
	}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3728      	adds	r7, #40	; 0x28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b08c      	sub	sp, #48	; 0x30
 8004a36:	af04      	add	r7, sp, #16
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	603b      	str	r3, [r7, #0]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f001 fef6 	bl	8006838 <pvPortMalloc>
 8004a4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00e      	beq.n	8004a72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a54:	205c      	movs	r0, #92	; 0x5c
 8004a56:	f001 feef 	bl	8006838 <pvPortMalloc>
 8004a5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30
 8004a68:	e005      	b.n	8004a76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a6a:	6978      	ldr	r0, [r7, #20]
 8004a6c:	f001 ffb0 	bl	80069d0 <vPortFree>
 8004a70:	e001      	b.n	8004a76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d017      	beq.n	8004aac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a84:	88fa      	ldrh	r2, [r7, #6]
 8004a86:	2300      	movs	r3, #0
 8004a88:	9303      	str	r3, [sp, #12]
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	9302      	str	r3, [sp, #8]
 8004a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 f80e 	bl	8004abc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004aa0:	69f8      	ldr	r0, [r7, #28]
 8004aa2:	f000 f89b 	bl	8004bdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	e002      	b.n	8004ab2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004aac:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
	}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3720      	adds	r7, #32
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	21a5      	movs	r1, #165	; 0xa5
 8004ad6:	f002 f8d1 	bl	8006c7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	f023 0307 	bic.w	r3, r3, #7
 8004af2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	617b      	str	r3, [r7, #20]
}
 8004b10:	bf00      	nop
 8004b12:	e7fe      	b.n	8004b12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d01f      	beq.n	8004b5a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	e012      	b.n	8004b46 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	7819      	ldrb	r1, [r3, #0]
 8004b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3334      	adds	r3, #52	; 0x34
 8004b30:	460a      	mov	r2, r1
 8004b32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	4413      	add	r3, r2
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d006      	beq.n	8004b4e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	3301      	adds	r3, #1
 8004b44:	61fb      	str	r3, [r7, #28]
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	2b0f      	cmp	r3, #15
 8004b4a:	d9e9      	bls.n	8004b20 <prvInitialiseNewTask+0x64>
 8004b4c:	e000      	b.n	8004b50 <prvInitialiseNewTask+0x94>
			{
				break;
 8004b4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b58:	e003      	b.n	8004b62 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	2b37      	cmp	r3, #55	; 0x37
 8004b66:	d901      	bls.n	8004b6c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b68:	2337      	movs	r3, #55	; 0x37
 8004b6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	3304      	adds	r3, #4
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe fe2c 	bl	80037e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8a:	3318      	adds	r3, #24
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fe fe27 	bl	80037e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004baa:	2200      	movs	r2, #0
 8004bac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	68f9      	ldr	r1, [r7, #12]
 8004bba:	69b8      	ldr	r0, [r7, #24]
 8004bbc:	f001 fbf0 	bl	80063a0 <pxPortInitialiseStack>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bd2:	bf00      	nop
 8004bd4:	3720      	adds	r7, #32
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004be4:	f001 fd06 	bl	80065f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004be8:	4b2d      	ldr	r3, [pc, #180]	; (8004ca0 <prvAddNewTaskToReadyList+0xc4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3301      	adds	r3, #1
 8004bee:	4a2c      	ldr	r2, [pc, #176]	; (8004ca0 <prvAddNewTaskToReadyList+0xc4>)
 8004bf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004bf2:	4b2c      	ldr	r3, [pc, #176]	; (8004ca4 <prvAddNewTaskToReadyList+0xc8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d109      	bne.n	8004c0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004bfa:	4a2a      	ldr	r2, [pc, #168]	; (8004ca4 <prvAddNewTaskToReadyList+0xc8>)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c00:	4b27      	ldr	r3, [pc, #156]	; (8004ca0 <prvAddNewTaskToReadyList+0xc4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d110      	bne.n	8004c2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c08:	f000 fcb4 	bl	8005574 <prvInitialiseTaskLists>
 8004c0c:	e00d      	b.n	8004c2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c0e:	4b26      	ldr	r3, [pc, #152]	; (8004ca8 <prvAddNewTaskToReadyList+0xcc>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c16:	4b23      	ldr	r3, [pc, #140]	; (8004ca4 <prvAddNewTaskToReadyList+0xc8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d802      	bhi.n	8004c2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c24:	4a1f      	ldr	r2, [pc, #124]	; (8004ca4 <prvAddNewTaskToReadyList+0xc8>)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c2a:	4b20      	ldr	r3, [pc, #128]	; (8004cac <prvAddNewTaskToReadyList+0xd0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	4a1e      	ldr	r2, [pc, #120]	; (8004cac <prvAddNewTaskToReadyList+0xd0>)
 8004c32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c34:	4b1d      	ldr	r3, [pc, #116]	; (8004cac <prvAddNewTaskToReadyList+0xd0>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c40:	4b1b      	ldr	r3, [pc, #108]	; (8004cb0 <prvAddNewTaskToReadyList+0xd4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d903      	bls.n	8004c50 <prvAddNewTaskToReadyList+0x74>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	4a18      	ldr	r2, [pc, #96]	; (8004cb0 <prvAddNewTaskToReadyList+0xd4>)
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4a15      	ldr	r2, [pc, #84]	; (8004cb4 <prvAddNewTaskToReadyList+0xd8>)
 8004c5e:	441a      	add	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3304      	adds	r3, #4
 8004c64:	4619      	mov	r1, r3
 8004c66:	4610      	mov	r0, r2
 8004c68:	f7fe fdc7 	bl	80037fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c6c:	f001 fcf2 	bl	8006654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c70:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <prvAddNewTaskToReadyList+0xcc>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00e      	beq.n	8004c96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c78:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <prvAddNewTaskToReadyList+0xc8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d207      	bcs.n	8004c96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <prvAddNewTaskToReadyList+0xdc>)
 8004c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000e04 	.word	0x20000e04
 8004ca4:	20000930 	.word	0x20000930
 8004ca8:	20000e10 	.word	0x20000e10
 8004cac:	20000e20 	.word	0x20000e20
 8004cb0:	20000e0c 	.word	0x20000e0c
 8004cb4:	20000934 	.word	0x20000934
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d017      	beq.n	8004cfe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004cce:	4b13      	ldr	r3, [pc, #76]	; (8004d1c <vTaskDelay+0x60>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <vTaskDelay+0x30>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	60bb      	str	r3, [r7, #8]
}
 8004ce8:	bf00      	nop
 8004cea:	e7fe      	b.n	8004cea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004cec:	f000 f880 	bl	8004df0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 feae 	bl	8005a54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004cf8:	f000 f888 	bl	8004e0c <xTaskResumeAll>
 8004cfc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d107      	bne.n	8004d14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004d04:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <vTaskDelay+0x64>)
 8004d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d14:	bf00      	nop
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	20000e2c 	.word	0x20000e2c
 8004d20:	e000ed04 	.word	0xe000ed04

08004d24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	; 0x28
 8004d28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d32:	463a      	mov	r2, r7
 8004d34:	1d39      	adds	r1, r7, #4
 8004d36:	f107 0308 	add.w	r3, r7, #8
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fe fb0e 	bl	800335c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d40:	6839      	ldr	r1, [r7, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	9202      	str	r2, [sp, #8]
 8004d48:	9301      	str	r3, [sp, #4]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	460a      	mov	r2, r1
 8004d52:	4921      	ldr	r1, [pc, #132]	; (8004dd8 <vTaskStartScheduler+0xb4>)
 8004d54:	4821      	ldr	r0, [pc, #132]	; (8004ddc <vTaskStartScheduler+0xb8>)
 8004d56:	f7ff fe0f 	bl	8004978 <xTaskCreateStatic>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	4a20      	ldr	r2, [pc, #128]	; (8004de0 <vTaskStartScheduler+0xbc>)
 8004d5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d60:	4b1f      	ldr	r3, [pc, #124]	; (8004de0 <vTaskStartScheduler+0xbc>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e001      	b.n	8004d72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d102      	bne.n	8004d7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004d78:	f000 fec0 	bl	8005afc <xTimerCreateTimerTask>
 8004d7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d116      	bne.n	8004db2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	613b      	str	r3, [r7, #16]
}
 8004d96:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d98:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <vTaskStartScheduler+0xc0>)
 8004d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004da0:	4b11      	ldr	r3, [pc, #68]	; (8004de8 <vTaskStartScheduler+0xc4>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004da6:	4b11      	ldr	r3, [pc, #68]	; (8004dec <vTaskStartScheduler+0xc8>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004dac:	f001 fb80 	bl	80064b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004db0:	e00e      	b.n	8004dd0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db8:	d10a      	bne.n	8004dd0 <vTaskStartScheduler+0xac>
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	60fb      	str	r3, [r7, #12]
}
 8004dcc:	bf00      	nop
 8004dce:	e7fe      	b.n	8004dce <vTaskStartScheduler+0xaa>
}
 8004dd0:	bf00      	nop
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	08009afc 	.word	0x08009afc
 8004ddc:	08005545 	.word	0x08005545
 8004de0:	20000e28 	.word	0x20000e28
 8004de4:	20000e24 	.word	0x20000e24
 8004de8:	20000e10 	.word	0x20000e10
 8004dec:	20000e08 	.word	0x20000e08

08004df0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004df4:	4b04      	ldr	r3, [pc, #16]	; (8004e08 <vTaskSuspendAll+0x18>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	4a03      	ldr	r2, [pc, #12]	; (8004e08 <vTaskSuspendAll+0x18>)
 8004dfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004dfe:	bf00      	nop
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	20000e2c 	.word	0x20000e2c

08004e0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e1a:	4b42      	ldr	r3, [pc, #264]	; (8004f24 <xTaskResumeAll+0x118>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <xTaskResumeAll+0x2c>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	603b      	str	r3, [r7, #0]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e38:	f001 fbdc 	bl	80065f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e3c:	4b39      	ldr	r3, [pc, #228]	; (8004f24 <xTaskResumeAll+0x118>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	4a38      	ldr	r2, [pc, #224]	; (8004f24 <xTaskResumeAll+0x118>)
 8004e44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e46:	4b37      	ldr	r3, [pc, #220]	; (8004f24 <xTaskResumeAll+0x118>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d162      	bne.n	8004f14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e4e:	4b36      	ldr	r3, [pc, #216]	; (8004f28 <xTaskResumeAll+0x11c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d05e      	beq.n	8004f14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e56:	e02f      	b.n	8004eb8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e58:	4b34      	ldr	r3, [pc, #208]	; (8004f2c <xTaskResumeAll+0x120>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3318      	adds	r3, #24
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fe fd25 	bl	80038b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fe fd20 	bl	80038b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e78:	4b2d      	ldr	r3, [pc, #180]	; (8004f30 <xTaskResumeAll+0x124>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d903      	bls.n	8004e88 <xTaskResumeAll+0x7c>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	4a2a      	ldr	r2, [pc, #168]	; (8004f30 <xTaskResumeAll+0x124>)
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4a27      	ldr	r2, [pc, #156]	; (8004f34 <xTaskResumeAll+0x128>)
 8004e96:	441a      	add	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	f7fe fcab 	bl	80037fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea8:	4b23      	ldr	r3, [pc, #140]	; (8004f38 <xTaskResumeAll+0x12c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d302      	bcc.n	8004eb8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004eb2:	4b22      	ldr	r3, [pc, #136]	; (8004f3c <xTaskResumeAll+0x130>)
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004eb8:	4b1c      	ldr	r3, [pc, #112]	; (8004f2c <xTaskResumeAll+0x120>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1cb      	bne.n	8004e58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ec6:	f000 fbf3 	bl	80056b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004eca:	4b1d      	ldr	r3, [pc, #116]	; (8004f40 <xTaskResumeAll+0x134>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d010      	beq.n	8004ef8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ed6:	f000 f847 	bl	8004f68 <xTaskIncrementTick>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004ee0:	4b16      	ldr	r3, [pc, #88]	; (8004f3c <xTaskResumeAll+0x130>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f1      	bne.n	8004ed6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004ef2:	4b13      	ldr	r3, [pc, #76]	; (8004f40 <xTaskResumeAll+0x134>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ef8:	4b10      	ldr	r3, [pc, #64]	; (8004f3c <xTaskResumeAll+0x130>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d009      	beq.n	8004f14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f00:	2301      	movs	r3, #1
 8004f02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f04:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <xTaskResumeAll+0x138>)
 8004f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f14:	f001 fb9e 	bl	8006654 <vPortExitCritical>

	return xAlreadyYielded;
 8004f18:	68bb      	ldr	r3, [r7, #8]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000e2c 	.word	0x20000e2c
 8004f28:	20000e04 	.word	0x20000e04
 8004f2c:	20000dc4 	.word	0x20000dc4
 8004f30:	20000e0c 	.word	0x20000e0c
 8004f34:	20000934 	.word	0x20000934
 8004f38:	20000930 	.word	0x20000930
 8004f3c:	20000e18 	.word	0x20000e18
 8004f40:	20000e14 	.word	0x20000e14
 8004f44:	e000ed04 	.word	0xe000ed04

08004f48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <xTaskGetTickCount+0x1c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f54:	687b      	ldr	r3, [r7, #4]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000e08 	.word	0x20000e08

08004f68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f72:	4b4f      	ldr	r3, [pc, #316]	; (80050b0 <xTaskIncrementTick+0x148>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f040 808f 	bne.w	800509a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f7c:	4b4d      	ldr	r3, [pc, #308]	; (80050b4 <xTaskIncrementTick+0x14c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3301      	adds	r3, #1
 8004f82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f84:	4a4b      	ldr	r2, [pc, #300]	; (80050b4 <xTaskIncrementTick+0x14c>)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d120      	bne.n	8004fd2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f90:	4b49      	ldr	r3, [pc, #292]	; (80050b8 <xTaskIncrementTick+0x150>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <xTaskIncrementTick+0x48>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	603b      	str	r3, [r7, #0]
}
 8004fac:	bf00      	nop
 8004fae:	e7fe      	b.n	8004fae <xTaskIncrementTick+0x46>
 8004fb0:	4b41      	ldr	r3, [pc, #260]	; (80050b8 <xTaskIncrementTick+0x150>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	4b41      	ldr	r3, [pc, #260]	; (80050bc <xTaskIncrementTick+0x154>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a3f      	ldr	r2, [pc, #252]	; (80050b8 <xTaskIncrementTick+0x150>)
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	4a3f      	ldr	r2, [pc, #252]	; (80050bc <xTaskIncrementTick+0x154>)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	4b3e      	ldr	r3, [pc, #248]	; (80050c0 <xTaskIncrementTick+0x158>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	4a3d      	ldr	r2, [pc, #244]	; (80050c0 <xTaskIncrementTick+0x158>)
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	f000 fb6f 	bl	80056b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fd2:	4b3c      	ldr	r3, [pc, #240]	; (80050c4 <xTaskIncrementTick+0x15c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d349      	bcc.n	8005070 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fdc:	4b36      	ldr	r3, [pc, #216]	; (80050b8 <xTaskIncrementTick+0x150>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d104      	bne.n	8004ff0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe6:	4b37      	ldr	r3, [pc, #220]	; (80050c4 <xTaskIncrementTick+0x15c>)
 8004fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fec:	601a      	str	r2, [r3, #0]
					break;
 8004fee:	e03f      	b.n	8005070 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff0:	4b31      	ldr	r3, [pc, #196]	; (80050b8 <xTaskIncrementTick+0x150>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	429a      	cmp	r2, r3
 8005006:	d203      	bcs.n	8005010 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005008:	4a2e      	ldr	r2, [pc, #184]	; (80050c4 <xTaskIncrementTick+0x15c>)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800500e:	e02f      	b.n	8005070 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	3304      	adds	r3, #4
 8005014:	4618      	mov	r0, r3
 8005016:	f7fe fc4d 	bl	80038b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	2b00      	cmp	r3, #0
 8005020:	d004      	beq.n	800502c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	3318      	adds	r3, #24
 8005026:	4618      	mov	r0, r3
 8005028:	f7fe fc44 	bl	80038b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005030:	4b25      	ldr	r3, [pc, #148]	; (80050c8 <xTaskIncrementTick+0x160>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d903      	bls.n	8005040 <xTaskIncrementTick+0xd8>
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	4a22      	ldr	r2, [pc, #136]	; (80050c8 <xTaskIncrementTick+0x160>)
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4a1f      	ldr	r2, [pc, #124]	; (80050cc <xTaskIncrementTick+0x164>)
 800504e:	441a      	add	r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	3304      	adds	r3, #4
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f7fe fbcf 	bl	80037fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005060:	4b1b      	ldr	r3, [pc, #108]	; (80050d0 <xTaskIncrementTick+0x168>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	429a      	cmp	r2, r3
 8005068:	d3b8      	bcc.n	8004fdc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800506a:	2301      	movs	r3, #1
 800506c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800506e:	e7b5      	b.n	8004fdc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005070:	4b17      	ldr	r3, [pc, #92]	; (80050d0 <xTaskIncrementTick+0x168>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005076:	4915      	ldr	r1, [pc, #84]	; (80050cc <xTaskIncrementTick+0x164>)
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d901      	bls.n	800508c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005088:	2301      	movs	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800508c:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <xTaskIncrementTick+0x16c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d007      	beq.n	80050a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005094:	2301      	movs	r3, #1
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	e004      	b.n	80050a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800509a:	4b0f      	ldr	r3, [pc, #60]	; (80050d8 <xTaskIncrementTick+0x170>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3301      	adds	r3, #1
 80050a0:	4a0d      	ldr	r2, [pc, #52]	; (80050d8 <xTaskIncrementTick+0x170>)
 80050a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80050a4:	697b      	ldr	r3, [r7, #20]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20000e2c 	.word	0x20000e2c
 80050b4:	20000e08 	.word	0x20000e08
 80050b8:	20000dbc 	.word	0x20000dbc
 80050bc:	20000dc0 	.word	0x20000dc0
 80050c0:	20000e1c 	.word	0x20000e1c
 80050c4:	20000e24 	.word	0x20000e24
 80050c8:	20000e0c 	.word	0x20000e0c
 80050cc:	20000934 	.word	0x20000934
 80050d0:	20000930 	.word	0x20000930
 80050d4:	20000e18 	.word	0x20000e18
 80050d8:	20000e14 	.word	0x20000e14

080050dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050e2:	4b28      	ldr	r3, [pc, #160]	; (8005184 <vTaskSwitchContext+0xa8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80050ea:	4b27      	ldr	r3, [pc, #156]	; (8005188 <vTaskSwitchContext+0xac>)
 80050ec:	2201      	movs	r2, #1
 80050ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80050f0:	e041      	b.n	8005176 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80050f2:	4b25      	ldr	r3, [pc, #148]	; (8005188 <vTaskSwitchContext+0xac>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050f8:	4b24      	ldr	r3, [pc, #144]	; (800518c <vTaskSwitchContext+0xb0>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	e010      	b.n	8005122 <vTaskSwitchContext+0x46>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <vTaskSwitchContext+0x40>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	607b      	str	r3, [r7, #4]
}
 8005118:	bf00      	nop
 800511a:	e7fe      	b.n	800511a <vTaskSwitchContext+0x3e>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3b01      	subs	r3, #1
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	491b      	ldr	r1, [pc, #108]	; (8005190 <vTaskSwitchContext+0xb4>)
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0e4      	beq.n	8005100 <vTaskSwitchContext+0x24>
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4613      	mov	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4a13      	ldr	r2, [pc, #76]	; (8005190 <vTaskSwitchContext+0xb4>)
 8005142:	4413      	add	r3, r2
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	605a      	str	r2, [r3, #4]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	3308      	adds	r3, #8
 8005158:	429a      	cmp	r2, r3
 800515a:	d104      	bne.n	8005166 <vTaskSwitchContext+0x8a>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4a09      	ldr	r2, [pc, #36]	; (8005194 <vTaskSwitchContext+0xb8>)
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	4a06      	ldr	r2, [pc, #24]	; (800518c <vTaskSwitchContext+0xb0>)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6013      	str	r3, [r2, #0]
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	20000e2c 	.word	0x20000e2c
 8005188:	20000e18 	.word	0x20000e18
 800518c:	20000e0c 	.word	0x20000e0c
 8005190:	20000934 	.word	0x20000934
 8005194:	20000930 	.word	0x20000930

08005198 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	60fb      	str	r3, [r7, #12]
}
 80051ba:	bf00      	nop
 80051bc:	e7fe      	b.n	80051bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051be:	4b07      	ldr	r3, [pc, #28]	; (80051dc <vTaskPlaceOnEventList+0x44>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3318      	adds	r3, #24
 80051c4:	4619      	mov	r1, r3
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fe fb3b 	bl	8003842 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051cc:	2101      	movs	r1, #1
 80051ce:	6838      	ldr	r0, [r7, #0]
 80051d0:	f000 fc40 	bl	8005a54 <prvAddCurrentTaskToDelayedList>
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20000930 	.word	0x20000930

080051e0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10a      	bne.n	8005208 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	617b      	str	r3, [r7, #20]
}
 8005204:	bf00      	nop
 8005206:	e7fe      	b.n	8005206 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005208:	4b11      	ldr	r3, [pc, #68]	; (8005250 <vTaskPlaceOnUnorderedEventList+0x70>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	613b      	str	r3, [r7, #16]
}
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005226:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005230:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005232:	4b08      	ldr	r3, [pc, #32]	; (8005254 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3318      	adds	r3, #24
 8005238:	4619      	mov	r1, r3
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f7fe fadd 	bl	80037fa <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005240:	2101      	movs	r1, #1
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fc06 	bl	8005a54 <prvAddCurrentTaskToDelayedList>
}
 8005248:	bf00      	nop
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	20000e2c 	.word	0x20000e2c
 8005254:	20000930 	.word	0x20000930

08005258 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10a      	bne.n	8005280 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	617b      	str	r3, [r7, #20]
}
 800527c:	bf00      	nop
 800527e:	e7fe      	b.n	800527e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005280:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <vTaskPlaceOnEventListRestricted+0x54>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3318      	adds	r3, #24
 8005286:	4619      	mov	r1, r3
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f7fe fab6 	bl	80037fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005294:	f04f 33ff 	mov.w	r3, #4294967295
 8005298:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	68b8      	ldr	r0, [r7, #8]
 800529e:	f000 fbd9 	bl	8005a54 <prvAddCurrentTaskToDelayedList>
	}
 80052a2:	bf00      	nop
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20000930 	.word	0x20000930

080052b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	60fb      	str	r3, [r7, #12]
}
 80052d8:	bf00      	nop
 80052da:	e7fe      	b.n	80052da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	3318      	adds	r3, #24
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fe fae7 	bl	80038b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052e6:	4b1e      	ldr	r3, [pc, #120]	; (8005360 <xTaskRemoveFromEventList+0xb0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d11d      	bne.n	800532a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fade 	bl	80038b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fc:	4b19      	ldr	r3, [pc, #100]	; (8005364 <xTaskRemoveFromEventList+0xb4>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d903      	bls.n	800530c <xTaskRemoveFromEventList+0x5c>
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	4a16      	ldr	r2, [pc, #88]	; (8005364 <xTaskRemoveFromEventList+0xb4>)
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4a13      	ldr	r2, [pc, #76]	; (8005368 <xTaskRemoveFromEventList+0xb8>)
 800531a:	441a      	add	r2, r3
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	3304      	adds	r3, #4
 8005320:	4619      	mov	r1, r3
 8005322:	4610      	mov	r0, r2
 8005324:	f7fe fa69 	bl	80037fa <vListInsertEnd>
 8005328:	e005      	b.n	8005336 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	3318      	adds	r3, #24
 800532e:	4619      	mov	r1, r3
 8005330:	480e      	ldr	r0, [pc, #56]	; (800536c <xTaskRemoveFromEventList+0xbc>)
 8005332:	f7fe fa62 	bl	80037fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533a:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <xTaskRemoveFromEventList+0xc0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	429a      	cmp	r2, r3
 8005342:	d905      	bls.n	8005350 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005344:	2301      	movs	r3, #1
 8005346:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005348:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <xTaskRemoveFromEventList+0xc4>)
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	e001      	b.n	8005354 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005354:	697b      	ldr	r3, [r7, #20]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000e2c 	.word	0x20000e2c
 8005364:	20000e0c 	.word	0x20000e0c
 8005368:	20000934 	.word	0x20000934
 800536c:	20000dc4 	.word	0x20000dc4
 8005370:	20000930 	.word	0x20000930
 8005374:	20000e18 	.word	0x20000e18

08005378 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005382:	4b29      	ldr	r3, [pc, #164]	; (8005428 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10a      	bne.n	80053a0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	613b      	str	r3, [r7, #16]
}
 800539c:	bf00      	nop
 800539e:	e7fe      	b.n	800539e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10a      	bne.n	80053cc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	60fb      	str	r3, [r7, #12]
}
 80053c8:	bf00      	nop
 80053ca:	e7fe      	b.n	80053ca <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7fe fa71 	bl	80038b4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	3304      	adds	r3, #4
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fe fa6c 	bl	80038b4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e0:	4b12      	ldr	r3, [pc, #72]	; (800542c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d903      	bls.n	80053f0 <vTaskRemoveFromUnorderedEventList+0x78>
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	4a0f      	ldr	r2, [pc, #60]	; (800542c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4a0c      	ldr	r2, [pc, #48]	; (8005430 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80053fe:	441a      	add	r2, r3
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	3304      	adds	r3, #4
 8005404:	4619      	mov	r1, r3
 8005406:	4610      	mov	r0, r2
 8005408:	f7fe f9f7 	bl	80037fa <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	4b08      	ldr	r3, [pc, #32]	; (8005434 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	429a      	cmp	r2, r3
 8005418:	d902      	bls.n	8005420 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800541a:	4b07      	ldr	r3, [pc, #28]	; (8005438 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800541c:	2201      	movs	r2, #1
 800541e:	601a      	str	r2, [r3, #0]
	}
}
 8005420:	bf00      	nop
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20000e2c 	.word	0x20000e2c
 800542c:	20000e0c 	.word	0x20000e0c
 8005430:	20000934 	.word	0x20000934
 8005434:	20000930 	.word	0x20000930
 8005438:	20000e18 	.word	0x20000e18

0800543c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005444:	4b06      	ldr	r3, [pc, #24]	; (8005460 <vTaskInternalSetTimeOutState+0x24>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800544c:	4b05      	ldr	r3, [pc, #20]	; (8005464 <vTaskInternalSetTimeOutState+0x28>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	605a      	str	r2, [r3, #4]
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	20000e1c 	.word	0x20000e1c
 8005464:	20000e08 	.word	0x20000e08

08005468 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10a      	bne.n	800548e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	613b      	str	r3, [r7, #16]
}
 800548a:	bf00      	nop
 800548c:	e7fe      	b.n	800548c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	60fb      	str	r3, [r7, #12]
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80054aa:	f001 f8a3 	bl	80065f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054ae:	4b1d      	ldr	r3, [pc, #116]	; (8005524 <xTaskCheckForTimeOut+0xbc>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c6:	d102      	bne.n	80054ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80054c8:	2300      	movs	r3, #0
 80054ca:	61fb      	str	r3, [r7, #28]
 80054cc:	e023      	b.n	8005516 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	4b15      	ldr	r3, [pc, #84]	; (8005528 <xTaskCheckForTimeOut+0xc0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d007      	beq.n	80054ea <xTaskCheckForTimeOut+0x82>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d302      	bcc.n	80054ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80054e4:	2301      	movs	r3, #1
 80054e6:	61fb      	str	r3, [r7, #28]
 80054e8:	e015      	b.n	8005516 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d20b      	bcs.n	800550c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	1ad2      	subs	r2, r2, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff ff9b 	bl	800543c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
 800550a:	e004      	b.n	8005516 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005512:	2301      	movs	r3, #1
 8005514:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005516:	f001 f89d 	bl	8006654 <vPortExitCritical>

	return xReturn;
 800551a:	69fb      	ldr	r3, [r7, #28]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3720      	adds	r7, #32
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	20000e08 	.word	0x20000e08
 8005528:	20000e1c 	.word	0x20000e1c

0800552c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005530:	4b03      	ldr	r3, [pc, #12]	; (8005540 <vTaskMissedYield+0x14>)
 8005532:	2201      	movs	r2, #1
 8005534:	601a      	str	r2, [r3, #0]
}
 8005536:	bf00      	nop
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	20000e18 	.word	0x20000e18

08005544 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800554c:	f000 f852 	bl	80055f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <prvIdleTask+0x28>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d9f9      	bls.n	800554c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005558:	4b05      	ldr	r3, [pc, #20]	; (8005570 <prvIdleTask+0x2c>)
 800555a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005568:	e7f0      	b.n	800554c <prvIdleTask+0x8>
 800556a:	bf00      	nop
 800556c:	20000934 	.word	0x20000934
 8005570:	e000ed04 	.word	0xe000ed04

08005574 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800557a:	2300      	movs	r3, #0
 800557c:	607b      	str	r3, [r7, #4]
 800557e:	e00c      	b.n	800559a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4a12      	ldr	r2, [pc, #72]	; (80055d4 <prvInitialiseTaskLists+0x60>)
 800558c:	4413      	add	r3, r2
 800558e:	4618      	mov	r0, r3
 8005590:	f7fe f906 	bl	80037a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3301      	adds	r3, #1
 8005598:	607b      	str	r3, [r7, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b37      	cmp	r3, #55	; 0x37
 800559e:	d9ef      	bls.n	8005580 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055a0:	480d      	ldr	r0, [pc, #52]	; (80055d8 <prvInitialiseTaskLists+0x64>)
 80055a2:	f7fe f8fd 	bl	80037a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055a6:	480d      	ldr	r0, [pc, #52]	; (80055dc <prvInitialiseTaskLists+0x68>)
 80055a8:	f7fe f8fa 	bl	80037a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055ac:	480c      	ldr	r0, [pc, #48]	; (80055e0 <prvInitialiseTaskLists+0x6c>)
 80055ae:	f7fe f8f7 	bl	80037a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055b2:	480c      	ldr	r0, [pc, #48]	; (80055e4 <prvInitialiseTaskLists+0x70>)
 80055b4:	f7fe f8f4 	bl	80037a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055b8:	480b      	ldr	r0, [pc, #44]	; (80055e8 <prvInitialiseTaskLists+0x74>)
 80055ba:	f7fe f8f1 	bl	80037a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055be:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <prvInitialiseTaskLists+0x78>)
 80055c0:	4a05      	ldr	r2, [pc, #20]	; (80055d8 <prvInitialiseTaskLists+0x64>)
 80055c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <prvInitialiseTaskLists+0x7c>)
 80055c6:	4a05      	ldr	r2, [pc, #20]	; (80055dc <prvInitialiseTaskLists+0x68>)
 80055c8:	601a      	str	r2, [r3, #0]
}
 80055ca:	bf00      	nop
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20000934 	.word	0x20000934
 80055d8:	20000d94 	.word	0x20000d94
 80055dc:	20000da8 	.word	0x20000da8
 80055e0:	20000dc4 	.word	0x20000dc4
 80055e4:	20000dd8 	.word	0x20000dd8
 80055e8:	20000df0 	.word	0x20000df0
 80055ec:	20000dbc 	.word	0x20000dbc
 80055f0:	20000dc0 	.word	0x20000dc0

080055f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055fa:	e019      	b.n	8005630 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80055fc:	f000 fffa 	bl	80065f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005600:	4b10      	ldr	r3, [pc, #64]	; (8005644 <prvCheckTasksWaitingTermination+0x50>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	4618      	mov	r0, r3
 800560e:	f7fe f951 	bl	80038b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005612:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <prvCheckTasksWaitingTermination+0x54>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3b01      	subs	r3, #1
 8005618:	4a0b      	ldr	r2, [pc, #44]	; (8005648 <prvCheckTasksWaitingTermination+0x54>)
 800561a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800561c:	4b0b      	ldr	r3, [pc, #44]	; (800564c <prvCheckTasksWaitingTermination+0x58>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3b01      	subs	r3, #1
 8005622:	4a0a      	ldr	r2, [pc, #40]	; (800564c <prvCheckTasksWaitingTermination+0x58>)
 8005624:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005626:	f001 f815 	bl	8006654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f810 	bl	8005650 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005630:	4b06      	ldr	r3, [pc, #24]	; (800564c <prvCheckTasksWaitingTermination+0x58>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e1      	bne.n	80055fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005638:	bf00      	nop
 800563a:	bf00      	nop
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20000dd8 	.word	0x20000dd8
 8005648:	20000e04 	.word	0x20000e04
 800564c:	20000dec 	.word	0x20000dec

08005650 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800565e:	2b00      	cmp	r3, #0
 8005660:	d108      	bne.n	8005674 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005666:	4618      	mov	r0, r3
 8005668:	f001 f9b2 	bl	80069d0 <vPortFree>
				vPortFree( pxTCB );
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f001 f9af 	bl	80069d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005672:	e018      	b.n	80056a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800567a:	2b01      	cmp	r3, #1
 800567c:	d103      	bne.n	8005686 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f001 f9a6 	bl	80069d0 <vPortFree>
	}
 8005684:	e00f      	b.n	80056a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800568c:	2b02      	cmp	r3, #2
 800568e:	d00a      	beq.n	80056a6 <prvDeleteTCB+0x56>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	60fb      	str	r3, [r7, #12]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <prvDeleteTCB+0x54>
	}
 80056a6:	bf00      	nop
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056b6:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <prvResetNextTaskUnblockTime+0x38>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d104      	bne.n	80056ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056c0:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <prvResetNextTaskUnblockTime+0x3c>)
 80056c2:	f04f 32ff 	mov.w	r2, #4294967295
 80056c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80056c8:	e008      	b.n	80056dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ca:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <prvResetNextTaskUnblockTime+0x38>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	4a04      	ldr	r2, [pc, #16]	; (80056ec <prvResetNextTaskUnblockTime+0x3c>)
 80056da:	6013      	str	r3, [r2, #0]
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	20000dbc 	.word	0x20000dbc
 80056ec:	20000e24 	.word	0x20000e24

080056f0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80056f6:	4b05      	ldr	r3, [pc, #20]	; (800570c <xTaskGetCurrentTaskHandle+0x1c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	607b      	str	r3, [r7, #4]

		return xReturn;
 80056fc:	687b      	ldr	r3, [r7, #4]
	}
 80056fe:	4618      	mov	r0, r3
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	20000930 	.word	0x20000930

08005710 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005716:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <xTaskGetSchedulerState+0x34>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d102      	bne.n	8005724 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800571e:	2301      	movs	r3, #1
 8005720:	607b      	str	r3, [r7, #4]
 8005722:	e008      	b.n	8005736 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005724:	4b08      	ldr	r3, [pc, #32]	; (8005748 <xTaskGetSchedulerState+0x38>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d102      	bne.n	8005732 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800572c:	2302      	movs	r3, #2
 800572e:	607b      	str	r3, [r7, #4]
 8005730:	e001      	b.n	8005736 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005732:	2300      	movs	r3, #0
 8005734:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005736:	687b      	ldr	r3, [r7, #4]
	}
 8005738:	4618      	mov	r0, r3
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	20000e10 	.word	0x20000e10
 8005748:	20000e2c 	.word	0x20000e2c

0800574c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005758:	2300      	movs	r3, #0
 800575a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d051      	beq.n	8005806 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005766:	4b2a      	ldr	r3, [pc, #168]	; (8005810 <xTaskPriorityInherit+0xc4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	429a      	cmp	r2, r3
 800576e:	d241      	bcs.n	80057f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	2b00      	cmp	r3, #0
 8005776:	db06      	blt.n	8005786 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005778:	4b25      	ldr	r3, [pc, #148]	; (8005810 <xTaskPriorityInherit+0xc4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	6959      	ldr	r1, [r3, #20]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4a1f      	ldr	r2, [pc, #124]	; (8005814 <xTaskPriorityInherit+0xc8>)
 8005798:	4413      	add	r3, r2
 800579a:	4299      	cmp	r1, r3
 800579c:	d122      	bne.n	80057e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	3304      	adds	r3, #4
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fe f886 	bl	80038b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80057a8:	4b19      	ldr	r3, [pc, #100]	; (8005810 <xTaskPriorityInherit+0xc4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b6:	4b18      	ldr	r3, [pc, #96]	; (8005818 <xTaskPriorityInherit+0xcc>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d903      	bls.n	80057c6 <xTaskPriorityInherit+0x7a>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c2:	4a15      	ldr	r2, [pc, #84]	; (8005818 <xTaskPriorityInherit+0xcc>)
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4a10      	ldr	r2, [pc, #64]	; (8005814 <xTaskPriorityInherit+0xc8>)
 80057d4:	441a      	add	r2, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	3304      	adds	r3, #4
 80057da:	4619      	mov	r1, r3
 80057dc:	4610      	mov	r0, r2
 80057de:	f7fe f80c 	bl	80037fa <vListInsertEnd>
 80057e2:	e004      	b.n	80057ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80057e4:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <xTaskPriorityInherit+0xc4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80057ee:	2301      	movs	r3, #1
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	e008      	b.n	8005806 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057f8:	4b05      	ldr	r3, [pc, #20]	; (8005810 <xTaskPriorityInherit+0xc4>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	429a      	cmp	r2, r3
 8005800:	d201      	bcs.n	8005806 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005802:	2301      	movs	r3, #1
 8005804:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005806:	68fb      	ldr	r3, [r7, #12]
	}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20000930 	.word	0x20000930
 8005814:	20000934 	.word	0x20000934
 8005818:	20000e0c 	.word	0x20000e0c

0800581c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005828:	2300      	movs	r3, #0
 800582a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d056      	beq.n	80058e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005832:	4b2e      	ldr	r3, [pc, #184]	; (80058ec <xTaskPriorityDisinherit+0xd0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	429a      	cmp	r2, r3
 800583a:	d00a      	beq.n	8005852 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	60fb      	str	r3, [r7, #12]
}
 800584e:	bf00      	nop
 8005850:	e7fe      	b.n	8005850 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10a      	bne.n	8005870 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	60bb      	str	r3, [r7, #8]
}
 800586c:	bf00      	nop
 800586e:	e7fe      	b.n	800586e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005874:	1e5a      	subs	r2, r3, #1
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005882:	429a      	cmp	r2, r3
 8005884:	d02c      	beq.n	80058e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588a:	2b00      	cmp	r3, #0
 800588c:	d128      	bne.n	80058e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	3304      	adds	r3, #4
 8005892:	4618      	mov	r0, r3
 8005894:	f7fe f80e 	bl	80038b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b0:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <xTaskPriorityDisinherit+0xd4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d903      	bls.n	80058c0 <xTaskPriorityDisinherit+0xa4>
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	4a0c      	ldr	r2, [pc, #48]	; (80058f0 <xTaskPriorityDisinherit+0xd4>)
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4a09      	ldr	r2, [pc, #36]	; (80058f4 <xTaskPriorityDisinherit+0xd8>)
 80058ce:	441a      	add	r2, r3
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	3304      	adds	r3, #4
 80058d4:	4619      	mov	r1, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	f7fd ff8f 	bl	80037fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058dc:	2301      	movs	r3, #1
 80058de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058e0:	697b      	ldr	r3, [r7, #20]
	}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20000930 	.word	0x20000930
 80058f0:	20000e0c 	.word	0x20000e0c
 80058f4:	20000934 	.word	0x20000934

080058f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b088      	sub	sp, #32
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005906:	2301      	movs	r3, #1
 8005908:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d06a      	beq.n	80059e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	60fb      	str	r3, [r7, #12]
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	429a      	cmp	r2, r3
 8005936:	d902      	bls.n	800593e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	e002      	b.n	8005944 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005942:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	429a      	cmp	r2, r3
 800594c:	d04b      	beq.n	80059e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	429a      	cmp	r2, r3
 8005956:	d146      	bne.n	80059e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005958:	4b25      	ldr	r3, [pc, #148]	; (80059f0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	429a      	cmp	r2, r3
 8005960:	d10a      	bne.n	8005978 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	60bb      	str	r3, [r7, #8]
}
 8005974:	bf00      	nop
 8005976:	e7fe      	b.n	8005976 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	db04      	blt.n	8005996 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	6959      	ldr	r1, [r3, #20]
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4a13      	ldr	r2, [pc, #76]	; (80059f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80059a6:	4413      	add	r3, r2
 80059a8:	4299      	cmp	r1, r3
 80059aa:	d11c      	bne.n	80059e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	3304      	adds	r3, #4
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fd ff7f 	bl	80038b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ba:	4b0f      	ldr	r3, [pc, #60]	; (80059f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d903      	bls.n	80059ca <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c6:	4a0c      	ldr	r2, [pc, #48]	; (80059f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4a07      	ldr	r2, [pc, #28]	; (80059f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80059d8:	441a      	add	r2, r3
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	3304      	adds	r3, #4
 80059de:	4619      	mov	r1, r3
 80059e0:	4610      	mov	r0, r2
 80059e2:	f7fd ff0a 	bl	80037fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059e6:	bf00      	nop
 80059e8:	3720      	adds	r7, #32
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20000930 	.word	0x20000930
 80059f4:	20000934 	.word	0x20000934
 80059f8:	20000e0c 	.word	0x20000e0c

080059fc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005a02:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <uxTaskResetEventItemValue+0x2c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a0a:	4b07      	ldr	r3, [pc, #28]	; (8005a28 <uxTaskResetEventItemValue+0x2c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a10:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <uxTaskResetEventItemValue+0x2c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8005a18:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8005a1a:	687b      	ldr	r3, [r7, #4]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	20000930 	.word	0x20000930

08005a2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005a30:	4b07      	ldr	r3, [pc, #28]	; (8005a50 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d004      	beq.n	8005a42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005a38:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a3e:	3201      	adds	r2, #1
 8005a40:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005a42:	4b03      	ldr	r3, [pc, #12]	; (8005a50 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a44:	681b      	ldr	r3, [r3, #0]
	}
 8005a46:	4618      	mov	r0, r3
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	20000930 	.word	0x20000930

08005a54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a5e:	4b21      	ldr	r3, [pc, #132]	; (8005ae4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a64:	4b20      	ldr	r3, [pc, #128]	; (8005ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fd ff22 	bl	80038b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d10a      	bne.n	8005a8e <prvAddCurrentTaskToDelayedList+0x3a>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d007      	beq.n	8005a8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3304      	adds	r3, #4
 8005a84:	4619      	mov	r1, r3
 8005a86:	4819      	ldr	r0, [pc, #100]	; (8005aec <prvAddCurrentTaskToDelayedList+0x98>)
 8005a88:	f7fd feb7 	bl	80037fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a8c:	e026      	b.n	8005adc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4413      	add	r3, r2
 8005a94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a96:	4b14      	ldr	r3, [pc, #80]	; (8005ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d209      	bcs.n	8005aba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aa6:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f7fd fec5 	bl	8003842 <vListInsert>
}
 8005ab8:	e010      	b.n	8005adc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aba:	4b0e      	ldr	r3, [pc, #56]	; (8005af4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	f7fd febb 	bl	8003842 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005acc:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d202      	bcs.n	8005adc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005ad6:	4a08      	ldr	r2, [pc, #32]	; (8005af8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	6013      	str	r3, [r2, #0]
}
 8005adc:	bf00      	nop
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	20000e08 	.word	0x20000e08
 8005ae8:	20000930 	.word	0x20000930
 8005aec:	20000df0 	.word	0x20000df0
 8005af0:	20000dc0 	.word	0x20000dc0
 8005af4:	20000dbc 	.word	0x20000dbc
 8005af8:	20000e24 	.word	0x20000e24

08005afc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	; 0x28
 8005b00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b06:	f000 fba1 	bl	800624c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b0a:	4b1c      	ldr	r3, [pc, #112]	; (8005b7c <xTimerCreateTimerTask+0x80>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d021      	beq.n	8005b56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b1a:	1d3a      	adds	r2, r7, #4
 8005b1c:	f107 0108 	add.w	r1, r7, #8
 8005b20:	f107 030c 	add.w	r3, r7, #12
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fd fc33 	bl	8003390 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	9202      	str	r2, [sp, #8]
 8005b32:	9301      	str	r3, [sp, #4]
 8005b34:	2302      	movs	r3, #2
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	460a      	mov	r2, r1
 8005b3c:	4910      	ldr	r1, [pc, #64]	; (8005b80 <xTimerCreateTimerTask+0x84>)
 8005b3e:	4811      	ldr	r0, [pc, #68]	; (8005b84 <xTimerCreateTimerTask+0x88>)
 8005b40:	f7fe ff1a 	bl	8004978 <xTaskCreateStatic>
 8005b44:	4603      	mov	r3, r0
 8005b46:	4a10      	ldr	r2, [pc, #64]	; (8005b88 <xTimerCreateTimerTask+0x8c>)
 8005b48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b4a:	4b0f      	ldr	r3, [pc, #60]	; (8005b88 <xTimerCreateTimerTask+0x8c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b52:	2301      	movs	r3, #1
 8005b54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	613b      	str	r3, [r7, #16]
}
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b72:	697b      	ldr	r3, [r7, #20]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	20000e60 	.word	0x20000e60
 8005b80:	08009b04 	.word	0x08009b04
 8005b84:	08005df5 	.word	0x08005df5
 8005b88:	20000e64 	.word	0x20000e64

08005b8c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af02      	add	r7, sp, #8
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005b9a:	202c      	movs	r0, #44	; 0x2c
 8005b9c:	f000 fe4c 	bl	8006838 <pvPortMalloc>
 8005ba0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00d      	beq.n	8005bc4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	9301      	str	r3, [sp, #4]
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f843 	bl	8005c4a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005bc4:	697b      	ldr	r3, [r7, #20]
	}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b08a      	sub	sp, #40	; 0x28
 8005bd2:	af02      	add	r7, sp, #8
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
 8005bda:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005bdc:	232c      	movs	r3, #44	; 0x2c
 8005bde:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2b2c      	cmp	r3, #44	; 0x2c
 8005be4:	d00a      	beq.n	8005bfc <xTimerCreateStatic+0x2e>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	61bb      	str	r3, [r7, #24]
}
 8005bf8:	bf00      	nop
 8005bfa:	e7fe      	b.n	8005bfa <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005bfc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10a      	bne.n	8005c1a <xTimerCreateStatic+0x4c>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	617b      	str	r3, [r7, #20]
}
 8005c16:	bf00      	nop
 8005c18:	e7fe      	b.n	8005c18 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00d      	beq.n	8005c40 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	9301      	str	r3, [sp, #4]
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 f805 	bl	8005c4a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005c40:	69fb      	ldr	r3, [r7, #28]
	}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b086      	sub	sp, #24
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10a      	bne.n	8005c74 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	617b      	str	r3, [r7, #20]
}
 8005c70:	bf00      	nop
 8005c72:	e7fe      	b.n	8005c72 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d01e      	beq.n	8005cb8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005c7a:	f000 fae7 	bl	800624c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	6a3a      	ldr	r2, [r7, #32]
 8005c94:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	3304      	adds	r3, #4
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fd fda0 	bl	80037e0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d008      	beq.n	8005cb8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cac:	f043 0304 	orr.w	r3, r3, #4
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005cb8:	bf00      	nop
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	; 0x28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <xTimerGenericCommand+0x2e>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	623b      	str	r3, [r7, #32]
}
 8005cea:	bf00      	nop
 8005cec:	e7fe      	b.n	8005cec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005cee:	4b1a      	ldr	r3, [pc, #104]	; (8005d58 <xTimerGenericCommand+0x98>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d02a      	beq.n	8005d4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b05      	cmp	r3, #5
 8005d06:	dc18      	bgt.n	8005d3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d08:	f7ff fd02 	bl	8005710 <xTaskGetSchedulerState>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d109      	bne.n	8005d26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d12:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <xTimerGenericCommand+0x98>)
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	f107 0110 	add.w	r1, r7, #16
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d1e:	f7fe f851 	bl	8003dc4 <xQueueGenericSend>
 8005d22:	6278      	str	r0, [r7, #36]	; 0x24
 8005d24:	e012      	b.n	8005d4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d26:	4b0c      	ldr	r3, [pc, #48]	; (8005d58 <xTimerGenericCommand+0x98>)
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	f107 0110 	add.w	r1, r7, #16
 8005d2e:	2300      	movs	r3, #0
 8005d30:	2200      	movs	r2, #0
 8005d32:	f7fe f847 	bl	8003dc4 <xQueueGenericSend>
 8005d36:	6278      	str	r0, [r7, #36]	; 0x24
 8005d38:	e008      	b.n	8005d4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d3a:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <xTimerGenericCommand+0x98>)
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	f107 0110 	add.w	r1, r7, #16
 8005d42:	2300      	movs	r3, #0
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	f7fe f93b 	bl	8003fc0 <xQueueGenericSendFromISR>
 8005d4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3728      	adds	r7, #40	; 0x28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20000e60 	.word	0x20000e60

08005d5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d66:	4b22      	ldr	r3, [pc, #136]	; (8005df0 <prvProcessExpiredTimer+0x94>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fd fd9d 	bl	80038b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d022      	beq.n	8005dce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	699a      	ldr	r2, [r3, #24]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	18d1      	adds	r1, r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	6978      	ldr	r0, [r7, #20]
 8005d96:	f000 f8d1 	bl	8005f3c <prvInsertTimerInActiveList>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01f      	beq.n	8005de0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005da0:	2300      	movs	r3, #0
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	2300      	movs	r3, #0
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	2100      	movs	r1, #0
 8005daa:	6978      	ldr	r0, [r7, #20]
 8005dac:	f7ff ff88 	bl	8005cc0 <xTimerGenericCommand>
 8005db0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d113      	bne.n	8005de0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	60fb      	str	r3, [r7, #12]
}
 8005dca:	bf00      	nop
 8005dcc:	e7fe      	b.n	8005dcc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dd4:	f023 0301 	bic.w	r3, r3, #1
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	6978      	ldr	r0, [r7, #20]
 8005de6:	4798      	blx	r3
}
 8005de8:	bf00      	nop
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	20000e58 	.word	0x20000e58

08005df4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dfc:	f107 0308 	add.w	r3, r7, #8
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 f857 	bl	8005eb4 <prvGetNextExpireTime>
 8005e06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f803 	bl	8005e18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e12:	f000 f8d5 	bl	8005fc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e16:	e7f1      	b.n	8005dfc <prvTimerTask+0x8>

08005e18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e22:	f7fe ffe5 	bl	8004df0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e26:	f107 0308 	add.w	r3, r7, #8
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 f866 	bl	8005efc <prvSampleTimeNow>
 8005e30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d130      	bne.n	8005e9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10a      	bne.n	8005e54 <prvProcessTimerOrBlockTask+0x3c>
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d806      	bhi.n	8005e54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e46:	f7fe ffe1 	bl	8004e0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff ff85 	bl	8005d5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e52:	e024      	b.n	8005e9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d008      	beq.n	8005e6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e5a:	4b13      	ldr	r3, [pc, #76]	; (8005ea8 <prvProcessTimerOrBlockTask+0x90>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <prvProcessTimerOrBlockTask+0x50>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <prvProcessTimerOrBlockTask+0x52>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e6c:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <prvProcessTimerOrBlockTask+0x94>)
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	f7fe fd49 	bl	8004910 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e7e:	f7fe ffc5 	bl	8004e0c <xTaskResumeAll>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e88:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <prvProcessTimerOrBlockTask+0x98>)
 8005e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	f3bf 8f6f 	isb	sy
}
 8005e98:	e001      	b.n	8005e9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e9a:	f7fe ffb7 	bl	8004e0c <xTaskResumeAll>
}
 8005e9e:	bf00      	nop
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20000e5c 	.word	0x20000e5c
 8005eac:	20000e60 	.word	0x20000e60
 8005eb0:	e000ed04 	.word	0xe000ed04

08005eb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ebc:	4b0e      	ldr	r3, [pc, #56]	; (8005ef8 <prvGetNextExpireTime+0x44>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <prvGetNextExpireTime+0x16>
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	e000      	b.n	8005ecc <prvGetNextExpireTime+0x18>
 8005eca:	2200      	movs	r2, #0
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d105      	bne.n	8005ee4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ed8:	4b07      	ldr	r3, [pc, #28]	; (8005ef8 <prvGetNextExpireTime+0x44>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	e001      	b.n	8005ee8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	20000e58 	.word	0x20000e58

08005efc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f04:	f7ff f820 	bl	8004f48 <xTaskGetTickCount>
 8005f08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f0a:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <prvSampleTimeNow+0x3c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d205      	bcs.n	8005f20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f14:	f000 f936 	bl	8006184 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	e002      	b.n	8005f26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f26:	4a04      	ldr	r2, [pc, #16]	; (8005f38 <prvSampleTimeNow+0x3c>)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20000e68 	.word	0x20000e68

08005f3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d812      	bhi.n	8005f88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	1ad2      	subs	r2, r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d302      	bcc.n	8005f76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f70:	2301      	movs	r3, #1
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	e01b      	b.n	8005fae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f76:	4b10      	ldr	r3, [pc, #64]	; (8005fb8 <prvInsertTimerInActiveList+0x7c>)
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4610      	mov	r0, r2
 8005f82:	f7fd fc5e 	bl	8003842 <vListInsert>
 8005f86:	e012      	b.n	8005fae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d206      	bcs.n	8005f9e <prvInsertTimerInActiveList+0x62>
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d302      	bcc.n	8005f9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	e007      	b.n	8005fae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f9e:	4b07      	ldr	r3, [pc, #28]	; (8005fbc <prvInsertTimerInActiveList+0x80>)
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4610      	mov	r0, r2
 8005faa:	f7fd fc4a 	bl	8003842 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005fae:	697b      	ldr	r3, [r7, #20]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3718      	adds	r7, #24
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	20000e5c 	.word	0x20000e5c
 8005fbc:	20000e58 	.word	0x20000e58

08005fc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08e      	sub	sp, #56	; 0x38
 8005fc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fc6:	e0ca      	b.n	800615e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	da18      	bge.n	8006000 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005fce:	1d3b      	adds	r3, r7, #4
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10a      	bne.n	8005ff0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	61fb      	str	r3, [r7, #28]
}
 8005fec:	bf00      	nop
 8005fee:	e7fe      	b.n	8005fee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ff6:	6850      	ldr	r0, [r2, #4]
 8005ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ffa:	6892      	ldr	r2, [r2, #8]
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	f2c0 80aa 	blt.w	800615c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d004      	beq.n	800601e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	3304      	adds	r3, #4
 8006018:	4618      	mov	r0, r3
 800601a:	f7fd fc4b 	bl	80038b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800601e:	463b      	mov	r3, r7
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff ff6b 	bl	8005efc <prvSampleTimeNow>
 8006026:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b09      	cmp	r3, #9
 800602c:	f200 8097 	bhi.w	800615e <prvProcessReceivedCommands+0x19e>
 8006030:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <prvProcessReceivedCommands+0x78>)
 8006032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006036:	bf00      	nop
 8006038:	08006061 	.word	0x08006061
 800603c:	08006061 	.word	0x08006061
 8006040:	08006061 	.word	0x08006061
 8006044:	080060d5 	.word	0x080060d5
 8006048:	080060e9 	.word	0x080060e9
 800604c:	08006133 	.word	0x08006133
 8006050:	08006061 	.word	0x08006061
 8006054:	08006061 	.word	0x08006061
 8006058:	080060d5 	.word	0x080060d5
 800605c:	080060e9 	.word	0x080060e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006066:	f043 0301 	orr.w	r3, r3, #1
 800606a:	b2da      	uxtb	r2, r3
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	18d1      	adds	r1, r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800607e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006080:	f7ff ff5c 	bl	8005f3c <prvInsertTimerInActiveList>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d069      	beq.n	800615e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006090:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	d05e      	beq.n	800615e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	441a      	add	r2, r3
 80060a8:	2300      	movs	r3, #0
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	2300      	movs	r3, #0
 80060ae:	2100      	movs	r1, #0
 80060b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060b2:	f7ff fe05 	bl	8005cc0 <xTimerGenericCommand>
 80060b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d14f      	bne.n	800615e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	61bb      	str	r3, [r7, #24]
}
 80060d0:	bf00      	nop
 80060d2:	e7fe      	b.n	80060d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060da:	f023 0301 	bic.w	r3, r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80060e6:	e03a      	b.n	800615e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ee:	f043 0301 	orr.w	r3, r3, #1
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	617b      	str	r3, [r7, #20]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	18d1      	adds	r1, r2, r3
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800612c:	f7ff ff06 	bl	8005f3c <prvInsertTimerInActiveList>
					break;
 8006130:	e015      	b.n	800615e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d103      	bne.n	8006148 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006142:	f000 fc45 	bl	80069d0 <vPortFree>
 8006146:	e00a      	b.n	800615e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800614e:	f023 0301 	bic.w	r3, r3, #1
 8006152:	b2da      	uxtb	r2, r3
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800615a:	e000      	b.n	800615e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800615c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800615e:	4b08      	ldr	r3, [pc, #32]	; (8006180 <prvProcessReceivedCommands+0x1c0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	1d39      	adds	r1, r7, #4
 8006164:	2200      	movs	r2, #0
 8006166:	4618      	mov	r0, r3
 8006168:	f7fd ffc6 	bl	80040f8 <xQueueReceive>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	f47f af2a 	bne.w	8005fc8 <prvProcessReceivedCommands+0x8>
	}
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	3730      	adds	r7, #48	; 0x30
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20000e60 	.word	0x20000e60

08006184 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800618a:	e048      	b.n	800621e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800618c:	4b2d      	ldr	r3, [pc, #180]	; (8006244 <prvSwitchTimerLists+0xc0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006196:	4b2b      	ldr	r3, [pc, #172]	; (8006244 <prvSwitchTimerLists+0xc0>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fd fb85 	bl	80038b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d02e      	beq.n	800621e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4413      	add	r3, r2
 80061c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d90e      	bls.n	80061f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061de:	4b19      	ldr	r3, [pc, #100]	; (8006244 <prvSwitchTimerLists+0xc0>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3304      	adds	r3, #4
 80061e6:	4619      	mov	r1, r3
 80061e8:	4610      	mov	r0, r2
 80061ea:	f7fd fb2a 	bl	8003842 <vListInsert>
 80061ee:	e016      	b.n	800621e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061f0:	2300      	movs	r3, #0
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	2300      	movs	r3, #0
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	2100      	movs	r1, #0
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7ff fd60 	bl	8005cc0 <xTimerGenericCommand>
 8006200:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10a      	bne.n	800621e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	603b      	str	r3, [r7, #0]
}
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800621e:	4b09      	ldr	r3, [pc, #36]	; (8006244 <prvSwitchTimerLists+0xc0>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1b1      	bne.n	800618c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006228:	4b06      	ldr	r3, [pc, #24]	; (8006244 <prvSwitchTimerLists+0xc0>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800622e:	4b06      	ldr	r3, [pc, #24]	; (8006248 <prvSwitchTimerLists+0xc4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a04      	ldr	r2, [pc, #16]	; (8006244 <prvSwitchTimerLists+0xc0>)
 8006234:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006236:	4a04      	ldr	r2, [pc, #16]	; (8006248 <prvSwitchTimerLists+0xc4>)
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	6013      	str	r3, [r2, #0]
}
 800623c:	bf00      	nop
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	20000e58 	.word	0x20000e58
 8006248:	20000e5c 	.word	0x20000e5c

0800624c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006252:	f000 f9cf 	bl	80065f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006256:	4b15      	ldr	r3, [pc, #84]	; (80062ac <prvCheckForValidListAndQueue+0x60>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d120      	bne.n	80062a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800625e:	4814      	ldr	r0, [pc, #80]	; (80062b0 <prvCheckForValidListAndQueue+0x64>)
 8006260:	f7fd fa9e 	bl	80037a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006264:	4813      	ldr	r0, [pc, #76]	; (80062b4 <prvCheckForValidListAndQueue+0x68>)
 8006266:	f7fd fa9b 	bl	80037a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800626a:	4b13      	ldr	r3, [pc, #76]	; (80062b8 <prvCheckForValidListAndQueue+0x6c>)
 800626c:	4a10      	ldr	r2, [pc, #64]	; (80062b0 <prvCheckForValidListAndQueue+0x64>)
 800626e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006270:	4b12      	ldr	r3, [pc, #72]	; (80062bc <prvCheckForValidListAndQueue+0x70>)
 8006272:	4a10      	ldr	r2, [pc, #64]	; (80062b4 <prvCheckForValidListAndQueue+0x68>)
 8006274:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006276:	2300      	movs	r3, #0
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <prvCheckForValidListAndQueue+0x74>)
 800627c:	4a11      	ldr	r2, [pc, #68]	; (80062c4 <prvCheckForValidListAndQueue+0x78>)
 800627e:	2110      	movs	r1, #16
 8006280:	200a      	movs	r0, #10
 8006282:	f7fd fba9 	bl	80039d8 <xQueueGenericCreateStatic>
 8006286:	4603      	mov	r3, r0
 8006288:	4a08      	ldr	r2, [pc, #32]	; (80062ac <prvCheckForValidListAndQueue+0x60>)
 800628a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800628c:	4b07      	ldr	r3, [pc, #28]	; (80062ac <prvCheckForValidListAndQueue+0x60>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006294:	4b05      	ldr	r3, [pc, #20]	; (80062ac <prvCheckForValidListAndQueue+0x60>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	490b      	ldr	r1, [pc, #44]	; (80062c8 <prvCheckForValidListAndQueue+0x7c>)
 800629a:	4618      	mov	r0, r3
 800629c:	f7fe fae4 	bl	8004868 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062a0:	f000 f9d8 	bl	8006654 <vPortExitCritical>
}
 80062a4:	bf00      	nop
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000e60 	.word	0x20000e60
 80062b0:	20000e30 	.word	0x20000e30
 80062b4:	20000e44 	.word	0x20000e44
 80062b8:	20000e58 	.word	0x20000e58
 80062bc:	20000e5c 	.word	0x20000e5c
 80062c0:	20000f0c 	.word	0x20000f0c
 80062c4:	20000e6c 	.word	0x20000e6c
 80062c8:	08009b0c 	.word	0x08009b0c

080062cc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <xTimerIsTimerActive+0x28>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	60fb      	str	r3, [r7, #12]
}
 80062f0:	bf00      	nop
 80062f2:	e7fe      	b.n	80062f2 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80062f4:	f000 f97e 	bl	80065f4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d102      	bne.n	800630c <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 8006306:	2300      	movs	r3, #0
 8006308:	617b      	str	r3, [r7, #20]
 800630a:	e001      	b.n	8006310 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800630c:	2301      	movs	r3, #1
 800630e:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006310:	f000 f9a0 	bl	8006654 <vPortExitCritical>

	return xReturn;
 8006314:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b086      	sub	sp, #24
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <pvTimerGetTimerID+0x28>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	60fb      	str	r3, [r7, #12]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8006346:	f000 f955 	bl	80065f4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006350:	f000 f980 	bl	8006654 <vPortExitCritical>

	return pvReturn;
 8006354:	693b      	ldr	r3, [r7, #16]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800636e:	f06f 0301 	mvn.w	r3, #1
 8006372:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006380:	4b06      	ldr	r3, [pc, #24]	; (800639c <xTimerPendFunctionCallFromISR+0x3c>)
 8006382:	6818      	ldr	r0, [r3, #0]
 8006384:	f107 0114 	add.w	r1, r7, #20
 8006388:	2300      	movs	r3, #0
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	f7fd fe18 	bl	8003fc0 <xQueueGenericSendFromISR>
 8006390:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006394:	4618      	mov	r0, r3
 8006396:	3728      	adds	r7, #40	; 0x28
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	20000e60 	.word	0x20000e60

080063a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3b04      	subs	r3, #4
 80063b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3b04      	subs	r3, #4
 80063be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f023 0201 	bic.w	r2, r3, #1
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3b04      	subs	r3, #4
 80063ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063d0:	4a0c      	ldr	r2, [pc, #48]	; (8006404 <pxPortInitialiseStack+0x64>)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3b14      	subs	r3, #20
 80063da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3b04      	subs	r3, #4
 80063e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f06f 0202 	mvn.w	r2, #2
 80063ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3b20      	subs	r3, #32
 80063f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063f6:	68fb      	ldr	r3, [r7, #12]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	08006409 	.word	0x08006409

08006408 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800640e:	2300      	movs	r3, #0
 8006410:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006412:	4b12      	ldr	r3, [pc, #72]	; (800645c <prvTaskExitError+0x54>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641a:	d00a      	beq.n	8006432 <prvTaskExitError+0x2a>
	__asm volatile
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	60fb      	str	r3, [r7, #12]
}
 800642e:	bf00      	nop
 8006430:	e7fe      	b.n	8006430 <prvTaskExitError+0x28>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	60bb      	str	r3, [r7, #8]
}
 8006444:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006446:	bf00      	nop
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0fc      	beq.n	8006448 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800644e:	bf00      	nop
 8006450:	bf00      	nop
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	2000000c 	.word	0x2000000c

08006460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006460:	4b07      	ldr	r3, [pc, #28]	; (8006480 <pxCurrentTCBConst2>)
 8006462:	6819      	ldr	r1, [r3, #0]
 8006464:	6808      	ldr	r0, [r1, #0]
 8006466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646a:	f380 8809 	msr	PSP, r0
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f04f 0000 	mov.w	r0, #0
 8006476:	f380 8811 	msr	BASEPRI, r0
 800647a:	4770      	bx	lr
 800647c:	f3af 8000 	nop.w

08006480 <pxCurrentTCBConst2>:
 8006480:	20000930 	.word	0x20000930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop

08006488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006488:	4808      	ldr	r0, [pc, #32]	; (80064ac <prvPortStartFirstTask+0x24>)
 800648a:	6800      	ldr	r0, [r0, #0]
 800648c:	6800      	ldr	r0, [r0, #0]
 800648e:	f380 8808 	msr	MSP, r0
 8006492:	f04f 0000 	mov.w	r0, #0
 8006496:	f380 8814 	msr	CONTROL, r0
 800649a:	b662      	cpsie	i
 800649c:	b661      	cpsie	f
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	df00      	svc	0
 80064a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064aa:	bf00      	nop
 80064ac:	e000ed08 	.word	0xe000ed08

080064b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064b6:	4b46      	ldr	r3, [pc, #280]	; (80065d0 <xPortStartScheduler+0x120>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a46      	ldr	r2, [pc, #280]	; (80065d4 <xPortStartScheduler+0x124>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d10a      	bne.n	80064d6 <xPortStartScheduler+0x26>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	613b      	str	r3, [r7, #16]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064d6:	4b3e      	ldr	r3, [pc, #248]	; (80065d0 <xPortStartScheduler+0x120>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a3f      	ldr	r2, [pc, #252]	; (80065d8 <xPortStartScheduler+0x128>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d10a      	bne.n	80064f6 <xPortStartScheduler+0x46>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	60fb      	str	r3, [r7, #12]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064f6:	4b39      	ldr	r3, [pc, #228]	; (80065dc <xPortStartScheduler+0x12c>)
 80064f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	22ff      	movs	r2, #255	; 0xff
 8006506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006518:	b2da      	uxtb	r2, r3
 800651a:	4b31      	ldr	r3, [pc, #196]	; (80065e0 <xPortStartScheduler+0x130>)
 800651c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800651e:	4b31      	ldr	r3, [pc, #196]	; (80065e4 <xPortStartScheduler+0x134>)
 8006520:	2207      	movs	r2, #7
 8006522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006524:	e009      	b.n	800653a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006526:	4b2f      	ldr	r3, [pc, #188]	; (80065e4 <xPortStartScheduler+0x134>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3b01      	subs	r3, #1
 800652c:	4a2d      	ldr	r2, [pc, #180]	; (80065e4 <xPortStartScheduler+0x134>)
 800652e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	b2db      	uxtb	r3, r3
 8006538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b80      	cmp	r3, #128	; 0x80
 8006544:	d0ef      	beq.n	8006526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006546:	4b27      	ldr	r3, [pc, #156]	; (80065e4 <xPortStartScheduler+0x134>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f1c3 0307 	rsb	r3, r3, #7
 800654e:	2b04      	cmp	r3, #4
 8006550:	d00a      	beq.n	8006568 <xPortStartScheduler+0xb8>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	60bb      	str	r3, [r7, #8]
}
 8006564:	bf00      	nop
 8006566:	e7fe      	b.n	8006566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006568:	4b1e      	ldr	r3, [pc, #120]	; (80065e4 <xPortStartScheduler+0x134>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <xPortStartScheduler+0x134>)
 8006570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006572:	4b1c      	ldr	r3, [pc, #112]	; (80065e4 <xPortStartScheduler+0x134>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800657a:	4a1a      	ldr	r2, [pc, #104]	; (80065e4 <xPortStartScheduler+0x134>)
 800657c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	b2da      	uxtb	r2, r3
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006586:	4b18      	ldr	r3, [pc, #96]	; (80065e8 <xPortStartScheduler+0x138>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <xPortStartScheduler+0x138>)
 800658c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <xPortStartScheduler+0x138>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a14      	ldr	r2, [pc, #80]	; (80065e8 <xPortStartScheduler+0x138>)
 8006598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800659c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800659e:	f000 f8dd 	bl	800675c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065a2:	4b12      	ldr	r3, [pc, #72]	; (80065ec <xPortStartScheduler+0x13c>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065a8:	f000 f8fc 	bl	80067a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065ac:	4b10      	ldr	r3, [pc, #64]	; (80065f0 <xPortStartScheduler+0x140>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a0f      	ldr	r2, [pc, #60]	; (80065f0 <xPortStartScheduler+0x140>)
 80065b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065b8:	f7ff ff66 	bl	8006488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065bc:	f7fe fd8e 	bl	80050dc <vTaskSwitchContext>
	prvTaskExitError();
 80065c0:	f7ff ff22 	bl	8006408 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	e000ed00 	.word	0xe000ed00
 80065d4:	410fc271 	.word	0x410fc271
 80065d8:	410fc270 	.word	0x410fc270
 80065dc:	e000e400 	.word	0xe000e400
 80065e0:	20000f5c 	.word	0x20000f5c
 80065e4:	20000f60 	.word	0x20000f60
 80065e8:	e000ed20 	.word	0xe000ed20
 80065ec:	2000000c 	.word	0x2000000c
 80065f0:	e000ef34 	.word	0xe000ef34

080065f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	607b      	str	r3, [r7, #4]
}
 800660c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800660e:	4b0f      	ldr	r3, [pc, #60]	; (800664c <vPortEnterCritical+0x58>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3301      	adds	r3, #1
 8006614:	4a0d      	ldr	r2, [pc, #52]	; (800664c <vPortEnterCritical+0x58>)
 8006616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006618:	4b0c      	ldr	r3, [pc, #48]	; (800664c <vPortEnterCritical+0x58>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d10f      	bne.n	8006640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006620:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <vPortEnterCritical+0x5c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <vPortEnterCritical+0x4c>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	603b      	str	r3, [r7, #0]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <vPortEnterCritical+0x4a>
	}
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	2000000c 	.word	0x2000000c
 8006650:	e000ed04 	.word	0xe000ed04

08006654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800665a:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <vPortExitCritical+0x50>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10a      	bne.n	8006678 <vPortExitCritical+0x24>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	607b      	str	r3, [r7, #4]
}
 8006674:	bf00      	nop
 8006676:	e7fe      	b.n	8006676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006678:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <vPortExitCritical+0x50>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3b01      	subs	r3, #1
 800667e:	4a09      	ldr	r2, [pc, #36]	; (80066a4 <vPortExitCritical+0x50>)
 8006680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006682:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <vPortExitCritical+0x50>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d105      	bne.n	8006696 <vPortExitCritical+0x42>
 800668a:	2300      	movs	r3, #0
 800668c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	f383 8811 	msr	BASEPRI, r3
}
 8006694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	2000000c 	.word	0x2000000c
	...

080066b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066b0:	f3ef 8009 	mrs	r0, PSP
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	4b15      	ldr	r3, [pc, #84]	; (8006710 <pxCurrentTCBConst>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	f01e 0f10 	tst.w	lr, #16
 80066c0:	bf08      	it	eq
 80066c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ca:	6010      	str	r0, [r2, #0]
 80066cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066d4:	f380 8811 	msr	BASEPRI, r0
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f7fe fcfc 	bl	80050dc <vTaskSwitchContext>
 80066e4:	f04f 0000 	mov.w	r0, #0
 80066e8:	f380 8811 	msr	BASEPRI, r0
 80066ec:	bc09      	pop	{r0, r3}
 80066ee:	6819      	ldr	r1, [r3, #0]
 80066f0:	6808      	ldr	r0, [r1, #0]
 80066f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f6:	f01e 0f10 	tst.w	lr, #16
 80066fa:	bf08      	it	eq
 80066fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006700:	f380 8809 	msr	PSP, r0
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	f3af 8000 	nop.w

08006710 <pxCurrentTCBConst>:
 8006710:	20000930 	.word	0x20000930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006714:	bf00      	nop
 8006716:	bf00      	nop

08006718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	607b      	str	r3, [r7, #4]
}
 8006730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006732:	f7fe fc19 	bl	8004f68 <xTaskIncrementTick>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <xPortSysTickHandler+0x40>)
 800673e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	2300      	movs	r3, #0
 8006746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	f383 8811 	msr	BASEPRI, r3
}
 800674e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	e000ed04 	.word	0xe000ed04

0800675c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <vPortSetupTimerInterrupt+0x34>)
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006766:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <vPortSetupTimerInterrupt+0x38>)
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800676c:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <vPortSetupTimerInterrupt+0x3c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a0a      	ldr	r2, [pc, #40]	; (800679c <vPortSetupTimerInterrupt+0x40>)
 8006772:	fba2 2303 	umull	r2, r3, r2, r3
 8006776:	099b      	lsrs	r3, r3, #6
 8006778:	4a09      	ldr	r2, [pc, #36]	; (80067a0 <vPortSetupTimerInterrupt+0x44>)
 800677a:	3b01      	subs	r3, #1
 800677c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800677e:	4b04      	ldr	r3, [pc, #16]	; (8006790 <vPortSetupTimerInterrupt+0x34>)
 8006780:	2207      	movs	r2, #7
 8006782:	601a      	str	r2, [r3, #0]
}
 8006784:	bf00      	nop
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	e000e010 	.word	0xe000e010
 8006794:	e000e018 	.word	0xe000e018
 8006798:	20000000 	.word	0x20000000
 800679c:	10624dd3 	.word	0x10624dd3
 80067a0:	e000e014 	.word	0xe000e014

080067a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067b4 <vPortEnableVFP+0x10>
 80067a8:	6801      	ldr	r1, [r0, #0]
 80067aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067ae:	6001      	str	r1, [r0, #0]
 80067b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067b2:	bf00      	nop
 80067b4:	e000ed88 	.word	0xe000ed88

080067b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067be:	f3ef 8305 	mrs	r3, IPSR
 80067c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b0f      	cmp	r3, #15
 80067c8:	d914      	bls.n	80067f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067ca:	4a17      	ldr	r2, [pc, #92]	; (8006828 <vPortValidateInterruptPriority+0x70>)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067d4:	4b15      	ldr	r3, [pc, #84]	; (800682c <vPortValidateInterruptPriority+0x74>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	7afa      	ldrb	r2, [r7, #11]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d20a      	bcs.n	80067f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	607b      	str	r3, [r7, #4]
}
 80067f0:	bf00      	nop
 80067f2:	e7fe      	b.n	80067f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067f4:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <vPortValidateInterruptPriority+0x78>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067fc:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <vPortValidateInterruptPriority+0x7c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d90a      	bls.n	800681a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	603b      	str	r3, [r7, #0]
}
 8006816:	bf00      	nop
 8006818:	e7fe      	b.n	8006818 <vPortValidateInterruptPriority+0x60>
	}
 800681a:	bf00      	nop
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	e000e3f0 	.word	0xe000e3f0
 800682c:	20000f5c 	.word	0x20000f5c
 8006830:	e000ed0c 	.word	0xe000ed0c
 8006834:	20000f60 	.word	0x20000f60

08006838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b08a      	sub	sp, #40	; 0x28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006840:	2300      	movs	r3, #0
 8006842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006844:	f7fe fad4 	bl	8004df0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006848:	4b5b      	ldr	r3, [pc, #364]	; (80069b8 <pvPortMalloc+0x180>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006850:	f000 f920 	bl	8006a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006854:	4b59      	ldr	r3, [pc, #356]	; (80069bc <pvPortMalloc+0x184>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4013      	ands	r3, r2
 800685c:	2b00      	cmp	r3, #0
 800685e:	f040 8093 	bne.w	8006988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01d      	beq.n	80068a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006868:	2208      	movs	r2, #8
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4413      	add	r3, r2
 800686e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	2b00      	cmp	r3, #0
 8006878:	d014      	beq.n	80068a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f023 0307 	bic.w	r3, r3, #7
 8006880:	3308      	adds	r3, #8
 8006882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <pvPortMalloc+0x6c>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	617b      	str	r3, [r7, #20]
}
 80068a0:	bf00      	nop
 80068a2:	e7fe      	b.n	80068a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d06e      	beq.n	8006988 <pvPortMalloc+0x150>
 80068aa:	4b45      	ldr	r3, [pc, #276]	; (80069c0 <pvPortMalloc+0x188>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d869      	bhi.n	8006988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068b4:	4b43      	ldr	r3, [pc, #268]	; (80069c4 <pvPortMalloc+0x18c>)
 80068b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068b8:	4b42      	ldr	r3, [pc, #264]	; (80069c4 <pvPortMalloc+0x18c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068be:	e004      	b.n	80068ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d903      	bls.n	80068dc <pvPortMalloc+0xa4>
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f1      	bne.n	80068c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068dc:	4b36      	ldr	r3, [pc, #216]	; (80069b8 <pvPortMalloc+0x180>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d050      	beq.n	8006988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2208      	movs	r2, #8
 80068ec:	4413      	add	r3, r2
 80068ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	2308      	movs	r3, #8
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	429a      	cmp	r2, r3
 8006906:	d91f      	bls.n	8006948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4413      	add	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <pvPortMalloc+0xf8>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	613b      	str	r3, [r7, #16]
}
 800692c:	bf00      	nop
 800692e:	e7fe      	b.n	800692e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	1ad2      	subs	r2, r2, r3
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006942:	69b8      	ldr	r0, [r7, #24]
 8006944:	f000 f908 	bl	8006b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006948:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <pvPortMalloc+0x188>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <pvPortMalloc+0x188>)
 8006954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006956:	4b1a      	ldr	r3, [pc, #104]	; (80069c0 <pvPortMalloc+0x188>)
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4b1b      	ldr	r3, [pc, #108]	; (80069c8 <pvPortMalloc+0x190>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d203      	bcs.n	800696a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006962:	4b17      	ldr	r3, [pc, #92]	; (80069c0 <pvPortMalloc+0x188>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <pvPortMalloc+0x190>)
 8006968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	4b13      	ldr	r3, [pc, #76]	; (80069bc <pvPortMalloc+0x184>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	431a      	orrs	r2, r3
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800697e:	4b13      	ldr	r3, [pc, #76]	; (80069cc <pvPortMalloc+0x194>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3301      	adds	r3, #1
 8006984:	4a11      	ldr	r2, [pc, #68]	; (80069cc <pvPortMalloc+0x194>)
 8006986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006988:	f7fe fa40 	bl	8004e0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <pvPortMalloc+0x174>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	60fb      	str	r3, [r7, #12]
}
 80069a8:	bf00      	nop
 80069aa:	e7fe      	b.n	80069aa <pvPortMalloc+0x172>
	return pvReturn;
 80069ac:	69fb      	ldr	r3, [r7, #28]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3728      	adds	r7, #40	; 0x28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20004b6c 	.word	0x20004b6c
 80069bc:	20004b80 	.word	0x20004b80
 80069c0:	20004b70 	.word	0x20004b70
 80069c4:	20004b64 	.word	0x20004b64
 80069c8:	20004b74 	.word	0x20004b74
 80069cc:	20004b78 	.word	0x20004b78

080069d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d04d      	beq.n	8006a7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069e2:	2308      	movs	r3, #8
 80069e4:	425b      	negs	r3, r3
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4413      	add	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	4b24      	ldr	r3, [pc, #144]	; (8006a88 <vPortFree+0xb8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4013      	ands	r3, r2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <vPortFree+0x44>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	60fb      	str	r3, [r7, #12]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <vPortFree+0x62>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	60bb      	str	r3, [r7, #8]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	4b14      	ldr	r3, [pc, #80]	; (8006a88 <vPortFree+0xb8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01e      	beq.n	8006a7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d11a      	bne.n	8006a7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <vPortFree+0xb8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	43db      	mvns	r3, r3
 8006a52:	401a      	ands	r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a58:	f7fe f9ca 	bl	8004df0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <vPortFree+0xbc>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4413      	add	r3, r2
 8006a66:	4a09      	ldr	r2, [pc, #36]	; (8006a8c <vPortFree+0xbc>)
 8006a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a6a:	6938      	ldr	r0, [r7, #16]
 8006a6c:	f000 f874 	bl	8006b58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a70:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <vPortFree+0xc0>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	4a06      	ldr	r2, [pc, #24]	; (8006a90 <vPortFree+0xc0>)
 8006a78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a7a:	f7fe f9c7 	bl	8004e0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a7e:	bf00      	nop
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20004b80 	.word	0x20004b80
 8006a8c:	20004b70 	.word	0x20004b70
 8006a90:	20004b7c 	.word	0x20004b7c

08006a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006aa0:	4b27      	ldr	r3, [pc, #156]	; (8006b40 <prvHeapInit+0xac>)
 8006aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00c      	beq.n	8006ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3307      	adds	r3, #7
 8006ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0307 	bic.w	r3, r3, #7
 8006aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	4a1f      	ldr	r2, [pc, #124]	; (8006b40 <prvHeapInit+0xac>)
 8006ac4:	4413      	add	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006acc:	4a1d      	ldr	r2, [pc, #116]	; (8006b44 <prvHeapInit+0xb0>)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ad2:	4b1c      	ldr	r3, [pc, #112]	; (8006b44 <prvHeapInit+0xb0>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	4413      	add	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ae0:	2208      	movs	r2, #8
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	1a9b      	subs	r3, r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0307 	bic.w	r3, r3, #7
 8006aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <prvHeapInit+0xb4>)
 8006af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006af6:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <prvHeapInit+0xb4>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2200      	movs	r2, #0
 8006afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006afe:	4b12      	ldr	r3, [pc, #72]	; (8006b48 <prvHeapInit+0xb4>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b14:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <prvHeapInit+0xb4>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4a0a      	ldr	r2, [pc, #40]	; (8006b4c <prvHeapInit+0xb8>)
 8006b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	4a09      	ldr	r2, [pc, #36]	; (8006b50 <prvHeapInit+0xbc>)
 8006b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b2c:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <prvHeapInit+0xc0>)
 8006b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b32:	601a      	str	r2, [r3, #0]
}
 8006b34:	bf00      	nop
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	20000f64 	.word	0x20000f64
 8006b44:	20004b64 	.word	0x20004b64
 8006b48:	20004b6c 	.word	0x20004b6c
 8006b4c:	20004b74 	.word	0x20004b74
 8006b50:	20004b70 	.word	0x20004b70
 8006b54:	20004b80 	.word	0x20004b80

08006b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b60:	4b28      	ldr	r3, [pc, #160]	; (8006c04 <prvInsertBlockIntoFreeList+0xac>)
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	e002      	b.n	8006b6c <prvInsertBlockIntoFreeList+0x14>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d8f7      	bhi.n	8006b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	4413      	add	r3, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d108      	bne.n	8006b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	441a      	add	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	441a      	add	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d118      	bne.n	8006be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	4b15      	ldr	r3, [pc, #84]	; (8006c08 <prvInsertBlockIntoFreeList+0xb0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d00d      	beq.n	8006bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	441a      	add	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	e008      	b.n	8006be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bd6:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <prvInsertBlockIntoFreeList+0xb0>)
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	e003      	b.n	8006be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d002      	beq.n	8006bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bf6:	bf00      	nop
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	20004b64 	.word	0x20004b64
 8006c08:	20004b6c 	.word	0x20004b6c

08006c0c <__errno>:
 8006c0c:	4b01      	ldr	r3, [pc, #4]	; (8006c14 <__errno+0x8>)
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	20000010 	.word	0x20000010

08006c18 <__libc_init_array>:
 8006c18:	b570      	push	{r4, r5, r6, lr}
 8006c1a:	4d0d      	ldr	r5, [pc, #52]	; (8006c50 <__libc_init_array+0x38>)
 8006c1c:	4c0d      	ldr	r4, [pc, #52]	; (8006c54 <__libc_init_array+0x3c>)
 8006c1e:	1b64      	subs	r4, r4, r5
 8006c20:	10a4      	asrs	r4, r4, #2
 8006c22:	2600      	movs	r6, #0
 8006c24:	42a6      	cmp	r6, r4
 8006c26:	d109      	bne.n	8006c3c <__libc_init_array+0x24>
 8006c28:	4d0b      	ldr	r5, [pc, #44]	; (8006c58 <__libc_init_array+0x40>)
 8006c2a:	4c0c      	ldr	r4, [pc, #48]	; (8006c5c <__libc_init_array+0x44>)
 8006c2c:	f002 ff02 	bl	8009a34 <_init>
 8006c30:	1b64      	subs	r4, r4, r5
 8006c32:	10a4      	asrs	r4, r4, #2
 8006c34:	2600      	movs	r6, #0
 8006c36:	42a6      	cmp	r6, r4
 8006c38:	d105      	bne.n	8006c46 <__libc_init_array+0x2e>
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
 8006c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c40:	4798      	blx	r3
 8006c42:	3601      	adds	r6, #1
 8006c44:	e7ee      	b.n	8006c24 <__libc_init_array+0xc>
 8006c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c4a:	4798      	blx	r3
 8006c4c:	3601      	adds	r6, #1
 8006c4e:	e7f2      	b.n	8006c36 <__libc_init_array+0x1e>
 8006c50:	08009ffc 	.word	0x08009ffc
 8006c54:	08009ffc 	.word	0x08009ffc
 8006c58:	08009ffc 	.word	0x08009ffc
 8006c5c:	0800a000 	.word	0x0800a000

08006c60 <memcpy>:
 8006c60:	440a      	add	r2, r1
 8006c62:	4291      	cmp	r1, r2
 8006c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c68:	d100      	bne.n	8006c6c <memcpy+0xc>
 8006c6a:	4770      	bx	lr
 8006c6c:	b510      	push	{r4, lr}
 8006c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c76:	4291      	cmp	r1, r2
 8006c78:	d1f9      	bne.n	8006c6e <memcpy+0xe>
 8006c7a:	bd10      	pop	{r4, pc}

08006c7c <memset>:
 8006c7c:	4402      	add	r2, r0
 8006c7e:	4603      	mov	r3, r0
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d100      	bne.n	8006c86 <memset+0xa>
 8006c84:	4770      	bx	lr
 8006c86:	f803 1b01 	strb.w	r1, [r3], #1
 8006c8a:	e7f9      	b.n	8006c80 <memset+0x4>

08006c8c <__cvt>:
 8006c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c90:	ec55 4b10 	vmov	r4, r5, d0
 8006c94:	2d00      	cmp	r5, #0
 8006c96:	460e      	mov	r6, r1
 8006c98:	4619      	mov	r1, r3
 8006c9a:	462b      	mov	r3, r5
 8006c9c:	bfbb      	ittet	lt
 8006c9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ca2:	461d      	movlt	r5, r3
 8006ca4:	2300      	movge	r3, #0
 8006ca6:	232d      	movlt	r3, #45	; 0x2d
 8006ca8:	700b      	strb	r3, [r1, #0]
 8006caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006cb0:	4691      	mov	r9, r2
 8006cb2:	f023 0820 	bic.w	r8, r3, #32
 8006cb6:	bfbc      	itt	lt
 8006cb8:	4622      	movlt	r2, r4
 8006cba:	4614      	movlt	r4, r2
 8006cbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cc0:	d005      	beq.n	8006cce <__cvt+0x42>
 8006cc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cc6:	d100      	bne.n	8006cca <__cvt+0x3e>
 8006cc8:	3601      	adds	r6, #1
 8006cca:	2102      	movs	r1, #2
 8006ccc:	e000      	b.n	8006cd0 <__cvt+0x44>
 8006cce:	2103      	movs	r1, #3
 8006cd0:	ab03      	add	r3, sp, #12
 8006cd2:	9301      	str	r3, [sp, #4]
 8006cd4:	ab02      	add	r3, sp, #8
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	ec45 4b10 	vmov	d0, r4, r5
 8006cdc:	4653      	mov	r3, sl
 8006cde:	4632      	mov	r2, r6
 8006ce0:	f000 fcea 	bl	80076b8 <_dtoa_r>
 8006ce4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ce8:	4607      	mov	r7, r0
 8006cea:	d102      	bne.n	8006cf2 <__cvt+0x66>
 8006cec:	f019 0f01 	tst.w	r9, #1
 8006cf0:	d022      	beq.n	8006d38 <__cvt+0xac>
 8006cf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cf6:	eb07 0906 	add.w	r9, r7, r6
 8006cfa:	d110      	bne.n	8006d1e <__cvt+0x92>
 8006cfc:	783b      	ldrb	r3, [r7, #0]
 8006cfe:	2b30      	cmp	r3, #48	; 0x30
 8006d00:	d10a      	bne.n	8006d18 <__cvt+0x8c>
 8006d02:	2200      	movs	r2, #0
 8006d04:	2300      	movs	r3, #0
 8006d06:	4620      	mov	r0, r4
 8006d08:	4629      	mov	r1, r5
 8006d0a:	f7f9 fee5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d0e:	b918      	cbnz	r0, 8006d18 <__cvt+0x8c>
 8006d10:	f1c6 0601 	rsb	r6, r6, #1
 8006d14:	f8ca 6000 	str.w	r6, [sl]
 8006d18:	f8da 3000 	ldr.w	r3, [sl]
 8006d1c:	4499      	add	r9, r3
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2300      	movs	r3, #0
 8006d22:	4620      	mov	r0, r4
 8006d24:	4629      	mov	r1, r5
 8006d26:	f7f9 fed7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d2a:	b108      	cbz	r0, 8006d30 <__cvt+0xa4>
 8006d2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d30:	2230      	movs	r2, #48	; 0x30
 8006d32:	9b03      	ldr	r3, [sp, #12]
 8006d34:	454b      	cmp	r3, r9
 8006d36:	d307      	bcc.n	8006d48 <__cvt+0xbc>
 8006d38:	9b03      	ldr	r3, [sp, #12]
 8006d3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d3c:	1bdb      	subs	r3, r3, r7
 8006d3e:	4638      	mov	r0, r7
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	b004      	add	sp, #16
 8006d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d48:	1c59      	adds	r1, r3, #1
 8006d4a:	9103      	str	r1, [sp, #12]
 8006d4c:	701a      	strb	r2, [r3, #0]
 8006d4e:	e7f0      	b.n	8006d32 <__cvt+0xa6>

08006d50 <__exponent>:
 8006d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d52:	4603      	mov	r3, r0
 8006d54:	2900      	cmp	r1, #0
 8006d56:	bfb8      	it	lt
 8006d58:	4249      	neglt	r1, r1
 8006d5a:	f803 2b02 	strb.w	r2, [r3], #2
 8006d5e:	bfb4      	ite	lt
 8006d60:	222d      	movlt	r2, #45	; 0x2d
 8006d62:	222b      	movge	r2, #43	; 0x2b
 8006d64:	2909      	cmp	r1, #9
 8006d66:	7042      	strb	r2, [r0, #1]
 8006d68:	dd2a      	ble.n	8006dc0 <__exponent+0x70>
 8006d6a:	f10d 0407 	add.w	r4, sp, #7
 8006d6e:	46a4      	mov	ip, r4
 8006d70:	270a      	movs	r7, #10
 8006d72:	46a6      	mov	lr, r4
 8006d74:	460a      	mov	r2, r1
 8006d76:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d7a:	fb07 1516 	mls	r5, r7, r6, r1
 8006d7e:	3530      	adds	r5, #48	; 0x30
 8006d80:	2a63      	cmp	r2, #99	; 0x63
 8006d82:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	dcf1      	bgt.n	8006d72 <__exponent+0x22>
 8006d8e:	3130      	adds	r1, #48	; 0x30
 8006d90:	f1ae 0502 	sub.w	r5, lr, #2
 8006d94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006d98:	1c44      	adds	r4, r0, #1
 8006d9a:	4629      	mov	r1, r5
 8006d9c:	4561      	cmp	r1, ip
 8006d9e:	d30a      	bcc.n	8006db6 <__exponent+0x66>
 8006da0:	f10d 0209 	add.w	r2, sp, #9
 8006da4:	eba2 020e 	sub.w	r2, r2, lr
 8006da8:	4565      	cmp	r5, ip
 8006daa:	bf88      	it	hi
 8006dac:	2200      	movhi	r2, #0
 8006dae:	4413      	add	r3, r2
 8006db0:	1a18      	subs	r0, r3, r0
 8006db2:	b003      	add	sp, #12
 8006db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006dbe:	e7ed      	b.n	8006d9c <__exponent+0x4c>
 8006dc0:	2330      	movs	r3, #48	; 0x30
 8006dc2:	3130      	adds	r1, #48	; 0x30
 8006dc4:	7083      	strb	r3, [r0, #2]
 8006dc6:	70c1      	strb	r1, [r0, #3]
 8006dc8:	1d03      	adds	r3, r0, #4
 8006dca:	e7f1      	b.n	8006db0 <__exponent+0x60>

08006dcc <_printf_float>:
 8006dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd0:	ed2d 8b02 	vpush	{d8}
 8006dd4:	b08d      	sub	sp, #52	; 0x34
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ddc:	4616      	mov	r6, r2
 8006dde:	461f      	mov	r7, r3
 8006de0:	4605      	mov	r5, r0
 8006de2:	f001 fa57 	bl	8008294 <_localeconv_r>
 8006de6:	f8d0 a000 	ldr.w	sl, [r0]
 8006dea:	4650      	mov	r0, sl
 8006dec:	f7f9 f9f8 	bl	80001e0 <strlen>
 8006df0:	2300      	movs	r3, #0
 8006df2:	930a      	str	r3, [sp, #40]	; 0x28
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	9305      	str	r3, [sp, #20]
 8006df8:	f8d8 3000 	ldr.w	r3, [r8]
 8006dfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e00:	3307      	adds	r3, #7
 8006e02:	f023 0307 	bic.w	r3, r3, #7
 8006e06:	f103 0208 	add.w	r2, r3, #8
 8006e0a:	f8c8 2000 	str.w	r2, [r8]
 8006e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e1e:	9307      	str	r3, [sp, #28]
 8006e20:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e24:	ee08 0a10 	vmov	s16, r0
 8006e28:	4b9f      	ldr	r3, [pc, #636]	; (80070a8 <_printf_float+0x2dc>)
 8006e2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e32:	f7f9 fe83 	bl	8000b3c <__aeabi_dcmpun>
 8006e36:	bb88      	cbnz	r0, 8006e9c <_printf_float+0xd0>
 8006e38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e3c:	4b9a      	ldr	r3, [pc, #616]	; (80070a8 <_printf_float+0x2dc>)
 8006e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e42:	f7f9 fe5d 	bl	8000b00 <__aeabi_dcmple>
 8006e46:	bb48      	cbnz	r0, 8006e9c <_printf_float+0xd0>
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	4640      	mov	r0, r8
 8006e4e:	4649      	mov	r1, r9
 8006e50:	f7f9 fe4c 	bl	8000aec <__aeabi_dcmplt>
 8006e54:	b110      	cbz	r0, 8006e5c <_printf_float+0x90>
 8006e56:	232d      	movs	r3, #45	; 0x2d
 8006e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e5c:	4b93      	ldr	r3, [pc, #588]	; (80070ac <_printf_float+0x2e0>)
 8006e5e:	4894      	ldr	r0, [pc, #592]	; (80070b0 <_printf_float+0x2e4>)
 8006e60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e64:	bf94      	ite	ls
 8006e66:	4698      	movls	r8, r3
 8006e68:	4680      	movhi	r8, r0
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	6123      	str	r3, [r4, #16]
 8006e6e:	9b05      	ldr	r3, [sp, #20]
 8006e70:	f023 0204 	bic.w	r2, r3, #4
 8006e74:	6022      	str	r2, [r4, #0]
 8006e76:	f04f 0900 	mov.w	r9, #0
 8006e7a:	9700      	str	r7, [sp, #0]
 8006e7c:	4633      	mov	r3, r6
 8006e7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e80:	4621      	mov	r1, r4
 8006e82:	4628      	mov	r0, r5
 8006e84:	f000 f9d8 	bl	8007238 <_printf_common>
 8006e88:	3001      	adds	r0, #1
 8006e8a:	f040 8090 	bne.w	8006fae <_printf_float+0x1e2>
 8006e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e92:	b00d      	add	sp, #52	; 0x34
 8006e94:	ecbd 8b02 	vpop	{d8}
 8006e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e9c:	4642      	mov	r2, r8
 8006e9e:	464b      	mov	r3, r9
 8006ea0:	4640      	mov	r0, r8
 8006ea2:	4649      	mov	r1, r9
 8006ea4:	f7f9 fe4a 	bl	8000b3c <__aeabi_dcmpun>
 8006ea8:	b140      	cbz	r0, 8006ebc <_printf_float+0xf0>
 8006eaa:	464b      	mov	r3, r9
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	bfbc      	itt	lt
 8006eb0:	232d      	movlt	r3, #45	; 0x2d
 8006eb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006eb6:	487f      	ldr	r0, [pc, #508]	; (80070b4 <_printf_float+0x2e8>)
 8006eb8:	4b7f      	ldr	r3, [pc, #508]	; (80070b8 <_printf_float+0x2ec>)
 8006eba:	e7d1      	b.n	8006e60 <_printf_float+0x94>
 8006ebc:	6863      	ldr	r3, [r4, #4]
 8006ebe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006ec2:	9206      	str	r2, [sp, #24]
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	d13f      	bne.n	8006f48 <_printf_float+0x17c>
 8006ec8:	2306      	movs	r3, #6
 8006eca:	6063      	str	r3, [r4, #4]
 8006ecc:	9b05      	ldr	r3, [sp, #20]
 8006ece:	6861      	ldr	r1, [r4, #4]
 8006ed0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	9303      	str	r3, [sp, #12]
 8006ed8:	ab0a      	add	r3, sp, #40	; 0x28
 8006eda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ede:	ab09      	add	r3, sp, #36	; 0x24
 8006ee0:	ec49 8b10 	vmov	d0, r8, r9
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	6022      	str	r2, [r4, #0]
 8006ee8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006eec:	4628      	mov	r0, r5
 8006eee:	f7ff fecd 	bl	8006c8c <__cvt>
 8006ef2:	9b06      	ldr	r3, [sp, #24]
 8006ef4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ef6:	2b47      	cmp	r3, #71	; 0x47
 8006ef8:	4680      	mov	r8, r0
 8006efa:	d108      	bne.n	8006f0e <_printf_float+0x142>
 8006efc:	1cc8      	adds	r0, r1, #3
 8006efe:	db02      	blt.n	8006f06 <_printf_float+0x13a>
 8006f00:	6863      	ldr	r3, [r4, #4]
 8006f02:	4299      	cmp	r1, r3
 8006f04:	dd41      	ble.n	8006f8a <_printf_float+0x1be>
 8006f06:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f0a:	fa5f fb8b 	uxtb.w	fp, fp
 8006f0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f12:	d820      	bhi.n	8006f56 <_printf_float+0x18a>
 8006f14:	3901      	subs	r1, #1
 8006f16:	465a      	mov	r2, fp
 8006f18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f1c:	9109      	str	r1, [sp, #36]	; 0x24
 8006f1e:	f7ff ff17 	bl	8006d50 <__exponent>
 8006f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f24:	1813      	adds	r3, r2, r0
 8006f26:	2a01      	cmp	r2, #1
 8006f28:	4681      	mov	r9, r0
 8006f2a:	6123      	str	r3, [r4, #16]
 8006f2c:	dc02      	bgt.n	8006f34 <_printf_float+0x168>
 8006f2e:	6822      	ldr	r2, [r4, #0]
 8006f30:	07d2      	lsls	r2, r2, #31
 8006f32:	d501      	bpl.n	8006f38 <_printf_float+0x16c>
 8006f34:	3301      	adds	r3, #1
 8006f36:	6123      	str	r3, [r4, #16]
 8006f38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d09c      	beq.n	8006e7a <_printf_float+0xae>
 8006f40:	232d      	movs	r3, #45	; 0x2d
 8006f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f46:	e798      	b.n	8006e7a <_printf_float+0xae>
 8006f48:	9a06      	ldr	r2, [sp, #24]
 8006f4a:	2a47      	cmp	r2, #71	; 0x47
 8006f4c:	d1be      	bne.n	8006ecc <_printf_float+0x100>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1bc      	bne.n	8006ecc <_printf_float+0x100>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e7b9      	b.n	8006eca <_printf_float+0xfe>
 8006f56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f5a:	d118      	bne.n	8006f8e <_printf_float+0x1c2>
 8006f5c:	2900      	cmp	r1, #0
 8006f5e:	6863      	ldr	r3, [r4, #4]
 8006f60:	dd0b      	ble.n	8006f7a <_printf_float+0x1ae>
 8006f62:	6121      	str	r1, [r4, #16]
 8006f64:	b913      	cbnz	r3, 8006f6c <_printf_float+0x1a0>
 8006f66:	6822      	ldr	r2, [r4, #0]
 8006f68:	07d0      	lsls	r0, r2, #31
 8006f6a:	d502      	bpl.n	8006f72 <_printf_float+0x1a6>
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	440b      	add	r3, r1
 8006f70:	6123      	str	r3, [r4, #16]
 8006f72:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f74:	f04f 0900 	mov.w	r9, #0
 8006f78:	e7de      	b.n	8006f38 <_printf_float+0x16c>
 8006f7a:	b913      	cbnz	r3, 8006f82 <_printf_float+0x1b6>
 8006f7c:	6822      	ldr	r2, [r4, #0]
 8006f7e:	07d2      	lsls	r2, r2, #31
 8006f80:	d501      	bpl.n	8006f86 <_printf_float+0x1ba>
 8006f82:	3302      	adds	r3, #2
 8006f84:	e7f4      	b.n	8006f70 <_printf_float+0x1a4>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e7f2      	b.n	8006f70 <_printf_float+0x1a4>
 8006f8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f90:	4299      	cmp	r1, r3
 8006f92:	db05      	blt.n	8006fa0 <_printf_float+0x1d4>
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	6121      	str	r1, [r4, #16]
 8006f98:	07d8      	lsls	r0, r3, #31
 8006f9a:	d5ea      	bpl.n	8006f72 <_printf_float+0x1a6>
 8006f9c:	1c4b      	adds	r3, r1, #1
 8006f9e:	e7e7      	b.n	8006f70 <_printf_float+0x1a4>
 8006fa0:	2900      	cmp	r1, #0
 8006fa2:	bfd4      	ite	le
 8006fa4:	f1c1 0202 	rsble	r2, r1, #2
 8006fa8:	2201      	movgt	r2, #1
 8006faa:	4413      	add	r3, r2
 8006fac:	e7e0      	b.n	8006f70 <_printf_float+0x1a4>
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	055a      	lsls	r2, r3, #21
 8006fb2:	d407      	bmi.n	8006fc4 <_printf_float+0x1f8>
 8006fb4:	6923      	ldr	r3, [r4, #16]
 8006fb6:	4642      	mov	r2, r8
 8006fb8:	4631      	mov	r1, r6
 8006fba:	4628      	mov	r0, r5
 8006fbc:	47b8      	blx	r7
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	d12c      	bne.n	800701c <_printf_float+0x250>
 8006fc2:	e764      	b.n	8006e8e <_printf_float+0xc2>
 8006fc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fc8:	f240 80e0 	bls.w	800718c <_printf_float+0x3c0>
 8006fcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f7f9 fd80 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d034      	beq.n	8007046 <_printf_float+0x27a>
 8006fdc:	4a37      	ldr	r2, [pc, #220]	; (80070bc <_printf_float+0x2f0>)
 8006fde:	2301      	movs	r3, #1
 8006fe0:	4631      	mov	r1, r6
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	47b8      	blx	r7
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	f43f af51 	beq.w	8006e8e <_printf_float+0xc2>
 8006fec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	db02      	blt.n	8006ffa <_printf_float+0x22e>
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	07d8      	lsls	r0, r3, #31
 8006ff8:	d510      	bpl.n	800701c <_printf_float+0x250>
 8006ffa:	ee18 3a10 	vmov	r3, s16
 8006ffe:	4652      	mov	r2, sl
 8007000:	4631      	mov	r1, r6
 8007002:	4628      	mov	r0, r5
 8007004:	47b8      	blx	r7
 8007006:	3001      	adds	r0, #1
 8007008:	f43f af41 	beq.w	8006e8e <_printf_float+0xc2>
 800700c:	f04f 0800 	mov.w	r8, #0
 8007010:	f104 091a 	add.w	r9, r4, #26
 8007014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007016:	3b01      	subs	r3, #1
 8007018:	4543      	cmp	r3, r8
 800701a:	dc09      	bgt.n	8007030 <_printf_float+0x264>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	079b      	lsls	r3, r3, #30
 8007020:	f100 8105 	bmi.w	800722e <_printf_float+0x462>
 8007024:	68e0      	ldr	r0, [r4, #12]
 8007026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007028:	4298      	cmp	r0, r3
 800702a:	bfb8      	it	lt
 800702c:	4618      	movlt	r0, r3
 800702e:	e730      	b.n	8006e92 <_printf_float+0xc6>
 8007030:	2301      	movs	r3, #1
 8007032:	464a      	mov	r2, r9
 8007034:	4631      	mov	r1, r6
 8007036:	4628      	mov	r0, r5
 8007038:	47b8      	blx	r7
 800703a:	3001      	adds	r0, #1
 800703c:	f43f af27 	beq.w	8006e8e <_printf_float+0xc2>
 8007040:	f108 0801 	add.w	r8, r8, #1
 8007044:	e7e6      	b.n	8007014 <_printf_float+0x248>
 8007046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007048:	2b00      	cmp	r3, #0
 800704a:	dc39      	bgt.n	80070c0 <_printf_float+0x2f4>
 800704c:	4a1b      	ldr	r2, [pc, #108]	; (80070bc <_printf_float+0x2f0>)
 800704e:	2301      	movs	r3, #1
 8007050:	4631      	mov	r1, r6
 8007052:	4628      	mov	r0, r5
 8007054:	47b8      	blx	r7
 8007056:	3001      	adds	r0, #1
 8007058:	f43f af19 	beq.w	8006e8e <_printf_float+0xc2>
 800705c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007060:	4313      	orrs	r3, r2
 8007062:	d102      	bne.n	800706a <_printf_float+0x29e>
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	07d9      	lsls	r1, r3, #31
 8007068:	d5d8      	bpl.n	800701c <_printf_float+0x250>
 800706a:	ee18 3a10 	vmov	r3, s16
 800706e:	4652      	mov	r2, sl
 8007070:	4631      	mov	r1, r6
 8007072:	4628      	mov	r0, r5
 8007074:	47b8      	blx	r7
 8007076:	3001      	adds	r0, #1
 8007078:	f43f af09 	beq.w	8006e8e <_printf_float+0xc2>
 800707c:	f04f 0900 	mov.w	r9, #0
 8007080:	f104 0a1a 	add.w	sl, r4, #26
 8007084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007086:	425b      	negs	r3, r3
 8007088:	454b      	cmp	r3, r9
 800708a:	dc01      	bgt.n	8007090 <_printf_float+0x2c4>
 800708c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708e:	e792      	b.n	8006fb6 <_printf_float+0x1ea>
 8007090:	2301      	movs	r3, #1
 8007092:	4652      	mov	r2, sl
 8007094:	4631      	mov	r1, r6
 8007096:	4628      	mov	r0, r5
 8007098:	47b8      	blx	r7
 800709a:	3001      	adds	r0, #1
 800709c:	f43f aef7 	beq.w	8006e8e <_printf_float+0xc2>
 80070a0:	f109 0901 	add.w	r9, r9, #1
 80070a4:	e7ee      	b.n	8007084 <_printf_float+0x2b8>
 80070a6:	bf00      	nop
 80070a8:	7fefffff 	.word	0x7fefffff
 80070ac:	08009c20 	.word	0x08009c20
 80070b0:	08009c24 	.word	0x08009c24
 80070b4:	08009c2c 	.word	0x08009c2c
 80070b8:	08009c28 	.word	0x08009c28
 80070bc:	08009c30 	.word	0x08009c30
 80070c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070c4:	429a      	cmp	r2, r3
 80070c6:	bfa8      	it	ge
 80070c8:	461a      	movge	r2, r3
 80070ca:	2a00      	cmp	r2, #0
 80070cc:	4691      	mov	r9, r2
 80070ce:	dc37      	bgt.n	8007140 <_printf_float+0x374>
 80070d0:	f04f 0b00 	mov.w	fp, #0
 80070d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070d8:	f104 021a 	add.w	r2, r4, #26
 80070dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070de:	9305      	str	r3, [sp, #20]
 80070e0:	eba3 0309 	sub.w	r3, r3, r9
 80070e4:	455b      	cmp	r3, fp
 80070e6:	dc33      	bgt.n	8007150 <_printf_float+0x384>
 80070e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070ec:	429a      	cmp	r2, r3
 80070ee:	db3b      	blt.n	8007168 <_printf_float+0x39c>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	07da      	lsls	r2, r3, #31
 80070f4:	d438      	bmi.n	8007168 <_printf_float+0x39c>
 80070f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f8:	9a05      	ldr	r2, [sp, #20]
 80070fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070fc:	1a9a      	subs	r2, r3, r2
 80070fe:	eba3 0901 	sub.w	r9, r3, r1
 8007102:	4591      	cmp	r9, r2
 8007104:	bfa8      	it	ge
 8007106:	4691      	movge	r9, r2
 8007108:	f1b9 0f00 	cmp.w	r9, #0
 800710c:	dc35      	bgt.n	800717a <_printf_float+0x3ae>
 800710e:	f04f 0800 	mov.w	r8, #0
 8007112:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007116:	f104 0a1a 	add.w	sl, r4, #26
 800711a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800711e:	1a9b      	subs	r3, r3, r2
 8007120:	eba3 0309 	sub.w	r3, r3, r9
 8007124:	4543      	cmp	r3, r8
 8007126:	f77f af79 	ble.w	800701c <_printf_float+0x250>
 800712a:	2301      	movs	r3, #1
 800712c:	4652      	mov	r2, sl
 800712e:	4631      	mov	r1, r6
 8007130:	4628      	mov	r0, r5
 8007132:	47b8      	blx	r7
 8007134:	3001      	adds	r0, #1
 8007136:	f43f aeaa 	beq.w	8006e8e <_printf_float+0xc2>
 800713a:	f108 0801 	add.w	r8, r8, #1
 800713e:	e7ec      	b.n	800711a <_printf_float+0x34e>
 8007140:	4613      	mov	r3, r2
 8007142:	4631      	mov	r1, r6
 8007144:	4642      	mov	r2, r8
 8007146:	4628      	mov	r0, r5
 8007148:	47b8      	blx	r7
 800714a:	3001      	adds	r0, #1
 800714c:	d1c0      	bne.n	80070d0 <_printf_float+0x304>
 800714e:	e69e      	b.n	8006e8e <_printf_float+0xc2>
 8007150:	2301      	movs	r3, #1
 8007152:	4631      	mov	r1, r6
 8007154:	4628      	mov	r0, r5
 8007156:	9205      	str	r2, [sp, #20]
 8007158:	47b8      	blx	r7
 800715a:	3001      	adds	r0, #1
 800715c:	f43f ae97 	beq.w	8006e8e <_printf_float+0xc2>
 8007160:	9a05      	ldr	r2, [sp, #20]
 8007162:	f10b 0b01 	add.w	fp, fp, #1
 8007166:	e7b9      	b.n	80070dc <_printf_float+0x310>
 8007168:	ee18 3a10 	vmov	r3, s16
 800716c:	4652      	mov	r2, sl
 800716e:	4631      	mov	r1, r6
 8007170:	4628      	mov	r0, r5
 8007172:	47b8      	blx	r7
 8007174:	3001      	adds	r0, #1
 8007176:	d1be      	bne.n	80070f6 <_printf_float+0x32a>
 8007178:	e689      	b.n	8006e8e <_printf_float+0xc2>
 800717a:	9a05      	ldr	r2, [sp, #20]
 800717c:	464b      	mov	r3, r9
 800717e:	4442      	add	r2, r8
 8007180:	4631      	mov	r1, r6
 8007182:	4628      	mov	r0, r5
 8007184:	47b8      	blx	r7
 8007186:	3001      	adds	r0, #1
 8007188:	d1c1      	bne.n	800710e <_printf_float+0x342>
 800718a:	e680      	b.n	8006e8e <_printf_float+0xc2>
 800718c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800718e:	2a01      	cmp	r2, #1
 8007190:	dc01      	bgt.n	8007196 <_printf_float+0x3ca>
 8007192:	07db      	lsls	r3, r3, #31
 8007194:	d538      	bpl.n	8007208 <_printf_float+0x43c>
 8007196:	2301      	movs	r3, #1
 8007198:	4642      	mov	r2, r8
 800719a:	4631      	mov	r1, r6
 800719c:	4628      	mov	r0, r5
 800719e:	47b8      	blx	r7
 80071a0:	3001      	adds	r0, #1
 80071a2:	f43f ae74 	beq.w	8006e8e <_printf_float+0xc2>
 80071a6:	ee18 3a10 	vmov	r3, s16
 80071aa:	4652      	mov	r2, sl
 80071ac:	4631      	mov	r1, r6
 80071ae:	4628      	mov	r0, r5
 80071b0:	47b8      	blx	r7
 80071b2:	3001      	adds	r0, #1
 80071b4:	f43f ae6b 	beq.w	8006e8e <_printf_float+0xc2>
 80071b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071bc:	2200      	movs	r2, #0
 80071be:	2300      	movs	r3, #0
 80071c0:	f7f9 fc8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80071c4:	b9d8      	cbnz	r0, 80071fe <_printf_float+0x432>
 80071c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c8:	f108 0201 	add.w	r2, r8, #1
 80071cc:	3b01      	subs	r3, #1
 80071ce:	4631      	mov	r1, r6
 80071d0:	4628      	mov	r0, r5
 80071d2:	47b8      	blx	r7
 80071d4:	3001      	adds	r0, #1
 80071d6:	d10e      	bne.n	80071f6 <_printf_float+0x42a>
 80071d8:	e659      	b.n	8006e8e <_printf_float+0xc2>
 80071da:	2301      	movs	r3, #1
 80071dc:	4652      	mov	r2, sl
 80071de:	4631      	mov	r1, r6
 80071e0:	4628      	mov	r0, r5
 80071e2:	47b8      	blx	r7
 80071e4:	3001      	adds	r0, #1
 80071e6:	f43f ae52 	beq.w	8006e8e <_printf_float+0xc2>
 80071ea:	f108 0801 	add.w	r8, r8, #1
 80071ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f0:	3b01      	subs	r3, #1
 80071f2:	4543      	cmp	r3, r8
 80071f4:	dcf1      	bgt.n	80071da <_printf_float+0x40e>
 80071f6:	464b      	mov	r3, r9
 80071f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80071fc:	e6dc      	b.n	8006fb8 <_printf_float+0x1ec>
 80071fe:	f04f 0800 	mov.w	r8, #0
 8007202:	f104 0a1a 	add.w	sl, r4, #26
 8007206:	e7f2      	b.n	80071ee <_printf_float+0x422>
 8007208:	2301      	movs	r3, #1
 800720a:	4642      	mov	r2, r8
 800720c:	e7df      	b.n	80071ce <_printf_float+0x402>
 800720e:	2301      	movs	r3, #1
 8007210:	464a      	mov	r2, r9
 8007212:	4631      	mov	r1, r6
 8007214:	4628      	mov	r0, r5
 8007216:	47b8      	blx	r7
 8007218:	3001      	adds	r0, #1
 800721a:	f43f ae38 	beq.w	8006e8e <_printf_float+0xc2>
 800721e:	f108 0801 	add.w	r8, r8, #1
 8007222:	68e3      	ldr	r3, [r4, #12]
 8007224:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007226:	1a5b      	subs	r3, r3, r1
 8007228:	4543      	cmp	r3, r8
 800722a:	dcf0      	bgt.n	800720e <_printf_float+0x442>
 800722c:	e6fa      	b.n	8007024 <_printf_float+0x258>
 800722e:	f04f 0800 	mov.w	r8, #0
 8007232:	f104 0919 	add.w	r9, r4, #25
 8007236:	e7f4      	b.n	8007222 <_printf_float+0x456>

08007238 <_printf_common>:
 8007238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800723c:	4616      	mov	r6, r2
 800723e:	4699      	mov	r9, r3
 8007240:	688a      	ldr	r2, [r1, #8]
 8007242:	690b      	ldr	r3, [r1, #16]
 8007244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007248:	4293      	cmp	r3, r2
 800724a:	bfb8      	it	lt
 800724c:	4613      	movlt	r3, r2
 800724e:	6033      	str	r3, [r6, #0]
 8007250:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007254:	4607      	mov	r7, r0
 8007256:	460c      	mov	r4, r1
 8007258:	b10a      	cbz	r2, 800725e <_printf_common+0x26>
 800725a:	3301      	adds	r3, #1
 800725c:	6033      	str	r3, [r6, #0]
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	0699      	lsls	r1, r3, #26
 8007262:	bf42      	ittt	mi
 8007264:	6833      	ldrmi	r3, [r6, #0]
 8007266:	3302      	addmi	r3, #2
 8007268:	6033      	strmi	r3, [r6, #0]
 800726a:	6825      	ldr	r5, [r4, #0]
 800726c:	f015 0506 	ands.w	r5, r5, #6
 8007270:	d106      	bne.n	8007280 <_printf_common+0x48>
 8007272:	f104 0a19 	add.w	sl, r4, #25
 8007276:	68e3      	ldr	r3, [r4, #12]
 8007278:	6832      	ldr	r2, [r6, #0]
 800727a:	1a9b      	subs	r3, r3, r2
 800727c:	42ab      	cmp	r3, r5
 800727e:	dc26      	bgt.n	80072ce <_printf_common+0x96>
 8007280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007284:	1e13      	subs	r3, r2, #0
 8007286:	6822      	ldr	r2, [r4, #0]
 8007288:	bf18      	it	ne
 800728a:	2301      	movne	r3, #1
 800728c:	0692      	lsls	r2, r2, #26
 800728e:	d42b      	bmi.n	80072e8 <_printf_common+0xb0>
 8007290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007294:	4649      	mov	r1, r9
 8007296:	4638      	mov	r0, r7
 8007298:	47c0      	blx	r8
 800729a:	3001      	adds	r0, #1
 800729c:	d01e      	beq.n	80072dc <_printf_common+0xa4>
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	68e5      	ldr	r5, [r4, #12]
 80072a2:	6832      	ldr	r2, [r6, #0]
 80072a4:	f003 0306 	and.w	r3, r3, #6
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	bf08      	it	eq
 80072ac:	1aad      	subeq	r5, r5, r2
 80072ae:	68a3      	ldr	r3, [r4, #8]
 80072b0:	6922      	ldr	r2, [r4, #16]
 80072b2:	bf0c      	ite	eq
 80072b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072b8:	2500      	movne	r5, #0
 80072ba:	4293      	cmp	r3, r2
 80072bc:	bfc4      	itt	gt
 80072be:	1a9b      	subgt	r3, r3, r2
 80072c0:	18ed      	addgt	r5, r5, r3
 80072c2:	2600      	movs	r6, #0
 80072c4:	341a      	adds	r4, #26
 80072c6:	42b5      	cmp	r5, r6
 80072c8:	d11a      	bne.n	8007300 <_printf_common+0xc8>
 80072ca:	2000      	movs	r0, #0
 80072cc:	e008      	b.n	80072e0 <_printf_common+0xa8>
 80072ce:	2301      	movs	r3, #1
 80072d0:	4652      	mov	r2, sl
 80072d2:	4649      	mov	r1, r9
 80072d4:	4638      	mov	r0, r7
 80072d6:	47c0      	blx	r8
 80072d8:	3001      	adds	r0, #1
 80072da:	d103      	bne.n	80072e4 <_printf_common+0xac>
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295
 80072e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072e4:	3501      	adds	r5, #1
 80072e6:	e7c6      	b.n	8007276 <_printf_common+0x3e>
 80072e8:	18e1      	adds	r1, r4, r3
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	2030      	movs	r0, #48	; 0x30
 80072ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072f2:	4422      	add	r2, r4
 80072f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072fc:	3302      	adds	r3, #2
 80072fe:	e7c7      	b.n	8007290 <_printf_common+0x58>
 8007300:	2301      	movs	r3, #1
 8007302:	4622      	mov	r2, r4
 8007304:	4649      	mov	r1, r9
 8007306:	4638      	mov	r0, r7
 8007308:	47c0      	blx	r8
 800730a:	3001      	adds	r0, #1
 800730c:	d0e6      	beq.n	80072dc <_printf_common+0xa4>
 800730e:	3601      	adds	r6, #1
 8007310:	e7d9      	b.n	80072c6 <_printf_common+0x8e>
	...

08007314 <_printf_i>:
 8007314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007318:	7e0f      	ldrb	r7, [r1, #24]
 800731a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800731c:	2f78      	cmp	r7, #120	; 0x78
 800731e:	4691      	mov	r9, r2
 8007320:	4680      	mov	r8, r0
 8007322:	460c      	mov	r4, r1
 8007324:	469a      	mov	sl, r3
 8007326:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800732a:	d807      	bhi.n	800733c <_printf_i+0x28>
 800732c:	2f62      	cmp	r7, #98	; 0x62
 800732e:	d80a      	bhi.n	8007346 <_printf_i+0x32>
 8007330:	2f00      	cmp	r7, #0
 8007332:	f000 80d8 	beq.w	80074e6 <_printf_i+0x1d2>
 8007336:	2f58      	cmp	r7, #88	; 0x58
 8007338:	f000 80a3 	beq.w	8007482 <_printf_i+0x16e>
 800733c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007344:	e03a      	b.n	80073bc <_printf_i+0xa8>
 8007346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800734a:	2b15      	cmp	r3, #21
 800734c:	d8f6      	bhi.n	800733c <_printf_i+0x28>
 800734e:	a101      	add	r1, pc, #4	; (adr r1, 8007354 <_printf_i+0x40>)
 8007350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007354:	080073ad 	.word	0x080073ad
 8007358:	080073c1 	.word	0x080073c1
 800735c:	0800733d 	.word	0x0800733d
 8007360:	0800733d 	.word	0x0800733d
 8007364:	0800733d 	.word	0x0800733d
 8007368:	0800733d 	.word	0x0800733d
 800736c:	080073c1 	.word	0x080073c1
 8007370:	0800733d 	.word	0x0800733d
 8007374:	0800733d 	.word	0x0800733d
 8007378:	0800733d 	.word	0x0800733d
 800737c:	0800733d 	.word	0x0800733d
 8007380:	080074cd 	.word	0x080074cd
 8007384:	080073f1 	.word	0x080073f1
 8007388:	080074af 	.word	0x080074af
 800738c:	0800733d 	.word	0x0800733d
 8007390:	0800733d 	.word	0x0800733d
 8007394:	080074ef 	.word	0x080074ef
 8007398:	0800733d 	.word	0x0800733d
 800739c:	080073f1 	.word	0x080073f1
 80073a0:	0800733d 	.word	0x0800733d
 80073a4:	0800733d 	.word	0x0800733d
 80073a8:	080074b7 	.word	0x080074b7
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	1d1a      	adds	r2, r3, #4
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	602a      	str	r2, [r5, #0]
 80073b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073bc:	2301      	movs	r3, #1
 80073be:	e0a3      	b.n	8007508 <_printf_i+0x1f4>
 80073c0:	6820      	ldr	r0, [r4, #0]
 80073c2:	6829      	ldr	r1, [r5, #0]
 80073c4:	0606      	lsls	r6, r0, #24
 80073c6:	f101 0304 	add.w	r3, r1, #4
 80073ca:	d50a      	bpl.n	80073e2 <_printf_i+0xce>
 80073cc:	680e      	ldr	r6, [r1, #0]
 80073ce:	602b      	str	r3, [r5, #0]
 80073d0:	2e00      	cmp	r6, #0
 80073d2:	da03      	bge.n	80073dc <_printf_i+0xc8>
 80073d4:	232d      	movs	r3, #45	; 0x2d
 80073d6:	4276      	negs	r6, r6
 80073d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073dc:	485e      	ldr	r0, [pc, #376]	; (8007558 <_printf_i+0x244>)
 80073de:	230a      	movs	r3, #10
 80073e0:	e019      	b.n	8007416 <_printf_i+0x102>
 80073e2:	680e      	ldr	r6, [r1, #0]
 80073e4:	602b      	str	r3, [r5, #0]
 80073e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073ea:	bf18      	it	ne
 80073ec:	b236      	sxthne	r6, r6
 80073ee:	e7ef      	b.n	80073d0 <_printf_i+0xbc>
 80073f0:	682b      	ldr	r3, [r5, #0]
 80073f2:	6820      	ldr	r0, [r4, #0]
 80073f4:	1d19      	adds	r1, r3, #4
 80073f6:	6029      	str	r1, [r5, #0]
 80073f8:	0601      	lsls	r1, r0, #24
 80073fa:	d501      	bpl.n	8007400 <_printf_i+0xec>
 80073fc:	681e      	ldr	r6, [r3, #0]
 80073fe:	e002      	b.n	8007406 <_printf_i+0xf2>
 8007400:	0646      	lsls	r6, r0, #25
 8007402:	d5fb      	bpl.n	80073fc <_printf_i+0xe8>
 8007404:	881e      	ldrh	r6, [r3, #0]
 8007406:	4854      	ldr	r0, [pc, #336]	; (8007558 <_printf_i+0x244>)
 8007408:	2f6f      	cmp	r7, #111	; 0x6f
 800740a:	bf0c      	ite	eq
 800740c:	2308      	moveq	r3, #8
 800740e:	230a      	movne	r3, #10
 8007410:	2100      	movs	r1, #0
 8007412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007416:	6865      	ldr	r5, [r4, #4]
 8007418:	60a5      	str	r5, [r4, #8]
 800741a:	2d00      	cmp	r5, #0
 800741c:	bfa2      	ittt	ge
 800741e:	6821      	ldrge	r1, [r4, #0]
 8007420:	f021 0104 	bicge.w	r1, r1, #4
 8007424:	6021      	strge	r1, [r4, #0]
 8007426:	b90e      	cbnz	r6, 800742c <_printf_i+0x118>
 8007428:	2d00      	cmp	r5, #0
 800742a:	d04d      	beq.n	80074c8 <_printf_i+0x1b4>
 800742c:	4615      	mov	r5, r2
 800742e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007432:	fb03 6711 	mls	r7, r3, r1, r6
 8007436:	5dc7      	ldrb	r7, [r0, r7]
 8007438:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800743c:	4637      	mov	r7, r6
 800743e:	42bb      	cmp	r3, r7
 8007440:	460e      	mov	r6, r1
 8007442:	d9f4      	bls.n	800742e <_printf_i+0x11a>
 8007444:	2b08      	cmp	r3, #8
 8007446:	d10b      	bne.n	8007460 <_printf_i+0x14c>
 8007448:	6823      	ldr	r3, [r4, #0]
 800744a:	07de      	lsls	r6, r3, #31
 800744c:	d508      	bpl.n	8007460 <_printf_i+0x14c>
 800744e:	6923      	ldr	r3, [r4, #16]
 8007450:	6861      	ldr	r1, [r4, #4]
 8007452:	4299      	cmp	r1, r3
 8007454:	bfde      	ittt	le
 8007456:	2330      	movle	r3, #48	; 0x30
 8007458:	f805 3c01 	strble.w	r3, [r5, #-1]
 800745c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007460:	1b52      	subs	r2, r2, r5
 8007462:	6122      	str	r2, [r4, #16]
 8007464:	f8cd a000 	str.w	sl, [sp]
 8007468:	464b      	mov	r3, r9
 800746a:	aa03      	add	r2, sp, #12
 800746c:	4621      	mov	r1, r4
 800746e:	4640      	mov	r0, r8
 8007470:	f7ff fee2 	bl	8007238 <_printf_common>
 8007474:	3001      	adds	r0, #1
 8007476:	d14c      	bne.n	8007512 <_printf_i+0x1fe>
 8007478:	f04f 30ff 	mov.w	r0, #4294967295
 800747c:	b004      	add	sp, #16
 800747e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007482:	4835      	ldr	r0, [pc, #212]	; (8007558 <_printf_i+0x244>)
 8007484:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007488:	6829      	ldr	r1, [r5, #0]
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007490:	6029      	str	r1, [r5, #0]
 8007492:	061d      	lsls	r5, r3, #24
 8007494:	d514      	bpl.n	80074c0 <_printf_i+0x1ac>
 8007496:	07df      	lsls	r7, r3, #31
 8007498:	bf44      	itt	mi
 800749a:	f043 0320 	orrmi.w	r3, r3, #32
 800749e:	6023      	strmi	r3, [r4, #0]
 80074a0:	b91e      	cbnz	r6, 80074aa <_printf_i+0x196>
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	f023 0320 	bic.w	r3, r3, #32
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	2310      	movs	r3, #16
 80074ac:	e7b0      	b.n	8007410 <_printf_i+0xfc>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	f043 0320 	orr.w	r3, r3, #32
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	2378      	movs	r3, #120	; 0x78
 80074b8:	4828      	ldr	r0, [pc, #160]	; (800755c <_printf_i+0x248>)
 80074ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074be:	e7e3      	b.n	8007488 <_printf_i+0x174>
 80074c0:	0659      	lsls	r1, r3, #25
 80074c2:	bf48      	it	mi
 80074c4:	b2b6      	uxthmi	r6, r6
 80074c6:	e7e6      	b.n	8007496 <_printf_i+0x182>
 80074c8:	4615      	mov	r5, r2
 80074ca:	e7bb      	b.n	8007444 <_printf_i+0x130>
 80074cc:	682b      	ldr	r3, [r5, #0]
 80074ce:	6826      	ldr	r6, [r4, #0]
 80074d0:	6961      	ldr	r1, [r4, #20]
 80074d2:	1d18      	adds	r0, r3, #4
 80074d4:	6028      	str	r0, [r5, #0]
 80074d6:	0635      	lsls	r5, r6, #24
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	d501      	bpl.n	80074e0 <_printf_i+0x1cc>
 80074dc:	6019      	str	r1, [r3, #0]
 80074de:	e002      	b.n	80074e6 <_printf_i+0x1d2>
 80074e0:	0670      	lsls	r0, r6, #25
 80074e2:	d5fb      	bpl.n	80074dc <_printf_i+0x1c8>
 80074e4:	8019      	strh	r1, [r3, #0]
 80074e6:	2300      	movs	r3, #0
 80074e8:	6123      	str	r3, [r4, #16]
 80074ea:	4615      	mov	r5, r2
 80074ec:	e7ba      	b.n	8007464 <_printf_i+0x150>
 80074ee:	682b      	ldr	r3, [r5, #0]
 80074f0:	1d1a      	adds	r2, r3, #4
 80074f2:	602a      	str	r2, [r5, #0]
 80074f4:	681d      	ldr	r5, [r3, #0]
 80074f6:	6862      	ldr	r2, [r4, #4]
 80074f8:	2100      	movs	r1, #0
 80074fa:	4628      	mov	r0, r5
 80074fc:	f7f8 fe78 	bl	80001f0 <memchr>
 8007500:	b108      	cbz	r0, 8007506 <_printf_i+0x1f2>
 8007502:	1b40      	subs	r0, r0, r5
 8007504:	6060      	str	r0, [r4, #4]
 8007506:	6863      	ldr	r3, [r4, #4]
 8007508:	6123      	str	r3, [r4, #16]
 800750a:	2300      	movs	r3, #0
 800750c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007510:	e7a8      	b.n	8007464 <_printf_i+0x150>
 8007512:	6923      	ldr	r3, [r4, #16]
 8007514:	462a      	mov	r2, r5
 8007516:	4649      	mov	r1, r9
 8007518:	4640      	mov	r0, r8
 800751a:	47d0      	blx	sl
 800751c:	3001      	adds	r0, #1
 800751e:	d0ab      	beq.n	8007478 <_printf_i+0x164>
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	079b      	lsls	r3, r3, #30
 8007524:	d413      	bmi.n	800754e <_printf_i+0x23a>
 8007526:	68e0      	ldr	r0, [r4, #12]
 8007528:	9b03      	ldr	r3, [sp, #12]
 800752a:	4298      	cmp	r0, r3
 800752c:	bfb8      	it	lt
 800752e:	4618      	movlt	r0, r3
 8007530:	e7a4      	b.n	800747c <_printf_i+0x168>
 8007532:	2301      	movs	r3, #1
 8007534:	4632      	mov	r2, r6
 8007536:	4649      	mov	r1, r9
 8007538:	4640      	mov	r0, r8
 800753a:	47d0      	blx	sl
 800753c:	3001      	adds	r0, #1
 800753e:	d09b      	beq.n	8007478 <_printf_i+0x164>
 8007540:	3501      	adds	r5, #1
 8007542:	68e3      	ldr	r3, [r4, #12]
 8007544:	9903      	ldr	r1, [sp, #12]
 8007546:	1a5b      	subs	r3, r3, r1
 8007548:	42ab      	cmp	r3, r5
 800754a:	dcf2      	bgt.n	8007532 <_printf_i+0x21e>
 800754c:	e7eb      	b.n	8007526 <_printf_i+0x212>
 800754e:	2500      	movs	r5, #0
 8007550:	f104 0619 	add.w	r6, r4, #25
 8007554:	e7f5      	b.n	8007542 <_printf_i+0x22e>
 8007556:	bf00      	nop
 8007558:	08009c32 	.word	0x08009c32
 800755c:	08009c43 	.word	0x08009c43

08007560 <siprintf>:
 8007560:	b40e      	push	{r1, r2, r3}
 8007562:	b500      	push	{lr}
 8007564:	b09c      	sub	sp, #112	; 0x70
 8007566:	ab1d      	add	r3, sp, #116	; 0x74
 8007568:	9002      	str	r0, [sp, #8]
 800756a:	9006      	str	r0, [sp, #24]
 800756c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007570:	4809      	ldr	r0, [pc, #36]	; (8007598 <siprintf+0x38>)
 8007572:	9107      	str	r1, [sp, #28]
 8007574:	9104      	str	r1, [sp, #16]
 8007576:	4909      	ldr	r1, [pc, #36]	; (800759c <siprintf+0x3c>)
 8007578:	f853 2b04 	ldr.w	r2, [r3], #4
 800757c:	9105      	str	r1, [sp, #20]
 800757e:	6800      	ldr	r0, [r0, #0]
 8007580:	9301      	str	r3, [sp, #4]
 8007582:	a902      	add	r1, sp, #8
 8007584:	f001 fb68 	bl	8008c58 <_svfiprintf_r>
 8007588:	9b02      	ldr	r3, [sp, #8]
 800758a:	2200      	movs	r2, #0
 800758c:	701a      	strb	r2, [r3, #0]
 800758e:	b01c      	add	sp, #112	; 0x70
 8007590:	f85d eb04 	ldr.w	lr, [sp], #4
 8007594:	b003      	add	sp, #12
 8007596:	4770      	bx	lr
 8007598:	20000010 	.word	0x20000010
 800759c:	ffff0208 	.word	0xffff0208

080075a0 <quorem>:
 80075a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a4:	6903      	ldr	r3, [r0, #16]
 80075a6:	690c      	ldr	r4, [r1, #16]
 80075a8:	42a3      	cmp	r3, r4
 80075aa:	4607      	mov	r7, r0
 80075ac:	f2c0 8081 	blt.w	80076b2 <quorem+0x112>
 80075b0:	3c01      	subs	r4, #1
 80075b2:	f101 0814 	add.w	r8, r1, #20
 80075b6:	f100 0514 	add.w	r5, r0, #20
 80075ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075be:	9301      	str	r3, [sp, #4]
 80075c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075c8:	3301      	adds	r3, #1
 80075ca:	429a      	cmp	r2, r3
 80075cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80075d8:	d331      	bcc.n	800763e <quorem+0x9e>
 80075da:	f04f 0e00 	mov.w	lr, #0
 80075de:	4640      	mov	r0, r8
 80075e0:	46ac      	mov	ip, r5
 80075e2:	46f2      	mov	sl, lr
 80075e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80075e8:	b293      	uxth	r3, r2
 80075ea:	fb06 e303 	mla	r3, r6, r3, lr
 80075ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	ebaa 0303 	sub.w	r3, sl, r3
 80075f8:	f8dc a000 	ldr.w	sl, [ip]
 80075fc:	0c12      	lsrs	r2, r2, #16
 80075fe:	fa13 f38a 	uxtah	r3, r3, sl
 8007602:	fb06 e202 	mla	r2, r6, r2, lr
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	9b00      	ldr	r3, [sp, #0]
 800760a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800760e:	b292      	uxth	r2, r2
 8007610:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007614:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007618:	f8bd 3000 	ldrh.w	r3, [sp]
 800761c:	4581      	cmp	r9, r0
 800761e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007622:	f84c 3b04 	str.w	r3, [ip], #4
 8007626:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800762a:	d2db      	bcs.n	80075e4 <quorem+0x44>
 800762c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007630:	b92b      	cbnz	r3, 800763e <quorem+0x9e>
 8007632:	9b01      	ldr	r3, [sp, #4]
 8007634:	3b04      	subs	r3, #4
 8007636:	429d      	cmp	r5, r3
 8007638:	461a      	mov	r2, r3
 800763a:	d32e      	bcc.n	800769a <quorem+0xfa>
 800763c:	613c      	str	r4, [r7, #16]
 800763e:	4638      	mov	r0, r7
 8007640:	f001 f8b6 	bl	80087b0 <__mcmp>
 8007644:	2800      	cmp	r0, #0
 8007646:	db24      	blt.n	8007692 <quorem+0xf2>
 8007648:	3601      	adds	r6, #1
 800764a:	4628      	mov	r0, r5
 800764c:	f04f 0c00 	mov.w	ip, #0
 8007650:	f858 2b04 	ldr.w	r2, [r8], #4
 8007654:	f8d0 e000 	ldr.w	lr, [r0]
 8007658:	b293      	uxth	r3, r2
 800765a:	ebac 0303 	sub.w	r3, ip, r3
 800765e:	0c12      	lsrs	r2, r2, #16
 8007660:	fa13 f38e 	uxtah	r3, r3, lr
 8007664:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007668:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800766c:	b29b      	uxth	r3, r3
 800766e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007672:	45c1      	cmp	r9, r8
 8007674:	f840 3b04 	str.w	r3, [r0], #4
 8007678:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800767c:	d2e8      	bcs.n	8007650 <quorem+0xb0>
 800767e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007686:	b922      	cbnz	r2, 8007692 <quorem+0xf2>
 8007688:	3b04      	subs	r3, #4
 800768a:	429d      	cmp	r5, r3
 800768c:	461a      	mov	r2, r3
 800768e:	d30a      	bcc.n	80076a6 <quorem+0x106>
 8007690:	613c      	str	r4, [r7, #16]
 8007692:	4630      	mov	r0, r6
 8007694:	b003      	add	sp, #12
 8007696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769a:	6812      	ldr	r2, [r2, #0]
 800769c:	3b04      	subs	r3, #4
 800769e:	2a00      	cmp	r2, #0
 80076a0:	d1cc      	bne.n	800763c <quorem+0x9c>
 80076a2:	3c01      	subs	r4, #1
 80076a4:	e7c7      	b.n	8007636 <quorem+0x96>
 80076a6:	6812      	ldr	r2, [r2, #0]
 80076a8:	3b04      	subs	r3, #4
 80076aa:	2a00      	cmp	r2, #0
 80076ac:	d1f0      	bne.n	8007690 <quorem+0xf0>
 80076ae:	3c01      	subs	r4, #1
 80076b0:	e7eb      	b.n	800768a <quorem+0xea>
 80076b2:	2000      	movs	r0, #0
 80076b4:	e7ee      	b.n	8007694 <quorem+0xf4>
	...

080076b8 <_dtoa_r>:
 80076b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	ed2d 8b04 	vpush	{d8-d9}
 80076c0:	ec57 6b10 	vmov	r6, r7, d0
 80076c4:	b093      	sub	sp, #76	; 0x4c
 80076c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80076c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80076cc:	9106      	str	r1, [sp, #24]
 80076ce:	ee10 aa10 	vmov	sl, s0
 80076d2:	4604      	mov	r4, r0
 80076d4:	9209      	str	r2, [sp, #36]	; 0x24
 80076d6:	930c      	str	r3, [sp, #48]	; 0x30
 80076d8:	46bb      	mov	fp, r7
 80076da:	b975      	cbnz	r5, 80076fa <_dtoa_r+0x42>
 80076dc:	2010      	movs	r0, #16
 80076de:	f000 fddd 	bl	800829c <malloc>
 80076e2:	4602      	mov	r2, r0
 80076e4:	6260      	str	r0, [r4, #36]	; 0x24
 80076e6:	b920      	cbnz	r0, 80076f2 <_dtoa_r+0x3a>
 80076e8:	4ba7      	ldr	r3, [pc, #668]	; (8007988 <_dtoa_r+0x2d0>)
 80076ea:	21ea      	movs	r1, #234	; 0xea
 80076ec:	48a7      	ldr	r0, [pc, #668]	; (800798c <_dtoa_r+0x2d4>)
 80076ee:	f001 fbc3 	bl	8008e78 <__assert_func>
 80076f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076f6:	6005      	str	r5, [r0, #0]
 80076f8:	60c5      	str	r5, [r0, #12]
 80076fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076fc:	6819      	ldr	r1, [r3, #0]
 80076fe:	b151      	cbz	r1, 8007716 <_dtoa_r+0x5e>
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	604a      	str	r2, [r1, #4]
 8007704:	2301      	movs	r3, #1
 8007706:	4093      	lsls	r3, r2
 8007708:	608b      	str	r3, [r1, #8]
 800770a:	4620      	mov	r0, r4
 800770c:	f000 fe0e 	bl	800832c <_Bfree>
 8007710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	1e3b      	subs	r3, r7, #0
 8007718:	bfaa      	itet	ge
 800771a:	2300      	movge	r3, #0
 800771c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007720:	f8c8 3000 	strge.w	r3, [r8]
 8007724:	4b9a      	ldr	r3, [pc, #616]	; (8007990 <_dtoa_r+0x2d8>)
 8007726:	bfbc      	itt	lt
 8007728:	2201      	movlt	r2, #1
 800772a:	f8c8 2000 	strlt.w	r2, [r8]
 800772e:	ea33 030b 	bics.w	r3, r3, fp
 8007732:	d11b      	bne.n	800776c <_dtoa_r+0xb4>
 8007734:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007736:	f242 730f 	movw	r3, #9999	; 0x270f
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007740:	4333      	orrs	r3, r6
 8007742:	f000 8592 	beq.w	800826a <_dtoa_r+0xbb2>
 8007746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007748:	b963      	cbnz	r3, 8007764 <_dtoa_r+0xac>
 800774a:	4b92      	ldr	r3, [pc, #584]	; (8007994 <_dtoa_r+0x2dc>)
 800774c:	e022      	b.n	8007794 <_dtoa_r+0xdc>
 800774e:	4b92      	ldr	r3, [pc, #584]	; (8007998 <_dtoa_r+0x2e0>)
 8007750:	9301      	str	r3, [sp, #4]
 8007752:	3308      	adds	r3, #8
 8007754:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	9801      	ldr	r0, [sp, #4]
 800775a:	b013      	add	sp, #76	; 0x4c
 800775c:	ecbd 8b04 	vpop	{d8-d9}
 8007760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007764:	4b8b      	ldr	r3, [pc, #556]	; (8007994 <_dtoa_r+0x2dc>)
 8007766:	9301      	str	r3, [sp, #4]
 8007768:	3303      	adds	r3, #3
 800776a:	e7f3      	b.n	8007754 <_dtoa_r+0x9c>
 800776c:	2200      	movs	r2, #0
 800776e:	2300      	movs	r3, #0
 8007770:	4650      	mov	r0, sl
 8007772:	4659      	mov	r1, fp
 8007774:	f7f9 f9b0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007778:	ec4b ab19 	vmov	d9, sl, fp
 800777c:	4680      	mov	r8, r0
 800777e:	b158      	cbz	r0, 8007798 <_dtoa_r+0xe0>
 8007780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007782:	2301      	movs	r3, #1
 8007784:	6013      	str	r3, [r2, #0]
 8007786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 856b 	beq.w	8008264 <_dtoa_r+0xbac>
 800778e:	4883      	ldr	r0, [pc, #524]	; (800799c <_dtoa_r+0x2e4>)
 8007790:	6018      	str	r0, [r3, #0]
 8007792:	1e43      	subs	r3, r0, #1
 8007794:	9301      	str	r3, [sp, #4]
 8007796:	e7df      	b.n	8007758 <_dtoa_r+0xa0>
 8007798:	ec4b ab10 	vmov	d0, sl, fp
 800779c:	aa10      	add	r2, sp, #64	; 0x40
 800779e:	a911      	add	r1, sp, #68	; 0x44
 80077a0:	4620      	mov	r0, r4
 80077a2:	f001 f8ab 	bl	80088fc <__d2b>
 80077a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80077aa:	ee08 0a10 	vmov	s16, r0
 80077ae:	2d00      	cmp	r5, #0
 80077b0:	f000 8084 	beq.w	80078bc <_dtoa_r+0x204>
 80077b4:	ee19 3a90 	vmov	r3, s19
 80077b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80077c0:	4656      	mov	r6, sl
 80077c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80077c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80077ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80077ce:	4b74      	ldr	r3, [pc, #464]	; (80079a0 <_dtoa_r+0x2e8>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	4630      	mov	r0, r6
 80077d4:	4639      	mov	r1, r7
 80077d6:	f7f8 fd5f 	bl	8000298 <__aeabi_dsub>
 80077da:	a365      	add	r3, pc, #404	; (adr r3, 8007970 <_dtoa_r+0x2b8>)
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f7f8 ff12 	bl	8000608 <__aeabi_dmul>
 80077e4:	a364      	add	r3, pc, #400	; (adr r3, 8007978 <_dtoa_r+0x2c0>)
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	f7f8 fd57 	bl	800029c <__adddf3>
 80077ee:	4606      	mov	r6, r0
 80077f0:	4628      	mov	r0, r5
 80077f2:	460f      	mov	r7, r1
 80077f4:	f7f8 fe9e 	bl	8000534 <__aeabi_i2d>
 80077f8:	a361      	add	r3, pc, #388	; (adr r3, 8007980 <_dtoa_r+0x2c8>)
 80077fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fe:	f7f8 ff03 	bl	8000608 <__aeabi_dmul>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	4630      	mov	r0, r6
 8007808:	4639      	mov	r1, r7
 800780a:	f7f8 fd47 	bl	800029c <__adddf3>
 800780e:	4606      	mov	r6, r0
 8007810:	460f      	mov	r7, r1
 8007812:	f7f9 f9a9 	bl	8000b68 <__aeabi_d2iz>
 8007816:	2200      	movs	r2, #0
 8007818:	9000      	str	r0, [sp, #0]
 800781a:	2300      	movs	r3, #0
 800781c:	4630      	mov	r0, r6
 800781e:	4639      	mov	r1, r7
 8007820:	f7f9 f964 	bl	8000aec <__aeabi_dcmplt>
 8007824:	b150      	cbz	r0, 800783c <_dtoa_r+0x184>
 8007826:	9800      	ldr	r0, [sp, #0]
 8007828:	f7f8 fe84 	bl	8000534 <__aeabi_i2d>
 800782c:	4632      	mov	r2, r6
 800782e:	463b      	mov	r3, r7
 8007830:	f7f9 f952 	bl	8000ad8 <__aeabi_dcmpeq>
 8007834:	b910      	cbnz	r0, 800783c <_dtoa_r+0x184>
 8007836:	9b00      	ldr	r3, [sp, #0]
 8007838:	3b01      	subs	r3, #1
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	9b00      	ldr	r3, [sp, #0]
 800783e:	2b16      	cmp	r3, #22
 8007840:	d85a      	bhi.n	80078f8 <_dtoa_r+0x240>
 8007842:	9a00      	ldr	r2, [sp, #0]
 8007844:	4b57      	ldr	r3, [pc, #348]	; (80079a4 <_dtoa_r+0x2ec>)
 8007846:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784e:	ec51 0b19 	vmov	r0, r1, d9
 8007852:	f7f9 f94b 	bl	8000aec <__aeabi_dcmplt>
 8007856:	2800      	cmp	r0, #0
 8007858:	d050      	beq.n	80078fc <_dtoa_r+0x244>
 800785a:	9b00      	ldr	r3, [sp, #0]
 800785c:	3b01      	subs	r3, #1
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	2300      	movs	r3, #0
 8007862:	930b      	str	r3, [sp, #44]	; 0x2c
 8007864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007866:	1b5d      	subs	r5, r3, r5
 8007868:	1e6b      	subs	r3, r5, #1
 800786a:	9305      	str	r3, [sp, #20]
 800786c:	bf45      	ittet	mi
 800786e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007872:	9304      	strmi	r3, [sp, #16]
 8007874:	2300      	movpl	r3, #0
 8007876:	2300      	movmi	r3, #0
 8007878:	bf4c      	ite	mi
 800787a:	9305      	strmi	r3, [sp, #20]
 800787c:	9304      	strpl	r3, [sp, #16]
 800787e:	9b00      	ldr	r3, [sp, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	db3d      	blt.n	8007900 <_dtoa_r+0x248>
 8007884:	9b05      	ldr	r3, [sp, #20]
 8007886:	9a00      	ldr	r2, [sp, #0]
 8007888:	920a      	str	r2, [sp, #40]	; 0x28
 800788a:	4413      	add	r3, r2
 800788c:	9305      	str	r3, [sp, #20]
 800788e:	2300      	movs	r3, #0
 8007890:	9307      	str	r3, [sp, #28]
 8007892:	9b06      	ldr	r3, [sp, #24]
 8007894:	2b09      	cmp	r3, #9
 8007896:	f200 8089 	bhi.w	80079ac <_dtoa_r+0x2f4>
 800789a:	2b05      	cmp	r3, #5
 800789c:	bfc4      	itt	gt
 800789e:	3b04      	subgt	r3, #4
 80078a0:	9306      	strgt	r3, [sp, #24]
 80078a2:	9b06      	ldr	r3, [sp, #24]
 80078a4:	f1a3 0302 	sub.w	r3, r3, #2
 80078a8:	bfcc      	ite	gt
 80078aa:	2500      	movgt	r5, #0
 80078ac:	2501      	movle	r5, #1
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	f200 8087 	bhi.w	80079c2 <_dtoa_r+0x30a>
 80078b4:	e8df f003 	tbb	[pc, r3]
 80078b8:	59383a2d 	.word	0x59383a2d
 80078bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80078c0:	441d      	add	r5, r3
 80078c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80078c6:	2b20      	cmp	r3, #32
 80078c8:	bfc1      	itttt	gt
 80078ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80078ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80078d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80078d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078da:	bfda      	itte	le
 80078dc:	f1c3 0320 	rsble	r3, r3, #32
 80078e0:	fa06 f003 	lslle.w	r0, r6, r3
 80078e4:	4318      	orrgt	r0, r3
 80078e6:	f7f8 fe15 	bl	8000514 <__aeabi_ui2d>
 80078ea:	2301      	movs	r3, #1
 80078ec:	4606      	mov	r6, r0
 80078ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80078f2:	3d01      	subs	r5, #1
 80078f4:	930e      	str	r3, [sp, #56]	; 0x38
 80078f6:	e76a      	b.n	80077ce <_dtoa_r+0x116>
 80078f8:	2301      	movs	r3, #1
 80078fa:	e7b2      	b.n	8007862 <_dtoa_r+0x1aa>
 80078fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80078fe:	e7b1      	b.n	8007864 <_dtoa_r+0x1ac>
 8007900:	9b04      	ldr	r3, [sp, #16]
 8007902:	9a00      	ldr	r2, [sp, #0]
 8007904:	1a9b      	subs	r3, r3, r2
 8007906:	9304      	str	r3, [sp, #16]
 8007908:	4253      	negs	r3, r2
 800790a:	9307      	str	r3, [sp, #28]
 800790c:	2300      	movs	r3, #0
 800790e:	930a      	str	r3, [sp, #40]	; 0x28
 8007910:	e7bf      	b.n	8007892 <_dtoa_r+0x1da>
 8007912:	2300      	movs	r3, #0
 8007914:	9308      	str	r3, [sp, #32]
 8007916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007918:	2b00      	cmp	r3, #0
 800791a:	dc55      	bgt.n	80079c8 <_dtoa_r+0x310>
 800791c:	2301      	movs	r3, #1
 800791e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007922:	461a      	mov	r2, r3
 8007924:	9209      	str	r2, [sp, #36]	; 0x24
 8007926:	e00c      	b.n	8007942 <_dtoa_r+0x28a>
 8007928:	2301      	movs	r3, #1
 800792a:	e7f3      	b.n	8007914 <_dtoa_r+0x25c>
 800792c:	2300      	movs	r3, #0
 800792e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007930:	9308      	str	r3, [sp, #32]
 8007932:	9b00      	ldr	r3, [sp, #0]
 8007934:	4413      	add	r3, r2
 8007936:	9302      	str	r3, [sp, #8]
 8007938:	3301      	adds	r3, #1
 800793a:	2b01      	cmp	r3, #1
 800793c:	9303      	str	r3, [sp, #12]
 800793e:	bfb8      	it	lt
 8007940:	2301      	movlt	r3, #1
 8007942:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007944:	2200      	movs	r2, #0
 8007946:	6042      	str	r2, [r0, #4]
 8007948:	2204      	movs	r2, #4
 800794a:	f102 0614 	add.w	r6, r2, #20
 800794e:	429e      	cmp	r6, r3
 8007950:	6841      	ldr	r1, [r0, #4]
 8007952:	d93d      	bls.n	80079d0 <_dtoa_r+0x318>
 8007954:	4620      	mov	r0, r4
 8007956:	f000 fca9 	bl	80082ac <_Balloc>
 800795a:	9001      	str	r0, [sp, #4]
 800795c:	2800      	cmp	r0, #0
 800795e:	d13b      	bne.n	80079d8 <_dtoa_r+0x320>
 8007960:	4b11      	ldr	r3, [pc, #68]	; (80079a8 <_dtoa_r+0x2f0>)
 8007962:	4602      	mov	r2, r0
 8007964:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007968:	e6c0      	b.n	80076ec <_dtoa_r+0x34>
 800796a:	2301      	movs	r3, #1
 800796c:	e7df      	b.n	800792e <_dtoa_r+0x276>
 800796e:	bf00      	nop
 8007970:	636f4361 	.word	0x636f4361
 8007974:	3fd287a7 	.word	0x3fd287a7
 8007978:	8b60c8b3 	.word	0x8b60c8b3
 800797c:	3fc68a28 	.word	0x3fc68a28
 8007980:	509f79fb 	.word	0x509f79fb
 8007984:	3fd34413 	.word	0x3fd34413
 8007988:	08009c61 	.word	0x08009c61
 800798c:	08009c78 	.word	0x08009c78
 8007990:	7ff00000 	.word	0x7ff00000
 8007994:	08009c5d 	.word	0x08009c5d
 8007998:	08009c54 	.word	0x08009c54
 800799c:	08009c31 	.word	0x08009c31
 80079a0:	3ff80000 	.word	0x3ff80000
 80079a4:	08009d68 	.word	0x08009d68
 80079a8:	08009cd3 	.word	0x08009cd3
 80079ac:	2501      	movs	r5, #1
 80079ae:	2300      	movs	r3, #0
 80079b0:	9306      	str	r3, [sp, #24]
 80079b2:	9508      	str	r5, [sp, #32]
 80079b4:	f04f 33ff 	mov.w	r3, #4294967295
 80079b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079bc:	2200      	movs	r2, #0
 80079be:	2312      	movs	r3, #18
 80079c0:	e7b0      	b.n	8007924 <_dtoa_r+0x26c>
 80079c2:	2301      	movs	r3, #1
 80079c4:	9308      	str	r3, [sp, #32]
 80079c6:	e7f5      	b.n	80079b4 <_dtoa_r+0x2fc>
 80079c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079ce:	e7b8      	b.n	8007942 <_dtoa_r+0x28a>
 80079d0:	3101      	adds	r1, #1
 80079d2:	6041      	str	r1, [r0, #4]
 80079d4:	0052      	lsls	r2, r2, #1
 80079d6:	e7b8      	b.n	800794a <_dtoa_r+0x292>
 80079d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079da:	9a01      	ldr	r2, [sp, #4]
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	9b03      	ldr	r3, [sp, #12]
 80079e0:	2b0e      	cmp	r3, #14
 80079e2:	f200 809d 	bhi.w	8007b20 <_dtoa_r+0x468>
 80079e6:	2d00      	cmp	r5, #0
 80079e8:	f000 809a 	beq.w	8007b20 <_dtoa_r+0x468>
 80079ec:	9b00      	ldr	r3, [sp, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	dd32      	ble.n	8007a58 <_dtoa_r+0x3a0>
 80079f2:	4ab7      	ldr	r2, [pc, #732]	; (8007cd0 <_dtoa_r+0x618>)
 80079f4:	f003 030f 	and.w	r3, r3, #15
 80079f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a00:	9b00      	ldr	r3, [sp, #0]
 8007a02:	05d8      	lsls	r0, r3, #23
 8007a04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007a08:	d516      	bpl.n	8007a38 <_dtoa_r+0x380>
 8007a0a:	4bb2      	ldr	r3, [pc, #712]	; (8007cd4 <_dtoa_r+0x61c>)
 8007a0c:	ec51 0b19 	vmov	r0, r1, d9
 8007a10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a14:	f7f8 ff22 	bl	800085c <__aeabi_ddiv>
 8007a18:	f007 070f 	and.w	r7, r7, #15
 8007a1c:	4682      	mov	sl, r0
 8007a1e:	468b      	mov	fp, r1
 8007a20:	2503      	movs	r5, #3
 8007a22:	4eac      	ldr	r6, [pc, #688]	; (8007cd4 <_dtoa_r+0x61c>)
 8007a24:	b957      	cbnz	r7, 8007a3c <_dtoa_r+0x384>
 8007a26:	4642      	mov	r2, r8
 8007a28:	464b      	mov	r3, r9
 8007a2a:	4650      	mov	r0, sl
 8007a2c:	4659      	mov	r1, fp
 8007a2e:	f7f8 ff15 	bl	800085c <__aeabi_ddiv>
 8007a32:	4682      	mov	sl, r0
 8007a34:	468b      	mov	fp, r1
 8007a36:	e028      	b.n	8007a8a <_dtoa_r+0x3d2>
 8007a38:	2502      	movs	r5, #2
 8007a3a:	e7f2      	b.n	8007a22 <_dtoa_r+0x36a>
 8007a3c:	07f9      	lsls	r1, r7, #31
 8007a3e:	d508      	bpl.n	8007a52 <_dtoa_r+0x39a>
 8007a40:	4640      	mov	r0, r8
 8007a42:	4649      	mov	r1, r9
 8007a44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a48:	f7f8 fdde 	bl	8000608 <__aeabi_dmul>
 8007a4c:	3501      	adds	r5, #1
 8007a4e:	4680      	mov	r8, r0
 8007a50:	4689      	mov	r9, r1
 8007a52:	107f      	asrs	r7, r7, #1
 8007a54:	3608      	adds	r6, #8
 8007a56:	e7e5      	b.n	8007a24 <_dtoa_r+0x36c>
 8007a58:	f000 809b 	beq.w	8007b92 <_dtoa_r+0x4da>
 8007a5c:	9b00      	ldr	r3, [sp, #0]
 8007a5e:	4f9d      	ldr	r7, [pc, #628]	; (8007cd4 <_dtoa_r+0x61c>)
 8007a60:	425e      	negs	r6, r3
 8007a62:	4b9b      	ldr	r3, [pc, #620]	; (8007cd0 <_dtoa_r+0x618>)
 8007a64:	f006 020f 	and.w	r2, r6, #15
 8007a68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	ec51 0b19 	vmov	r0, r1, d9
 8007a74:	f7f8 fdc8 	bl	8000608 <__aeabi_dmul>
 8007a78:	1136      	asrs	r6, r6, #4
 8007a7a:	4682      	mov	sl, r0
 8007a7c:	468b      	mov	fp, r1
 8007a7e:	2300      	movs	r3, #0
 8007a80:	2502      	movs	r5, #2
 8007a82:	2e00      	cmp	r6, #0
 8007a84:	d17a      	bne.n	8007b7c <_dtoa_r+0x4c4>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1d3      	bne.n	8007a32 <_dtoa_r+0x37a>
 8007a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 8082 	beq.w	8007b96 <_dtoa_r+0x4de>
 8007a92:	4b91      	ldr	r3, [pc, #580]	; (8007cd8 <_dtoa_r+0x620>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	4650      	mov	r0, sl
 8007a98:	4659      	mov	r1, fp
 8007a9a:	f7f9 f827 	bl	8000aec <__aeabi_dcmplt>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d079      	beq.n	8007b96 <_dtoa_r+0x4de>
 8007aa2:	9b03      	ldr	r3, [sp, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d076      	beq.n	8007b96 <_dtoa_r+0x4de>
 8007aa8:	9b02      	ldr	r3, [sp, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	dd36      	ble.n	8007b1c <_dtoa_r+0x464>
 8007aae:	9b00      	ldr	r3, [sp, #0]
 8007ab0:	4650      	mov	r0, sl
 8007ab2:	4659      	mov	r1, fp
 8007ab4:	1e5f      	subs	r7, r3, #1
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	4b88      	ldr	r3, [pc, #544]	; (8007cdc <_dtoa_r+0x624>)
 8007aba:	f7f8 fda5 	bl	8000608 <__aeabi_dmul>
 8007abe:	9e02      	ldr	r6, [sp, #8]
 8007ac0:	4682      	mov	sl, r0
 8007ac2:	468b      	mov	fp, r1
 8007ac4:	3501      	adds	r5, #1
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	f7f8 fd34 	bl	8000534 <__aeabi_i2d>
 8007acc:	4652      	mov	r2, sl
 8007ace:	465b      	mov	r3, fp
 8007ad0:	f7f8 fd9a 	bl	8000608 <__aeabi_dmul>
 8007ad4:	4b82      	ldr	r3, [pc, #520]	; (8007ce0 <_dtoa_r+0x628>)
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f7f8 fbe0 	bl	800029c <__adddf3>
 8007adc:	46d0      	mov	r8, sl
 8007ade:	46d9      	mov	r9, fp
 8007ae0:	4682      	mov	sl, r0
 8007ae2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007ae6:	2e00      	cmp	r6, #0
 8007ae8:	d158      	bne.n	8007b9c <_dtoa_r+0x4e4>
 8007aea:	4b7e      	ldr	r3, [pc, #504]	; (8007ce4 <_dtoa_r+0x62c>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	4640      	mov	r0, r8
 8007af0:	4649      	mov	r1, r9
 8007af2:	f7f8 fbd1 	bl	8000298 <__aeabi_dsub>
 8007af6:	4652      	mov	r2, sl
 8007af8:	465b      	mov	r3, fp
 8007afa:	4680      	mov	r8, r0
 8007afc:	4689      	mov	r9, r1
 8007afe:	f7f9 f813 	bl	8000b28 <__aeabi_dcmpgt>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	f040 8295 	bne.w	8008032 <_dtoa_r+0x97a>
 8007b08:	4652      	mov	r2, sl
 8007b0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b0e:	4640      	mov	r0, r8
 8007b10:	4649      	mov	r1, r9
 8007b12:	f7f8 ffeb 	bl	8000aec <__aeabi_dcmplt>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	f040 8289 	bne.w	800802e <_dtoa_r+0x976>
 8007b1c:	ec5b ab19 	vmov	sl, fp, d9
 8007b20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f2c0 8148 	blt.w	8007db8 <_dtoa_r+0x700>
 8007b28:	9a00      	ldr	r2, [sp, #0]
 8007b2a:	2a0e      	cmp	r2, #14
 8007b2c:	f300 8144 	bgt.w	8007db8 <_dtoa_r+0x700>
 8007b30:	4b67      	ldr	r3, [pc, #412]	; (8007cd0 <_dtoa_r+0x618>)
 8007b32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f280 80d5 	bge.w	8007cec <_dtoa_r+0x634>
 8007b42:	9b03      	ldr	r3, [sp, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f300 80d1 	bgt.w	8007cec <_dtoa_r+0x634>
 8007b4a:	f040 826f 	bne.w	800802c <_dtoa_r+0x974>
 8007b4e:	4b65      	ldr	r3, [pc, #404]	; (8007ce4 <_dtoa_r+0x62c>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	4640      	mov	r0, r8
 8007b54:	4649      	mov	r1, r9
 8007b56:	f7f8 fd57 	bl	8000608 <__aeabi_dmul>
 8007b5a:	4652      	mov	r2, sl
 8007b5c:	465b      	mov	r3, fp
 8007b5e:	f7f8 ffd9 	bl	8000b14 <__aeabi_dcmpge>
 8007b62:	9e03      	ldr	r6, [sp, #12]
 8007b64:	4637      	mov	r7, r6
 8007b66:	2800      	cmp	r0, #0
 8007b68:	f040 8245 	bne.w	8007ff6 <_dtoa_r+0x93e>
 8007b6c:	9d01      	ldr	r5, [sp, #4]
 8007b6e:	2331      	movs	r3, #49	; 0x31
 8007b70:	f805 3b01 	strb.w	r3, [r5], #1
 8007b74:	9b00      	ldr	r3, [sp, #0]
 8007b76:	3301      	adds	r3, #1
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	e240      	b.n	8007ffe <_dtoa_r+0x946>
 8007b7c:	07f2      	lsls	r2, r6, #31
 8007b7e:	d505      	bpl.n	8007b8c <_dtoa_r+0x4d4>
 8007b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b84:	f7f8 fd40 	bl	8000608 <__aeabi_dmul>
 8007b88:	3501      	adds	r5, #1
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	1076      	asrs	r6, r6, #1
 8007b8e:	3708      	adds	r7, #8
 8007b90:	e777      	b.n	8007a82 <_dtoa_r+0x3ca>
 8007b92:	2502      	movs	r5, #2
 8007b94:	e779      	b.n	8007a8a <_dtoa_r+0x3d2>
 8007b96:	9f00      	ldr	r7, [sp, #0]
 8007b98:	9e03      	ldr	r6, [sp, #12]
 8007b9a:	e794      	b.n	8007ac6 <_dtoa_r+0x40e>
 8007b9c:	9901      	ldr	r1, [sp, #4]
 8007b9e:	4b4c      	ldr	r3, [pc, #304]	; (8007cd0 <_dtoa_r+0x618>)
 8007ba0:	4431      	add	r1, r6
 8007ba2:	910d      	str	r1, [sp, #52]	; 0x34
 8007ba4:	9908      	ldr	r1, [sp, #32]
 8007ba6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007baa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007bae:	2900      	cmp	r1, #0
 8007bb0:	d043      	beq.n	8007c3a <_dtoa_r+0x582>
 8007bb2:	494d      	ldr	r1, [pc, #308]	; (8007ce8 <_dtoa_r+0x630>)
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	f7f8 fe51 	bl	800085c <__aeabi_ddiv>
 8007bba:	4652      	mov	r2, sl
 8007bbc:	465b      	mov	r3, fp
 8007bbe:	f7f8 fb6b 	bl	8000298 <__aeabi_dsub>
 8007bc2:	9d01      	ldr	r5, [sp, #4]
 8007bc4:	4682      	mov	sl, r0
 8007bc6:	468b      	mov	fp, r1
 8007bc8:	4649      	mov	r1, r9
 8007bca:	4640      	mov	r0, r8
 8007bcc:	f7f8 ffcc 	bl	8000b68 <__aeabi_d2iz>
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	f7f8 fcaf 	bl	8000534 <__aeabi_i2d>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4640      	mov	r0, r8
 8007bdc:	4649      	mov	r1, r9
 8007bde:	f7f8 fb5b 	bl	8000298 <__aeabi_dsub>
 8007be2:	3630      	adds	r6, #48	; 0x30
 8007be4:	f805 6b01 	strb.w	r6, [r5], #1
 8007be8:	4652      	mov	r2, sl
 8007bea:	465b      	mov	r3, fp
 8007bec:	4680      	mov	r8, r0
 8007bee:	4689      	mov	r9, r1
 8007bf0:	f7f8 ff7c 	bl	8000aec <__aeabi_dcmplt>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d163      	bne.n	8007cc0 <_dtoa_r+0x608>
 8007bf8:	4642      	mov	r2, r8
 8007bfa:	464b      	mov	r3, r9
 8007bfc:	4936      	ldr	r1, [pc, #216]	; (8007cd8 <_dtoa_r+0x620>)
 8007bfe:	2000      	movs	r0, #0
 8007c00:	f7f8 fb4a 	bl	8000298 <__aeabi_dsub>
 8007c04:	4652      	mov	r2, sl
 8007c06:	465b      	mov	r3, fp
 8007c08:	f7f8 ff70 	bl	8000aec <__aeabi_dcmplt>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	f040 80b5 	bne.w	8007d7c <_dtoa_r+0x6c4>
 8007c12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c14:	429d      	cmp	r5, r3
 8007c16:	d081      	beq.n	8007b1c <_dtoa_r+0x464>
 8007c18:	4b30      	ldr	r3, [pc, #192]	; (8007cdc <_dtoa_r+0x624>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	4650      	mov	r0, sl
 8007c1e:	4659      	mov	r1, fp
 8007c20:	f7f8 fcf2 	bl	8000608 <__aeabi_dmul>
 8007c24:	4b2d      	ldr	r3, [pc, #180]	; (8007cdc <_dtoa_r+0x624>)
 8007c26:	4682      	mov	sl, r0
 8007c28:	468b      	mov	fp, r1
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f7f8 fcea 	bl	8000608 <__aeabi_dmul>
 8007c34:	4680      	mov	r8, r0
 8007c36:	4689      	mov	r9, r1
 8007c38:	e7c6      	b.n	8007bc8 <_dtoa_r+0x510>
 8007c3a:	4650      	mov	r0, sl
 8007c3c:	4659      	mov	r1, fp
 8007c3e:	f7f8 fce3 	bl	8000608 <__aeabi_dmul>
 8007c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c44:	9d01      	ldr	r5, [sp, #4]
 8007c46:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c48:	4682      	mov	sl, r0
 8007c4a:	468b      	mov	fp, r1
 8007c4c:	4649      	mov	r1, r9
 8007c4e:	4640      	mov	r0, r8
 8007c50:	f7f8 ff8a 	bl	8000b68 <__aeabi_d2iz>
 8007c54:	4606      	mov	r6, r0
 8007c56:	f7f8 fc6d 	bl	8000534 <__aeabi_i2d>
 8007c5a:	3630      	adds	r6, #48	; 0x30
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4640      	mov	r0, r8
 8007c62:	4649      	mov	r1, r9
 8007c64:	f7f8 fb18 	bl	8000298 <__aeabi_dsub>
 8007c68:	f805 6b01 	strb.w	r6, [r5], #1
 8007c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c6e:	429d      	cmp	r5, r3
 8007c70:	4680      	mov	r8, r0
 8007c72:	4689      	mov	r9, r1
 8007c74:	f04f 0200 	mov.w	r2, #0
 8007c78:	d124      	bne.n	8007cc4 <_dtoa_r+0x60c>
 8007c7a:	4b1b      	ldr	r3, [pc, #108]	; (8007ce8 <_dtoa_r+0x630>)
 8007c7c:	4650      	mov	r0, sl
 8007c7e:	4659      	mov	r1, fp
 8007c80:	f7f8 fb0c 	bl	800029c <__adddf3>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4640      	mov	r0, r8
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	f7f8 ff4c 	bl	8000b28 <__aeabi_dcmpgt>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d173      	bne.n	8007d7c <_dtoa_r+0x6c4>
 8007c94:	4652      	mov	r2, sl
 8007c96:	465b      	mov	r3, fp
 8007c98:	4913      	ldr	r1, [pc, #76]	; (8007ce8 <_dtoa_r+0x630>)
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	f7f8 fafc 	bl	8000298 <__aeabi_dsub>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	f7f8 ff20 	bl	8000aec <__aeabi_dcmplt>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	f43f af35 	beq.w	8007b1c <_dtoa_r+0x464>
 8007cb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007cb4:	1e6b      	subs	r3, r5, #1
 8007cb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007cbc:	2b30      	cmp	r3, #48	; 0x30
 8007cbe:	d0f8      	beq.n	8007cb2 <_dtoa_r+0x5fa>
 8007cc0:	9700      	str	r7, [sp, #0]
 8007cc2:	e049      	b.n	8007d58 <_dtoa_r+0x6a0>
 8007cc4:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <_dtoa_r+0x624>)
 8007cc6:	f7f8 fc9f 	bl	8000608 <__aeabi_dmul>
 8007cca:	4680      	mov	r8, r0
 8007ccc:	4689      	mov	r9, r1
 8007cce:	e7bd      	b.n	8007c4c <_dtoa_r+0x594>
 8007cd0:	08009d68 	.word	0x08009d68
 8007cd4:	08009d40 	.word	0x08009d40
 8007cd8:	3ff00000 	.word	0x3ff00000
 8007cdc:	40240000 	.word	0x40240000
 8007ce0:	401c0000 	.word	0x401c0000
 8007ce4:	40140000 	.word	0x40140000
 8007ce8:	3fe00000 	.word	0x3fe00000
 8007cec:	9d01      	ldr	r5, [sp, #4]
 8007cee:	4656      	mov	r6, sl
 8007cf0:	465f      	mov	r7, fp
 8007cf2:	4642      	mov	r2, r8
 8007cf4:	464b      	mov	r3, r9
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	f7f8 fdaf 	bl	800085c <__aeabi_ddiv>
 8007cfe:	f7f8 ff33 	bl	8000b68 <__aeabi_d2iz>
 8007d02:	4682      	mov	sl, r0
 8007d04:	f7f8 fc16 	bl	8000534 <__aeabi_i2d>
 8007d08:	4642      	mov	r2, r8
 8007d0a:	464b      	mov	r3, r9
 8007d0c:	f7f8 fc7c 	bl	8000608 <__aeabi_dmul>
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4630      	mov	r0, r6
 8007d16:	4639      	mov	r1, r7
 8007d18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007d1c:	f7f8 fabc 	bl	8000298 <__aeabi_dsub>
 8007d20:	f805 6b01 	strb.w	r6, [r5], #1
 8007d24:	9e01      	ldr	r6, [sp, #4]
 8007d26:	9f03      	ldr	r7, [sp, #12]
 8007d28:	1bae      	subs	r6, r5, r6
 8007d2a:	42b7      	cmp	r7, r6
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	d135      	bne.n	8007d9e <_dtoa_r+0x6e6>
 8007d32:	f7f8 fab3 	bl	800029c <__adddf3>
 8007d36:	4642      	mov	r2, r8
 8007d38:	464b      	mov	r3, r9
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	460f      	mov	r7, r1
 8007d3e:	f7f8 fef3 	bl	8000b28 <__aeabi_dcmpgt>
 8007d42:	b9d0      	cbnz	r0, 8007d7a <_dtoa_r+0x6c2>
 8007d44:	4642      	mov	r2, r8
 8007d46:	464b      	mov	r3, r9
 8007d48:	4630      	mov	r0, r6
 8007d4a:	4639      	mov	r1, r7
 8007d4c:	f7f8 fec4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d50:	b110      	cbz	r0, 8007d58 <_dtoa_r+0x6a0>
 8007d52:	f01a 0f01 	tst.w	sl, #1
 8007d56:	d110      	bne.n	8007d7a <_dtoa_r+0x6c2>
 8007d58:	4620      	mov	r0, r4
 8007d5a:	ee18 1a10 	vmov	r1, s16
 8007d5e:	f000 fae5 	bl	800832c <_Bfree>
 8007d62:	2300      	movs	r3, #0
 8007d64:	9800      	ldr	r0, [sp, #0]
 8007d66:	702b      	strb	r3, [r5, #0]
 8007d68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	6018      	str	r0, [r3, #0]
 8007d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f43f acf1 	beq.w	8007758 <_dtoa_r+0xa0>
 8007d76:	601d      	str	r5, [r3, #0]
 8007d78:	e4ee      	b.n	8007758 <_dtoa_r+0xa0>
 8007d7a:	9f00      	ldr	r7, [sp, #0]
 8007d7c:	462b      	mov	r3, r5
 8007d7e:	461d      	mov	r5, r3
 8007d80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d84:	2a39      	cmp	r2, #57	; 0x39
 8007d86:	d106      	bne.n	8007d96 <_dtoa_r+0x6de>
 8007d88:	9a01      	ldr	r2, [sp, #4]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d1f7      	bne.n	8007d7e <_dtoa_r+0x6c6>
 8007d8e:	9901      	ldr	r1, [sp, #4]
 8007d90:	2230      	movs	r2, #48	; 0x30
 8007d92:	3701      	adds	r7, #1
 8007d94:	700a      	strb	r2, [r1, #0]
 8007d96:	781a      	ldrb	r2, [r3, #0]
 8007d98:	3201      	adds	r2, #1
 8007d9a:	701a      	strb	r2, [r3, #0]
 8007d9c:	e790      	b.n	8007cc0 <_dtoa_r+0x608>
 8007d9e:	4ba6      	ldr	r3, [pc, #664]	; (8008038 <_dtoa_r+0x980>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	f7f8 fc31 	bl	8000608 <__aeabi_dmul>
 8007da6:	2200      	movs	r2, #0
 8007da8:	2300      	movs	r3, #0
 8007daa:	4606      	mov	r6, r0
 8007dac:	460f      	mov	r7, r1
 8007dae:	f7f8 fe93 	bl	8000ad8 <__aeabi_dcmpeq>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d09d      	beq.n	8007cf2 <_dtoa_r+0x63a>
 8007db6:	e7cf      	b.n	8007d58 <_dtoa_r+0x6a0>
 8007db8:	9a08      	ldr	r2, [sp, #32]
 8007dba:	2a00      	cmp	r2, #0
 8007dbc:	f000 80d7 	beq.w	8007f6e <_dtoa_r+0x8b6>
 8007dc0:	9a06      	ldr	r2, [sp, #24]
 8007dc2:	2a01      	cmp	r2, #1
 8007dc4:	f300 80ba 	bgt.w	8007f3c <_dtoa_r+0x884>
 8007dc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dca:	2a00      	cmp	r2, #0
 8007dcc:	f000 80b2 	beq.w	8007f34 <_dtoa_r+0x87c>
 8007dd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007dd4:	9e07      	ldr	r6, [sp, #28]
 8007dd6:	9d04      	ldr	r5, [sp, #16]
 8007dd8:	9a04      	ldr	r2, [sp, #16]
 8007dda:	441a      	add	r2, r3
 8007ddc:	9204      	str	r2, [sp, #16]
 8007dde:	9a05      	ldr	r2, [sp, #20]
 8007de0:	2101      	movs	r1, #1
 8007de2:	441a      	add	r2, r3
 8007de4:	4620      	mov	r0, r4
 8007de6:	9205      	str	r2, [sp, #20]
 8007de8:	f000 fb58 	bl	800849c <__i2b>
 8007dec:	4607      	mov	r7, r0
 8007dee:	2d00      	cmp	r5, #0
 8007df0:	dd0c      	ble.n	8007e0c <_dtoa_r+0x754>
 8007df2:	9b05      	ldr	r3, [sp, #20]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	dd09      	ble.n	8007e0c <_dtoa_r+0x754>
 8007df8:	42ab      	cmp	r3, r5
 8007dfa:	9a04      	ldr	r2, [sp, #16]
 8007dfc:	bfa8      	it	ge
 8007dfe:	462b      	movge	r3, r5
 8007e00:	1ad2      	subs	r2, r2, r3
 8007e02:	9204      	str	r2, [sp, #16]
 8007e04:	9a05      	ldr	r2, [sp, #20]
 8007e06:	1aed      	subs	r5, r5, r3
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	9305      	str	r3, [sp, #20]
 8007e0c:	9b07      	ldr	r3, [sp, #28]
 8007e0e:	b31b      	cbz	r3, 8007e58 <_dtoa_r+0x7a0>
 8007e10:	9b08      	ldr	r3, [sp, #32]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 80af 	beq.w	8007f76 <_dtoa_r+0x8be>
 8007e18:	2e00      	cmp	r6, #0
 8007e1a:	dd13      	ble.n	8007e44 <_dtoa_r+0x78c>
 8007e1c:	4639      	mov	r1, r7
 8007e1e:	4632      	mov	r2, r6
 8007e20:	4620      	mov	r0, r4
 8007e22:	f000 fbfb 	bl	800861c <__pow5mult>
 8007e26:	ee18 2a10 	vmov	r2, s16
 8007e2a:	4601      	mov	r1, r0
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 fb4a 	bl	80084c8 <__multiply>
 8007e34:	ee18 1a10 	vmov	r1, s16
 8007e38:	4680      	mov	r8, r0
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 fa76 	bl	800832c <_Bfree>
 8007e40:	ee08 8a10 	vmov	s16, r8
 8007e44:	9b07      	ldr	r3, [sp, #28]
 8007e46:	1b9a      	subs	r2, r3, r6
 8007e48:	d006      	beq.n	8007e58 <_dtoa_r+0x7a0>
 8007e4a:	ee18 1a10 	vmov	r1, s16
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f000 fbe4 	bl	800861c <__pow5mult>
 8007e54:	ee08 0a10 	vmov	s16, r0
 8007e58:	2101      	movs	r1, #1
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f000 fb1e 	bl	800849c <__i2b>
 8007e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	4606      	mov	r6, r0
 8007e66:	f340 8088 	ble.w	8007f7a <_dtoa_r+0x8c2>
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	4601      	mov	r1, r0
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f000 fbd4 	bl	800861c <__pow5mult>
 8007e74:	9b06      	ldr	r3, [sp, #24]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	4606      	mov	r6, r0
 8007e7a:	f340 8081 	ble.w	8007f80 <_dtoa_r+0x8c8>
 8007e7e:	f04f 0800 	mov.w	r8, #0
 8007e82:	6933      	ldr	r3, [r6, #16]
 8007e84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e88:	6918      	ldr	r0, [r3, #16]
 8007e8a:	f000 fab7 	bl	80083fc <__hi0bits>
 8007e8e:	f1c0 0020 	rsb	r0, r0, #32
 8007e92:	9b05      	ldr	r3, [sp, #20]
 8007e94:	4418      	add	r0, r3
 8007e96:	f010 001f 	ands.w	r0, r0, #31
 8007e9a:	f000 8092 	beq.w	8007fc2 <_dtoa_r+0x90a>
 8007e9e:	f1c0 0320 	rsb	r3, r0, #32
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	f340 808a 	ble.w	8007fbc <_dtoa_r+0x904>
 8007ea8:	f1c0 001c 	rsb	r0, r0, #28
 8007eac:	9b04      	ldr	r3, [sp, #16]
 8007eae:	4403      	add	r3, r0
 8007eb0:	9304      	str	r3, [sp, #16]
 8007eb2:	9b05      	ldr	r3, [sp, #20]
 8007eb4:	4403      	add	r3, r0
 8007eb6:	4405      	add	r5, r0
 8007eb8:	9305      	str	r3, [sp, #20]
 8007eba:	9b04      	ldr	r3, [sp, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	dd07      	ble.n	8007ed0 <_dtoa_r+0x818>
 8007ec0:	ee18 1a10 	vmov	r1, s16
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f000 fc02 	bl	80086d0 <__lshift>
 8007ecc:	ee08 0a10 	vmov	s16, r0
 8007ed0:	9b05      	ldr	r3, [sp, #20]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	dd05      	ble.n	8007ee2 <_dtoa_r+0x82a>
 8007ed6:	4631      	mov	r1, r6
 8007ed8:	461a      	mov	r2, r3
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 fbf8 	bl	80086d0 <__lshift>
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d06e      	beq.n	8007fc6 <_dtoa_r+0x90e>
 8007ee8:	ee18 0a10 	vmov	r0, s16
 8007eec:	4631      	mov	r1, r6
 8007eee:	f000 fc5f 	bl	80087b0 <__mcmp>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	da67      	bge.n	8007fc6 <_dtoa_r+0x90e>
 8007ef6:	9b00      	ldr	r3, [sp, #0]
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	ee18 1a10 	vmov	r1, s16
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	220a      	movs	r2, #10
 8007f02:	2300      	movs	r3, #0
 8007f04:	4620      	mov	r0, r4
 8007f06:	f000 fa33 	bl	8008370 <__multadd>
 8007f0a:	9b08      	ldr	r3, [sp, #32]
 8007f0c:	ee08 0a10 	vmov	s16, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 81b1 	beq.w	8008278 <_dtoa_r+0xbc0>
 8007f16:	2300      	movs	r3, #0
 8007f18:	4639      	mov	r1, r7
 8007f1a:	220a      	movs	r2, #10
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f000 fa27 	bl	8008370 <__multadd>
 8007f22:	9b02      	ldr	r3, [sp, #8]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	4607      	mov	r7, r0
 8007f28:	f300 808e 	bgt.w	8008048 <_dtoa_r+0x990>
 8007f2c:	9b06      	ldr	r3, [sp, #24]
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	dc51      	bgt.n	8007fd6 <_dtoa_r+0x91e>
 8007f32:	e089      	b.n	8008048 <_dtoa_r+0x990>
 8007f34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f3a:	e74b      	b.n	8007dd4 <_dtoa_r+0x71c>
 8007f3c:	9b03      	ldr	r3, [sp, #12]
 8007f3e:	1e5e      	subs	r6, r3, #1
 8007f40:	9b07      	ldr	r3, [sp, #28]
 8007f42:	42b3      	cmp	r3, r6
 8007f44:	bfbf      	itttt	lt
 8007f46:	9b07      	ldrlt	r3, [sp, #28]
 8007f48:	9607      	strlt	r6, [sp, #28]
 8007f4a:	1af2      	sublt	r2, r6, r3
 8007f4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f4e:	bfb6      	itet	lt
 8007f50:	189b      	addlt	r3, r3, r2
 8007f52:	1b9e      	subge	r6, r3, r6
 8007f54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007f56:	9b03      	ldr	r3, [sp, #12]
 8007f58:	bfb8      	it	lt
 8007f5a:	2600      	movlt	r6, #0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	bfb7      	itett	lt
 8007f60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007f64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007f68:	1a9d      	sublt	r5, r3, r2
 8007f6a:	2300      	movlt	r3, #0
 8007f6c:	e734      	b.n	8007dd8 <_dtoa_r+0x720>
 8007f6e:	9e07      	ldr	r6, [sp, #28]
 8007f70:	9d04      	ldr	r5, [sp, #16]
 8007f72:	9f08      	ldr	r7, [sp, #32]
 8007f74:	e73b      	b.n	8007dee <_dtoa_r+0x736>
 8007f76:	9a07      	ldr	r2, [sp, #28]
 8007f78:	e767      	b.n	8007e4a <_dtoa_r+0x792>
 8007f7a:	9b06      	ldr	r3, [sp, #24]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	dc18      	bgt.n	8007fb2 <_dtoa_r+0x8fa>
 8007f80:	f1ba 0f00 	cmp.w	sl, #0
 8007f84:	d115      	bne.n	8007fb2 <_dtoa_r+0x8fa>
 8007f86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f8a:	b993      	cbnz	r3, 8007fb2 <_dtoa_r+0x8fa>
 8007f8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f90:	0d1b      	lsrs	r3, r3, #20
 8007f92:	051b      	lsls	r3, r3, #20
 8007f94:	b183      	cbz	r3, 8007fb8 <_dtoa_r+0x900>
 8007f96:	9b04      	ldr	r3, [sp, #16]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	9304      	str	r3, [sp, #16]
 8007f9c:	9b05      	ldr	r3, [sp, #20]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	9305      	str	r3, [sp, #20]
 8007fa2:	f04f 0801 	mov.w	r8, #1
 8007fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f47f af6a 	bne.w	8007e82 <_dtoa_r+0x7ca>
 8007fae:	2001      	movs	r0, #1
 8007fb0:	e76f      	b.n	8007e92 <_dtoa_r+0x7da>
 8007fb2:	f04f 0800 	mov.w	r8, #0
 8007fb6:	e7f6      	b.n	8007fa6 <_dtoa_r+0x8ee>
 8007fb8:	4698      	mov	r8, r3
 8007fba:	e7f4      	b.n	8007fa6 <_dtoa_r+0x8ee>
 8007fbc:	f43f af7d 	beq.w	8007eba <_dtoa_r+0x802>
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	301c      	adds	r0, #28
 8007fc4:	e772      	b.n	8007eac <_dtoa_r+0x7f4>
 8007fc6:	9b03      	ldr	r3, [sp, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	dc37      	bgt.n	800803c <_dtoa_r+0x984>
 8007fcc:	9b06      	ldr	r3, [sp, #24]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	dd34      	ble.n	800803c <_dtoa_r+0x984>
 8007fd2:	9b03      	ldr	r3, [sp, #12]
 8007fd4:	9302      	str	r3, [sp, #8]
 8007fd6:	9b02      	ldr	r3, [sp, #8]
 8007fd8:	b96b      	cbnz	r3, 8007ff6 <_dtoa_r+0x93e>
 8007fda:	4631      	mov	r1, r6
 8007fdc:	2205      	movs	r2, #5
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f000 f9c6 	bl	8008370 <__multadd>
 8007fe4:	4601      	mov	r1, r0
 8007fe6:	4606      	mov	r6, r0
 8007fe8:	ee18 0a10 	vmov	r0, s16
 8007fec:	f000 fbe0 	bl	80087b0 <__mcmp>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	f73f adbb 	bgt.w	8007b6c <_dtoa_r+0x4b4>
 8007ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff8:	9d01      	ldr	r5, [sp, #4]
 8007ffa:	43db      	mvns	r3, r3
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	f04f 0800 	mov.w	r8, #0
 8008002:	4631      	mov	r1, r6
 8008004:	4620      	mov	r0, r4
 8008006:	f000 f991 	bl	800832c <_Bfree>
 800800a:	2f00      	cmp	r7, #0
 800800c:	f43f aea4 	beq.w	8007d58 <_dtoa_r+0x6a0>
 8008010:	f1b8 0f00 	cmp.w	r8, #0
 8008014:	d005      	beq.n	8008022 <_dtoa_r+0x96a>
 8008016:	45b8      	cmp	r8, r7
 8008018:	d003      	beq.n	8008022 <_dtoa_r+0x96a>
 800801a:	4641      	mov	r1, r8
 800801c:	4620      	mov	r0, r4
 800801e:	f000 f985 	bl	800832c <_Bfree>
 8008022:	4639      	mov	r1, r7
 8008024:	4620      	mov	r0, r4
 8008026:	f000 f981 	bl	800832c <_Bfree>
 800802a:	e695      	b.n	8007d58 <_dtoa_r+0x6a0>
 800802c:	2600      	movs	r6, #0
 800802e:	4637      	mov	r7, r6
 8008030:	e7e1      	b.n	8007ff6 <_dtoa_r+0x93e>
 8008032:	9700      	str	r7, [sp, #0]
 8008034:	4637      	mov	r7, r6
 8008036:	e599      	b.n	8007b6c <_dtoa_r+0x4b4>
 8008038:	40240000 	.word	0x40240000
 800803c:	9b08      	ldr	r3, [sp, #32]
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 80ca 	beq.w	80081d8 <_dtoa_r+0xb20>
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	9302      	str	r3, [sp, #8]
 8008048:	2d00      	cmp	r5, #0
 800804a:	dd05      	ble.n	8008058 <_dtoa_r+0x9a0>
 800804c:	4639      	mov	r1, r7
 800804e:	462a      	mov	r2, r5
 8008050:	4620      	mov	r0, r4
 8008052:	f000 fb3d 	bl	80086d0 <__lshift>
 8008056:	4607      	mov	r7, r0
 8008058:	f1b8 0f00 	cmp.w	r8, #0
 800805c:	d05b      	beq.n	8008116 <_dtoa_r+0xa5e>
 800805e:	6879      	ldr	r1, [r7, #4]
 8008060:	4620      	mov	r0, r4
 8008062:	f000 f923 	bl	80082ac <_Balloc>
 8008066:	4605      	mov	r5, r0
 8008068:	b928      	cbnz	r0, 8008076 <_dtoa_r+0x9be>
 800806a:	4b87      	ldr	r3, [pc, #540]	; (8008288 <_dtoa_r+0xbd0>)
 800806c:	4602      	mov	r2, r0
 800806e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008072:	f7ff bb3b 	b.w	80076ec <_dtoa_r+0x34>
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	3202      	adds	r2, #2
 800807a:	0092      	lsls	r2, r2, #2
 800807c:	f107 010c 	add.w	r1, r7, #12
 8008080:	300c      	adds	r0, #12
 8008082:	f7fe fded 	bl	8006c60 <memcpy>
 8008086:	2201      	movs	r2, #1
 8008088:	4629      	mov	r1, r5
 800808a:	4620      	mov	r0, r4
 800808c:	f000 fb20 	bl	80086d0 <__lshift>
 8008090:	9b01      	ldr	r3, [sp, #4]
 8008092:	f103 0901 	add.w	r9, r3, #1
 8008096:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800809a:	4413      	add	r3, r2
 800809c:	9305      	str	r3, [sp, #20]
 800809e:	f00a 0301 	and.w	r3, sl, #1
 80080a2:	46b8      	mov	r8, r7
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	4607      	mov	r7, r0
 80080a8:	4631      	mov	r1, r6
 80080aa:	ee18 0a10 	vmov	r0, s16
 80080ae:	f7ff fa77 	bl	80075a0 <quorem>
 80080b2:	4641      	mov	r1, r8
 80080b4:	9002      	str	r0, [sp, #8]
 80080b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80080ba:	ee18 0a10 	vmov	r0, s16
 80080be:	f000 fb77 	bl	80087b0 <__mcmp>
 80080c2:	463a      	mov	r2, r7
 80080c4:	9003      	str	r0, [sp, #12]
 80080c6:	4631      	mov	r1, r6
 80080c8:	4620      	mov	r0, r4
 80080ca:	f000 fb8d 	bl	80087e8 <__mdiff>
 80080ce:	68c2      	ldr	r2, [r0, #12]
 80080d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80080d4:	4605      	mov	r5, r0
 80080d6:	bb02      	cbnz	r2, 800811a <_dtoa_r+0xa62>
 80080d8:	4601      	mov	r1, r0
 80080da:	ee18 0a10 	vmov	r0, s16
 80080de:	f000 fb67 	bl	80087b0 <__mcmp>
 80080e2:	4602      	mov	r2, r0
 80080e4:	4629      	mov	r1, r5
 80080e6:	4620      	mov	r0, r4
 80080e8:	9207      	str	r2, [sp, #28]
 80080ea:	f000 f91f 	bl	800832c <_Bfree>
 80080ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80080f2:	ea43 0102 	orr.w	r1, r3, r2
 80080f6:	9b04      	ldr	r3, [sp, #16]
 80080f8:	430b      	orrs	r3, r1
 80080fa:	464d      	mov	r5, r9
 80080fc:	d10f      	bne.n	800811e <_dtoa_r+0xa66>
 80080fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008102:	d02a      	beq.n	800815a <_dtoa_r+0xaa2>
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	dd02      	ble.n	8008110 <_dtoa_r+0xa58>
 800810a:	9b02      	ldr	r3, [sp, #8]
 800810c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008110:	f88b a000 	strb.w	sl, [fp]
 8008114:	e775      	b.n	8008002 <_dtoa_r+0x94a>
 8008116:	4638      	mov	r0, r7
 8008118:	e7ba      	b.n	8008090 <_dtoa_r+0x9d8>
 800811a:	2201      	movs	r2, #1
 800811c:	e7e2      	b.n	80080e4 <_dtoa_r+0xa2c>
 800811e:	9b03      	ldr	r3, [sp, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	db04      	blt.n	800812e <_dtoa_r+0xa76>
 8008124:	9906      	ldr	r1, [sp, #24]
 8008126:	430b      	orrs	r3, r1
 8008128:	9904      	ldr	r1, [sp, #16]
 800812a:	430b      	orrs	r3, r1
 800812c:	d122      	bne.n	8008174 <_dtoa_r+0xabc>
 800812e:	2a00      	cmp	r2, #0
 8008130:	ddee      	ble.n	8008110 <_dtoa_r+0xa58>
 8008132:	ee18 1a10 	vmov	r1, s16
 8008136:	2201      	movs	r2, #1
 8008138:	4620      	mov	r0, r4
 800813a:	f000 fac9 	bl	80086d0 <__lshift>
 800813e:	4631      	mov	r1, r6
 8008140:	ee08 0a10 	vmov	s16, r0
 8008144:	f000 fb34 	bl	80087b0 <__mcmp>
 8008148:	2800      	cmp	r0, #0
 800814a:	dc03      	bgt.n	8008154 <_dtoa_r+0xa9c>
 800814c:	d1e0      	bne.n	8008110 <_dtoa_r+0xa58>
 800814e:	f01a 0f01 	tst.w	sl, #1
 8008152:	d0dd      	beq.n	8008110 <_dtoa_r+0xa58>
 8008154:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008158:	d1d7      	bne.n	800810a <_dtoa_r+0xa52>
 800815a:	2339      	movs	r3, #57	; 0x39
 800815c:	f88b 3000 	strb.w	r3, [fp]
 8008160:	462b      	mov	r3, r5
 8008162:	461d      	mov	r5, r3
 8008164:	3b01      	subs	r3, #1
 8008166:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800816a:	2a39      	cmp	r2, #57	; 0x39
 800816c:	d071      	beq.n	8008252 <_dtoa_r+0xb9a>
 800816e:	3201      	adds	r2, #1
 8008170:	701a      	strb	r2, [r3, #0]
 8008172:	e746      	b.n	8008002 <_dtoa_r+0x94a>
 8008174:	2a00      	cmp	r2, #0
 8008176:	dd07      	ble.n	8008188 <_dtoa_r+0xad0>
 8008178:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800817c:	d0ed      	beq.n	800815a <_dtoa_r+0xaa2>
 800817e:	f10a 0301 	add.w	r3, sl, #1
 8008182:	f88b 3000 	strb.w	r3, [fp]
 8008186:	e73c      	b.n	8008002 <_dtoa_r+0x94a>
 8008188:	9b05      	ldr	r3, [sp, #20]
 800818a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800818e:	4599      	cmp	r9, r3
 8008190:	d047      	beq.n	8008222 <_dtoa_r+0xb6a>
 8008192:	ee18 1a10 	vmov	r1, s16
 8008196:	2300      	movs	r3, #0
 8008198:	220a      	movs	r2, #10
 800819a:	4620      	mov	r0, r4
 800819c:	f000 f8e8 	bl	8008370 <__multadd>
 80081a0:	45b8      	cmp	r8, r7
 80081a2:	ee08 0a10 	vmov	s16, r0
 80081a6:	f04f 0300 	mov.w	r3, #0
 80081aa:	f04f 020a 	mov.w	r2, #10
 80081ae:	4641      	mov	r1, r8
 80081b0:	4620      	mov	r0, r4
 80081b2:	d106      	bne.n	80081c2 <_dtoa_r+0xb0a>
 80081b4:	f000 f8dc 	bl	8008370 <__multadd>
 80081b8:	4680      	mov	r8, r0
 80081ba:	4607      	mov	r7, r0
 80081bc:	f109 0901 	add.w	r9, r9, #1
 80081c0:	e772      	b.n	80080a8 <_dtoa_r+0x9f0>
 80081c2:	f000 f8d5 	bl	8008370 <__multadd>
 80081c6:	4639      	mov	r1, r7
 80081c8:	4680      	mov	r8, r0
 80081ca:	2300      	movs	r3, #0
 80081cc:	220a      	movs	r2, #10
 80081ce:	4620      	mov	r0, r4
 80081d0:	f000 f8ce 	bl	8008370 <__multadd>
 80081d4:	4607      	mov	r7, r0
 80081d6:	e7f1      	b.n	80081bc <_dtoa_r+0xb04>
 80081d8:	9b03      	ldr	r3, [sp, #12]
 80081da:	9302      	str	r3, [sp, #8]
 80081dc:	9d01      	ldr	r5, [sp, #4]
 80081de:	ee18 0a10 	vmov	r0, s16
 80081e2:	4631      	mov	r1, r6
 80081e4:	f7ff f9dc 	bl	80075a0 <quorem>
 80081e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80081ec:	9b01      	ldr	r3, [sp, #4]
 80081ee:	f805 ab01 	strb.w	sl, [r5], #1
 80081f2:	1aea      	subs	r2, r5, r3
 80081f4:	9b02      	ldr	r3, [sp, #8]
 80081f6:	4293      	cmp	r3, r2
 80081f8:	dd09      	ble.n	800820e <_dtoa_r+0xb56>
 80081fa:	ee18 1a10 	vmov	r1, s16
 80081fe:	2300      	movs	r3, #0
 8008200:	220a      	movs	r2, #10
 8008202:	4620      	mov	r0, r4
 8008204:	f000 f8b4 	bl	8008370 <__multadd>
 8008208:	ee08 0a10 	vmov	s16, r0
 800820c:	e7e7      	b.n	80081de <_dtoa_r+0xb26>
 800820e:	9b02      	ldr	r3, [sp, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	bfc8      	it	gt
 8008214:	461d      	movgt	r5, r3
 8008216:	9b01      	ldr	r3, [sp, #4]
 8008218:	bfd8      	it	le
 800821a:	2501      	movle	r5, #1
 800821c:	441d      	add	r5, r3
 800821e:	f04f 0800 	mov.w	r8, #0
 8008222:	ee18 1a10 	vmov	r1, s16
 8008226:	2201      	movs	r2, #1
 8008228:	4620      	mov	r0, r4
 800822a:	f000 fa51 	bl	80086d0 <__lshift>
 800822e:	4631      	mov	r1, r6
 8008230:	ee08 0a10 	vmov	s16, r0
 8008234:	f000 fabc 	bl	80087b0 <__mcmp>
 8008238:	2800      	cmp	r0, #0
 800823a:	dc91      	bgt.n	8008160 <_dtoa_r+0xaa8>
 800823c:	d102      	bne.n	8008244 <_dtoa_r+0xb8c>
 800823e:	f01a 0f01 	tst.w	sl, #1
 8008242:	d18d      	bne.n	8008160 <_dtoa_r+0xaa8>
 8008244:	462b      	mov	r3, r5
 8008246:	461d      	mov	r5, r3
 8008248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800824c:	2a30      	cmp	r2, #48	; 0x30
 800824e:	d0fa      	beq.n	8008246 <_dtoa_r+0xb8e>
 8008250:	e6d7      	b.n	8008002 <_dtoa_r+0x94a>
 8008252:	9a01      	ldr	r2, [sp, #4]
 8008254:	429a      	cmp	r2, r3
 8008256:	d184      	bne.n	8008162 <_dtoa_r+0xaaa>
 8008258:	9b00      	ldr	r3, [sp, #0]
 800825a:	3301      	adds	r3, #1
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	2331      	movs	r3, #49	; 0x31
 8008260:	7013      	strb	r3, [r2, #0]
 8008262:	e6ce      	b.n	8008002 <_dtoa_r+0x94a>
 8008264:	4b09      	ldr	r3, [pc, #36]	; (800828c <_dtoa_r+0xbd4>)
 8008266:	f7ff ba95 	b.w	8007794 <_dtoa_r+0xdc>
 800826a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800826c:	2b00      	cmp	r3, #0
 800826e:	f47f aa6e 	bne.w	800774e <_dtoa_r+0x96>
 8008272:	4b07      	ldr	r3, [pc, #28]	; (8008290 <_dtoa_r+0xbd8>)
 8008274:	f7ff ba8e 	b.w	8007794 <_dtoa_r+0xdc>
 8008278:	9b02      	ldr	r3, [sp, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	dcae      	bgt.n	80081dc <_dtoa_r+0xb24>
 800827e:	9b06      	ldr	r3, [sp, #24]
 8008280:	2b02      	cmp	r3, #2
 8008282:	f73f aea8 	bgt.w	8007fd6 <_dtoa_r+0x91e>
 8008286:	e7a9      	b.n	80081dc <_dtoa_r+0xb24>
 8008288:	08009cd3 	.word	0x08009cd3
 800828c:	08009c30 	.word	0x08009c30
 8008290:	08009c54 	.word	0x08009c54

08008294 <_localeconv_r>:
 8008294:	4800      	ldr	r0, [pc, #0]	; (8008298 <_localeconv_r+0x4>)
 8008296:	4770      	bx	lr
 8008298:	20000164 	.word	0x20000164

0800829c <malloc>:
 800829c:	4b02      	ldr	r3, [pc, #8]	; (80082a8 <malloc+0xc>)
 800829e:	4601      	mov	r1, r0
 80082a0:	6818      	ldr	r0, [r3, #0]
 80082a2:	f000 bc09 	b.w	8008ab8 <_malloc_r>
 80082a6:	bf00      	nop
 80082a8:	20000010 	.word	0x20000010

080082ac <_Balloc>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082b0:	4604      	mov	r4, r0
 80082b2:	460d      	mov	r5, r1
 80082b4:	b976      	cbnz	r6, 80082d4 <_Balloc+0x28>
 80082b6:	2010      	movs	r0, #16
 80082b8:	f7ff fff0 	bl	800829c <malloc>
 80082bc:	4602      	mov	r2, r0
 80082be:	6260      	str	r0, [r4, #36]	; 0x24
 80082c0:	b920      	cbnz	r0, 80082cc <_Balloc+0x20>
 80082c2:	4b18      	ldr	r3, [pc, #96]	; (8008324 <_Balloc+0x78>)
 80082c4:	4818      	ldr	r0, [pc, #96]	; (8008328 <_Balloc+0x7c>)
 80082c6:	2166      	movs	r1, #102	; 0x66
 80082c8:	f000 fdd6 	bl	8008e78 <__assert_func>
 80082cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082d0:	6006      	str	r6, [r0, #0]
 80082d2:	60c6      	str	r6, [r0, #12]
 80082d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082d6:	68f3      	ldr	r3, [r6, #12]
 80082d8:	b183      	cbz	r3, 80082fc <_Balloc+0x50>
 80082da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082e2:	b9b8      	cbnz	r0, 8008314 <_Balloc+0x68>
 80082e4:	2101      	movs	r1, #1
 80082e6:	fa01 f605 	lsl.w	r6, r1, r5
 80082ea:	1d72      	adds	r2, r6, #5
 80082ec:	0092      	lsls	r2, r2, #2
 80082ee:	4620      	mov	r0, r4
 80082f0:	f000 fb60 	bl	80089b4 <_calloc_r>
 80082f4:	b160      	cbz	r0, 8008310 <_Balloc+0x64>
 80082f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082fa:	e00e      	b.n	800831a <_Balloc+0x6e>
 80082fc:	2221      	movs	r2, #33	; 0x21
 80082fe:	2104      	movs	r1, #4
 8008300:	4620      	mov	r0, r4
 8008302:	f000 fb57 	bl	80089b4 <_calloc_r>
 8008306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008308:	60f0      	str	r0, [r6, #12]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1e4      	bne.n	80082da <_Balloc+0x2e>
 8008310:	2000      	movs	r0, #0
 8008312:	bd70      	pop	{r4, r5, r6, pc}
 8008314:	6802      	ldr	r2, [r0, #0]
 8008316:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800831a:	2300      	movs	r3, #0
 800831c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008320:	e7f7      	b.n	8008312 <_Balloc+0x66>
 8008322:	bf00      	nop
 8008324:	08009c61 	.word	0x08009c61
 8008328:	08009ce4 	.word	0x08009ce4

0800832c <_Bfree>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008330:	4605      	mov	r5, r0
 8008332:	460c      	mov	r4, r1
 8008334:	b976      	cbnz	r6, 8008354 <_Bfree+0x28>
 8008336:	2010      	movs	r0, #16
 8008338:	f7ff ffb0 	bl	800829c <malloc>
 800833c:	4602      	mov	r2, r0
 800833e:	6268      	str	r0, [r5, #36]	; 0x24
 8008340:	b920      	cbnz	r0, 800834c <_Bfree+0x20>
 8008342:	4b09      	ldr	r3, [pc, #36]	; (8008368 <_Bfree+0x3c>)
 8008344:	4809      	ldr	r0, [pc, #36]	; (800836c <_Bfree+0x40>)
 8008346:	218a      	movs	r1, #138	; 0x8a
 8008348:	f000 fd96 	bl	8008e78 <__assert_func>
 800834c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008350:	6006      	str	r6, [r0, #0]
 8008352:	60c6      	str	r6, [r0, #12]
 8008354:	b13c      	cbz	r4, 8008366 <_Bfree+0x3a>
 8008356:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008358:	6862      	ldr	r2, [r4, #4]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008360:	6021      	str	r1, [r4, #0]
 8008362:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008366:	bd70      	pop	{r4, r5, r6, pc}
 8008368:	08009c61 	.word	0x08009c61
 800836c:	08009ce4 	.word	0x08009ce4

08008370 <__multadd>:
 8008370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008374:	690d      	ldr	r5, [r1, #16]
 8008376:	4607      	mov	r7, r0
 8008378:	460c      	mov	r4, r1
 800837a:	461e      	mov	r6, r3
 800837c:	f101 0c14 	add.w	ip, r1, #20
 8008380:	2000      	movs	r0, #0
 8008382:	f8dc 3000 	ldr.w	r3, [ip]
 8008386:	b299      	uxth	r1, r3
 8008388:	fb02 6101 	mla	r1, r2, r1, r6
 800838c:	0c1e      	lsrs	r6, r3, #16
 800838e:	0c0b      	lsrs	r3, r1, #16
 8008390:	fb02 3306 	mla	r3, r2, r6, r3
 8008394:	b289      	uxth	r1, r1
 8008396:	3001      	adds	r0, #1
 8008398:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800839c:	4285      	cmp	r5, r0
 800839e:	f84c 1b04 	str.w	r1, [ip], #4
 80083a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083a6:	dcec      	bgt.n	8008382 <__multadd+0x12>
 80083a8:	b30e      	cbz	r6, 80083ee <__multadd+0x7e>
 80083aa:	68a3      	ldr	r3, [r4, #8]
 80083ac:	42ab      	cmp	r3, r5
 80083ae:	dc19      	bgt.n	80083e4 <__multadd+0x74>
 80083b0:	6861      	ldr	r1, [r4, #4]
 80083b2:	4638      	mov	r0, r7
 80083b4:	3101      	adds	r1, #1
 80083b6:	f7ff ff79 	bl	80082ac <_Balloc>
 80083ba:	4680      	mov	r8, r0
 80083bc:	b928      	cbnz	r0, 80083ca <__multadd+0x5a>
 80083be:	4602      	mov	r2, r0
 80083c0:	4b0c      	ldr	r3, [pc, #48]	; (80083f4 <__multadd+0x84>)
 80083c2:	480d      	ldr	r0, [pc, #52]	; (80083f8 <__multadd+0x88>)
 80083c4:	21b5      	movs	r1, #181	; 0xb5
 80083c6:	f000 fd57 	bl	8008e78 <__assert_func>
 80083ca:	6922      	ldr	r2, [r4, #16]
 80083cc:	3202      	adds	r2, #2
 80083ce:	f104 010c 	add.w	r1, r4, #12
 80083d2:	0092      	lsls	r2, r2, #2
 80083d4:	300c      	adds	r0, #12
 80083d6:	f7fe fc43 	bl	8006c60 <memcpy>
 80083da:	4621      	mov	r1, r4
 80083dc:	4638      	mov	r0, r7
 80083de:	f7ff ffa5 	bl	800832c <_Bfree>
 80083e2:	4644      	mov	r4, r8
 80083e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083e8:	3501      	adds	r5, #1
 80083ea:	615e      	str	r6, [r3, #20]
 80083ec:	6125      	str	r5, [r4, #16]
 80083ee:	4620      	mov	r0, r4
 80083f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f4:	08009cd3 	.word	0x08009cd3
 80083f8:	08009ce4 	.word	0x08009ce4

080083fc <__hi0bits>:
 80083fc:	0c03      	lsrs	r3, r0, #16
 80083fe:	041b      	lsls	r3, r3, #16
 8008400:	b9d3      	cbnz	r3, 8008438 <__hi0bits+0x3c>
 8008402:	0400      	lsls	r0, r0, #16
 8008404:	2310      	movs	r3, #16
 8008406:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800840a:	bf04      	itt	eq
 800840c:	0200      	lsleq	r0, r0, #8
 800840e:	3308      	addeq	r3, #8
 8008410:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008414:	bf04      	itt	eq
 8008416:	0100      	lsleq	r0, r0, #4
 8008418:	3304      	addeq	r3, #4
 800841a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800841e:	bf04      	itt	eq
 8008420:	0080      	lsleq	r0, r0, #2
 8008422:	3302      	addeq	r3, #2
 8008424:	2800      	cmp	r0, #0
 8008426:	db05      	blt.n	8008434 <__hi0bits+0x38>
 8008428:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800842c:	f103 0301 	add.w	r3, r3, #1
 8008430:	bf08      	it	eq
 8008432:	2320      	moveq	r3, #32
 8008434:	4618      	mov	r0, r3
 8008436:	4770      	bx	lr
 8008438:	2300      	movs	r3, #0
 800843a:	e7e4      	b.n	8008406 <__hi0bits+0xa>

0800843c <__lo0bits>:
 800843c:	6803      	ldr	r3, [r0, #0]
 800843e:	f013 0207 	ands.w	r2, r3, #7
 8008442:	4601      	mov	r1, r0
 8008444:	d00b      	beq.n	800845e <__lo0bits+0x22>
 8008446:	07da      	lsls	r2, r3, #31
 8008448:	d423      	bmi.n	8008492 <__lo0bits+0x56>
 800844a:	0798      	lsls	r0, r3, #30
 800844c:	bf49      	itett	mi
 800844e:	085b      	lsrmi	r3, r3, #1
 8008450:	089b      	lsrpl	r3, r3, #2
 8008452:	2001      	movmi	r0, #1
 8008454:	600b      	strmi	r3, [r1, #0]
 8008456:	bf5c      	itt	pl
 8008458:	600b      	strpl	r3, [r1, #0]
 800845a:	2002      	movpl	r0, #2
 800845c:	4770      	bx	lr
 800845e:	b298      	uxth	r0, r3
 8008460:	b9a8      	cbnz	r0, 800848e <__lo0bits+0x52>
 8008462:	0c1b      	lsrs	r3, r3, #16
 8008464:	2010      	movs	r0, #16
 8008466:	b2da      	uxtb	r2, r3
 8008468:	b90a      	cbnz	r2, 800846e <__lo0bits+0x32>
 800846a:	3008      	adds	r0, #8
 800846c:	0a1b      	lsrs	r3, r3, #8
 800846e:	071a      	lsls	r2, r3, #28
 8008470:	bf04      	itt	eq
 8008472:	091b      	lsreq	r3, r3, #4
 8008474:	3004      	addeq	r0, #4
 8008476:	079a      	lsls	r2, r3, #30
 8008478:	bf04      	itt	eq
 800847a:	089b      	lsreq	r3, r3, #2
 800847c:	3002      	addeq	r0, #2
 800847e:	07da      	lsls	r2, r3, #31
 8008480:	d403      	bmi.n	800848a <__lo0bits+0x4e>
 8008482:	085b      	lsrs	r3, r3, #1
 8008484:	f100 0001 	add.w	r0, r0, #1
 8008488:	d005      	beq.n	8008496 <__lo0bits+0x5a>
 800848a:	600b      	str	r3, [r1, #0]
 800848c:	4770      	bx	lr
 800848e:	4610      	mov	r0, r2
 8008490:	e7e9      	b.n	8008466 <__lo0bits+0x2a>
 8008492:	2000      	movs	r0, #0
 8008494:	4770      	bx	lr
 8008496:	2020      	movs	r0, #32
 8008498:	4770      	bx	lr
	...

0800849c <__i2b>:
 800849c:	b510      	push	{r4, lr}
 800849e:	460c      	mov	r4, r1
 80084a0:	2101      	movs	r1, #1
 80084a2:	f7ff ff03 	bl	80082ac <_Balloc>
 80084a6:	4602      	mov	r2, r0
 80084a8:	b928      	cbnz	r0, 80084b6 <__i2b+0x1a>
 80084aa:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <__i2b+0x24>)
 80084ac:	4805      	ldr	r0, [pc, #20]	; (80084c4 <__i2b+0x28>)
 80084ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80084b2:	f000 fce1 	bl	8008e78 <__assert_func>
 80084b6:	2301      	movs	r3, #1
 80084b8:	6144      	str	r4, [r0, #20]
 80084ba:	6103      	str	r3, [r0, #16]
 80084bc:	bd10      	pop	{r4, pc}
 80084be:	bf00      	nop
 80084c0:	08009cd3 	.word	0x08009cd3
 80084c4:	08009ce4 	.word	0x08009ce4

080084c8 <__multiply>:
 80084c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	4691      	mov	r9, r2
 80084ce:	690a      	ldr	r2, [r1, #16]
 80084d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	bfb8      	it	lt
 80084d8:	460b      	movlt	r3, r1
 80084da:	460c      	mov	r4, r1
 80084dc:	bfbc      	itt	lt
 80084de:	464c      	movlt	r4, r9
 80084e0:	4699      	movlt	r9, r3
 80084e2:	6927      	ldr	r7, [r4, #16]
 80084e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80084e8:	68a3      	ldr	r3, [r4, #8]
 80084ea:	6861      	ldr	r1, [r4, #4]
 80084ec:	eb07 060a 	add.w	r6, r7, sl
 80084f0:	42b3      	cmp	r3, r6
 80084f2:	b085      	sub	sp, #20
 80084f4:	bfb8      	it	lt
 80084f6:	3101      	addlt	r1, #1
 80084f8:	f7ff fed8 	bl	80082ac <_Balloc>
 80084fc:	b930      	cbnz	r0, 800850c <__multiply+0x44>
 80084fe:	4602      	mov	r2, r0
 8008500:	4b44      	ldr	r3, [pc, #272]	; (8008614 <__multiply+0x14c>)
 8008502:	4845      	ldr	r0, [pc, #276]	; (8008618 <__multiply+0x150>)
 8008504:	f240 115d 	movw	r1, #349	; 0x15d
 8008508:	f000 fcb6 	bl	8008e78 <__assert_func>
 800850c:	f100 0514 	add.w	r5, r0, #20
 8008510:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008514:	462b      	mov	r3, r5
 8008516:	2200      	movs	r2, #0
 8008518:	4543      	cmp	r3, r8
 800851a:	d321      	bcc.n	8008560 <__multiply+0x98>
 800851c:	f104 0314 	add.w	r3, r4, #20
 8008520:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008524:	f109 0314 	add.w	r3, r9, #20
 8008528:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800852c:	9202      	str	r2, [sp, #8]
 800852e:	1b3a      	subs	r2, r7, r4
 8008530:	3a15      	subs	r2, #21
 8008532:	f022 0203 	bic.w	r2, r2, #3
 8008536:	3204      	adds	r2, #4
 8008538:	f104 0115 	add.w	r1, r4, #21
 800853c:	428f      	cmp	r7, r1
 800853e:	bf38      	it	cc
 8008540:	2204      	movcc	r2, #4
 8008542:	9201      	str	r2, [sp, #4]
 8008544:	9a02      	ldr	r2, [sp, #8]
 8008546:	9303      	str	r3, [sp, #12]
 8008548:	429a      	cmp	r2, r3
 800854a:	d80c      	bhi.n	8008566 <__multiply+0x9e>
 800854c:	2e00      	cmp	r6, #0
 800854e:	dd03      	ble.n	8008558 <__multiply+0x90>
 8008550:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008554:	2b00      	cmp	r3, #0
 8008556:	d05a      	beq.n	800860e <__multiply+0x146>
 8008558:	6106      	str	r6, [r0, #16]
 800855a:	b005      	add	sp, #20
 800855c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008560:	f843 2b04 	str.w	r2, [r3], #4
 8008564:	e7d8      	b.n	8008518 <__multiply+0x50>
 8008566:	f8b3 a000 	ldrh.w	sl, [r3]
 800856a:	f1ba 0f00 	cmp.w	sl, #0
 800856e:	d024      	beq.n	80085ba <__multiply+0xf2>
 8008570:	f104 0e14 	add.w	lr, r4, #20
 8008574:	46a9      	mov	r9, r5
 8008576:	f04f 0c00 	mov.w	ip, #0
 800857a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800857e:	f8d9 1000 	ldr.w	r1, [r9]
 8008582:	fa1f fb82 	uxth.w	fp, r2
 8008586:	b289      	uxth	r1, r1
 8008588:	fb0a 110b 	mla	r1, sl, fp, r1
 800858c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008590:	f8d9 2000 	ldr.w	r2, [r9]
 8008594:	4461      	add	r1, ip
 8008596:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800859a:	fb0a c20b 	mla	r2, sl, fp, ip
 800859e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085a2:	b289      	uxth	r1, r1
 80085a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085a8:	4577      	cmp	r7, lr
 80085aa:	f849 1b04 	str.w	r1, [r9], #4
 80085ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085b2:	d8e2      	bhi.n	800857a <__multiply+0xb2>
 80085b4:	9a01      	ldr	r2, [sp, #4]
 80085b6:	f845 c002 	str.w	ip, [r5, r2]
 80085ba:	9a03      	ldr	r2, [sp, #12]
 80085bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80085c0:	3304      	adds	r3, #4
 80085c2:	f1b9 0f00 	cmp.w	r9, #0
 80085c6:	d020      	beq.n	800860a <__multiply+0x142>
 80085c8:	6829      	ldr	r1, [r5, #0]
 80085ca:	f104 0c14 	add.w	ip, r4, #20
 80085ce:	46ae      	mov	lr, r5
 80085d0:	f04f 0a00 	mov.w	sl, #0
 80085d4:	f8bc b000 	ldrh.w	fp, [ip]
 80085d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80085dc:	fb09 220b 	mla	r2, r9, fp, r2
 80085e0:	4492      	add	sl, r2
 80085e2:	b289      	uxth	r1, r1
 80085e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80085e8:	f84e 1b04 	str.w	r1, [lr], #4
 80085ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80085f0:	f8be 1000 	ldrh.w	r1, [lr]
 80085f4:	0c12      	lsrs	r2, r2, #16
 80085f6:	fb09 1102 	mla	r1, r9, r2, r1
 80085fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80085fe:	4567      	cmp	r7, ip
 8008600:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008604:	d8e6      	bhi.n	80085d4 <__multiply+0x10c>
 8008606:	9a01      	ldr	r2, [sp, #4]
 8008608:	50a9      	str	r1, [r5, r2]
 800860a:	3504      	adds	r5, #4
 800860c:	e79a      	b.n	8008544 <__multiply+0x7c>
 800860e:	3e01      	subs	r6, #1
 8008610:	e79c      	b.n	800854c <__multiply+0x84>
 8008612:	bf00      	nop
 8008614:	08009cd3 	.word	0x08009cd3
 8008618:	08009ce4 	.word	0x08009ce4

0800861c <__pow5mult>:
 800861c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008620:	4615      	mov	r5, r2
 8008622:	f012 0203 	ands.w	r2, r2, #3
 8008626:	4606      	mov	r6, r0
 8008628:	460f      	mov	r7, r1
 800862a:	d007      	beq.n	800863c <__pow5mult+0x20>
 800862c:	4c25      	ldr	r4, [pc, #148]	; (80086c4 <__pow5mult+0xa8>)
 800862e:	3a01      	subs	r2, #1
 8008630:	2300      	movs	r3, #0
 8008632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008636:	f7ff fe9b 	bl	8008370 <__multadd>
 800863a:	4607      	mov	r7, r0
 800863c:	10ad      	asrs	r5, r5, #2
 800863e:	d03d      	beq.n	80086bc <__pow5mult+0xa0>
 8008640:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008642:	b97c      	cbnz	r4, 8008664 <__pow5mult+0x48>
 8008644:	2010      	movs	r0, #16
 8008646:	f7ff fe29 	bl	800829c <malloc>
 800864a:	4602      	mov	r2, r0
 800864c:	6270      	str	r0, [r6, #36]	; 0x24
 800864e:	b928      	cbnz	r0, 800865c <__pow5mult+0x40>
 8008650:	4b1d      	ldr	r3, [pc, #116]	; (80086c8 <__pow5mult+0xac>)
 8008652:	481e      	ldr	r0, [pc, #120]	; (80086cc <__pow5mult+0xb0>)
 8008654:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008658:	f000 fc0e 	bl	8008e78 <__assert_func>
 800865c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008660:	6004      	str	r4, [r0, #0]
 8008662:	60c4      	str	r4, [r0, #12]
 8008664:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008668:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800866c:	b94c      	cbnz	r4, 8008682 <__pow5mult+0x66>
 800866e:	f240 2171 	movw	r1, #625	; 0x271
 8008672:	4630      	mov	r0, r6
 8008674:	f7ff ff12 	bl	800849c <__i2b>
 8008678:	2300      	movs	r3, #0
 800867a:	f8c8 0008 	str.w	r0, [r8, #8]
 800867e:	4604      	mov	r4, r0
 8008680:	6003      	str	r3, [r0, #0]
 8008682:	f04f 0900 	mov.w	r9, #0
 8008686:	07eb      	lsls	r3, r5, #31
 8008688:	d50a      	bpl.n	80086a0 <__pow5mult+0x84>
 800868a:	4639      	mov	r1, r7
 800868c:	4622      	mov	r2, r4
 800868e:	4630      	mov	r0, r6
 8008690:	f7ff ff1a 	bl	80084c8 <__multiply>
 8008694:	4639      	mov	r1, r7
 8008696:	4680      	mov	r8, r0
 8008698:	4630      	mov	r0, r6
 800869a:	f7ff fe47 	bl	800832c <_Bfree>
 800869e:	4647      	mov	r7, r8
 80086a0:	106d      	asrs	r5, r5, #1
 80086a2:	d00b      	beq.n	80086bc <__pow5mult+0xa0>
 80086a4:	6820      	ldr	r0, [r4, #0]
 80086a6:	b938      	cbnz	r0, 80086b8 <__pow5mult+0x9c>
 80086a8:	4622      	mov	r2, r4
 80086aa:	4621      	mov	r1, r4
 80086ac:	4630      	mov	r0, r6
 80086ae:	f7ff ff0b 	bl	80084c8 <__multiply>
 80086b2:	6020      	str	r0, [r4, #0]
 80086b4:	f8c0 9000 	str.w	r9, [r0]
 80086b8:	4604      	mov	r4, r0
 80086ba:	e7e4      	b.n	8008686 <__pow5mult+0x6a>
 80086bc:	4638      	mov	r0, r7
 80086be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086c2:	bf00      	nop
 80086c4:	08009e30 	.word	0x08009e30
 80086c8:	08009c61 	.word	0x08009c61
 80086cc:	08009ce4 	.word	0x08009ce4

080086d0 <__lshift>:
 80086d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d4:	460c      	mov	r4, r1
 80086d6:	6849      	ldr	r1, [r1, #4]
 80086d8:	6923      	ldr	r3, [r4, #16]
 80086da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086de:	68a3      	ldr	r3, [r4, #8]
 80086e0:	4607      	mov	r7, r0
 80086e2:	4691      	mov	r9, r2
 80086e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086e8:	f108 0601 	add.w	r6, r8, #1
 80086ec:	42b3      	cmp	r3, r6
 80086ee:	db0b      	blt.n	8008708 <__lshift+0x38>
 80086f0:	4638      	mov	r0, r7
 80086f2:	f7ff fddb 	bl	80082ac <_Balloc>
 80086f6:	4605      	mov	r5, r0
 80086f8:	b948      	cbnz	r0, 800870e <__lshift+0x3e>
 80086fa:	4602      	mov	r2, r0
 80086fc:	4b2a      	ldr	r3, [pc, #168]	; (80087a8 <__lshift+0xd8>)
 80086fe:	482b      	ldr	r0, [pc, #172]	; (80087ac <__lshift+0xdc>)
 8008700:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008704:	f000 fbb8 	bl	8008e78 <__assert_func>
 8008708:	3101      	adds	r1, #1
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	e7ee      	b.n	80086ec <__lshift+0x1c>
 800870e:	2300      	movs	r3, #0
 8008710:	f100 0114 	add.w	r1, r0, #20
 8008714:	f100 0210 	add.w	r2, r0, #16
 8008718:	4618      	mov	r0, r3
 800871a:	4553      	cmp	r3, sl
 800871c:	db37      	blt.n	800878e <__lshift+0xbe>
 800871e:	6920      	ldr	r0, [r4, #16]
 8008720:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008724:	f104 0314 	add.w	r3, r4, #20
 8008728:	f019 091f 	ands.w	r9, r9, #31
 800872c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008730:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008734:	d02f      	beq.n	8008796 <__lshift+0xc6>
 8008736:	f1c9 0e20 	rsb	lr, r9, #32
 800873a:	468a      	mov	sl, r1
 800873c:	f04f 0c00 	mov.w	ip, #0
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	fa02 f209 	lsl.w	r2, r2, r9
 8008746:	ea42 020c 	orr.w	r2, r2, ip
 800874a:	f84a 2b04 	str.w	r2, [sl], #4
 800874e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008752:	4298      	cmp	r0, r3
 8008754:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008758:	d8f2      	bhi.n	8008740 <__lshift+0x70>
 800875a:	1b03      	subs	r3, r0, r4
 800875c:	3b15      	subs	r3, #21
 800875e:	f023 0303 	bic.w	r3, r3, #3
 8008762:	3304      	adds	r3, #4
 8008764:	f104 0215 	add.w	r2, r4, #21
 8008768:	4290      	cmp	r0, r2
 800876a:	bf38      	it	cc
 800876c:	2304      	movcc	r3, #4
 800876e:	f841 c003 	str.w	ip, [r1, r3]
 8008772:	f1bc 0f00 	cmp.w	ip, #0
 8008776:	d001      	beq.n	800877c <__lshift+0xac>
 8008778:	f108 0602 	add.w	r6, r8, #2
 800877c:	3e01      	subs	r6, #1
 800877e:	4638      	mov	r0, r7
 8008780:	612e      	str	r6, [r5, #16]
 8008782:	4621      	mov	r1, r4
 8008784:	f7ff fdd2 	bl	800832c <_Bfree>
 8008788:	4628      	mov	r0, r5
 800878a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008792:	3301      	adds	r3, #1
 8008794:	e7c1      	b.n	800871a <__lshift+0x4a>
 8008796:	3904      	subs	r1, #4
 8008798:	f853 2b04 	ldr.w	r2, [r3], #4
 800879c:	f841 2f04 	str.w	r2, [r1, #4]!
 80087a0:	4298      	cmp	r0, r3
 80087a2:	d8f9      	bhi.n	8008798 <__lshift+0xc8>
 80087a4:	e7ea      	b.n	800877c <__lshift+0xac>
 80087a6:	bf00      	nop
 80087a8:	08009cd3 	.word	0x08009cd3
 80087ac:	08009ce4 	.word	0x08009ce4

080087b0 <__mcmp>:
 80087b0:	b530      	push	{r4, r5, lr}
 80087b2:	6902      	ldr	r2, [r0, #16]
 80087b4:	690c      	ldr	r4, [r1, #16]
 80087b6:	1b12      	subs	r2, r2, r4
 80087b8:	d10e      	bne.n	80087d8 <__mcmp+0x28>
 80087ba:	f100 0314 	add.w	r3, r0, #20
 80087be:	3114      	adds	r1, #20
 80087c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80087c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80087c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80087cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80087d0:	42a5      	cmp	r5, r4
 80087d2:	d003      	beq.n	80087dc <__mcmp+0x2c>
 80087d4:	d305      	bcc.n	80087e2 <__mcmp+0x32>
 80087d6:	2201      	movs	r2, #1
 80087d8:	4610      	mov	r0, r2
 80087da:	bd30      	pop	{r4, r5, pc}
 80087dc:	4283      	cmp	r3, r0
 80087de:	d3f3      	bcc.n	80087c8 <__mcmp+0x18>
 80087e0:	e7fa      	b.n	80087d8 <__mcmp+0x28>
 80087e2:	f04f 32ff 	mov.w	r2, #4294967295
 80087e6:	e7f7      	b.n	80087d8 <__mcmp+0x28>

080087e8 <__mdiff>:
 80087e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	460c      	mov	r4, r1
 80087ee:	4606      	mov	r6, r0
 80087f0:	4611      	mov	r1, r2
 80087f2:	4620      	mov	r0, r4
 80087f4:	4690      	mov	r8, r2
 80087f6:	f7ff ffdb 	bl	80087b0 <__mcmp>
 80087fa:	1e05      	subs	r5, r0, #0
 80087fc:	d110      	bne.n	8008820 <__mdiff+0x38>
 80087fe:	4629      	mov	r1, r5
 8008800:	4630      	mov	r0, r6
 8008802:	f7ff fd53 	bl	80082ac <_Balloc>
 8008806:	b930      	cbnz	r0, 8008816 <__mdiff+0x2e>
 8008808:	4b3a      	ldr	r3, [pc, #232]	; (80088f4 <__mdiff+0x10c>)
 800880a:	4602      	mov	r2, r0
 800880c:	f240 2132 	movw	r1, #562	; 0x232
 8008810:	4839      	ldr	r0, [pc, #228]	; (80088f8 <__mdiff+0x110>)
 8008812:	f000 fb31 	bl	8008e78 <__assert_func>
 8008816:	2301      	movs	r3, #1
 8008818:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800881c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008820:	bfa4      	itt	ge
 8008822:	4643      	movge	r3, r8
 8008824:	46a0      	movge	r8, r4
 8008826:	4630      	mov	r0, r6
 8008828:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800882c:	bfa6      	itte	ge
 800882e:	461c      	movge	r4, r3
 8008830:	2500      	movge	r5, #0
 8008832:	2501      	movlt	r5, #1
 8008834:	f7ff fd3a 	bl	80082ac <_Balloc>
 8008838:	b920      	cbnz	r0, 8008844 <__mdiff+0x5c>
 800883a:	4b2e      	ldr	r3, [pc, #184]	; (80088f4 <__mdiff+0x10c>)
 800883c:	4602      	mov	r2, r0
 800883e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008842:	e7e5      	b.n	8008810 <__mdiff+0x28>
 8008844:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008848:	6926      	ldr	r6, [r4, #16]
 800884a:	60c5      	str	r5, [r0, #12]
 800884c:	f104 0914 	add.w	r9, r4, #20
 8008850:	f108 0514 	add.w	r5, r8, #20
 8008854:	f100 0e14 	add.w	lr, r0, #20
 8008858:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800885c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008860:	f108 0210 	add.w	r2, r8, #16
 8008864:	46f2      	mov	sl, lr
 8008866:	2100      	movs	r1, #0
 8008868:	f859 3b04 	ldr.w	r3, [r9], #4
 800886c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008870:	fa1f f883 	uxth.w	r8, r3
 8008874:	fa11 f18b 	uxtah	r1, r1, fp
 8008878:	0c1b      	lsrs	r3, r3, #16
 800887a:	eba1 0808 	sub.w	r8, r1, r8
 800887e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008882:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008886:	fa1f f888 	uxth.w	r8, r8
 800888a:	1419      	asrs	r1, r3, #16
 800888c:	454e      	cmp	r6, r9
 800888e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008892:	f84a 3b04 	str.w	r3, [sl], #4
 8008896:	d8e7      	bhi.n	8008868 <__mdiff+0x80>
 8008898:	1b33      	subs	r3, r6, r4
 800889a:	3b15      	subs	r3, #21
 800889c:	f023 0303 	bic.w	r3, r3, #3
 80088a0:	3304      	adds	r3, #4
 80088a2:	3415      	adds	r4, #21
 80088a4:	42a6      	cmp	r6, r4
 80088a6:	bf38      	it	cc
 80088a8:	2304      	movcc	r3, #4
 80088aa:	441d      	add	r5, r3
 80088ac:	4473      	add	r3, lr
 80088ae:	469e      	mov	lr, r3
 80088b0:	462e      	mov	r6, r5
 80088b2:	4566      	cmp	r6, ip
 80088b4:	d30e      	bcc.n	80088d4 <__mdiff+0xec>
 80088b6:	f10c 0203 	add.w	r2, ip, #3
 80088ba:	1b52      	subs	r2, r2, r5
 80088bc:	f022 0203 	bic.w	r2, r2, #3
 80088c0:	3d03      	subs	r5, #3
 80088c2:	45ac      	cmp	ip, r5
 80088c4:	bf38      	it	cc
 80088c6:	2200      	movcc	r2, #0
 80088c8:	441a      	add	r2, r3
 80088ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80088ce:	b17b      	cbz	r3, 80088f0 <__mdiff+0x108>
 80088d0:	6107      	str	r7, [r0, #16]
 80088d2:	e7a3      	b.n	800881c <__mdiff+0x34>
 80088d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80088d8:	fa11 f288 	uxtah	r2, r1, r8
 80088dc:	1414      	asrs	r4, r2, #16
 80088de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80088e2:	b292      	uxth	r2, r2
 80088e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80088e8:	f84e 2b04 	str.w	r2, [lr], #4
 80088ec:	1421      	asrs	r1, r4, #16
 80088ee:	e7e0      	b.n	80088b2 <__mdiff+0xca>
 80088f0:	3f01      	subs	r7, #1
 80088f2:	e7ea      	b.n	80088ca <__mdiff+0xe2>
 80088f4:	08009cd3 	.word	0x08009cd3
 80088f8:	08009ce4 	.word	0x08009ce4

080088fc <__d2b>:
 80088fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008900:	4689      	mov	r9, r1
 8008902:	2101      	movs	r1, #1
 8008904:	ec57 6b10 	vmov	r6, r7, d0
 8008908:	4690      	mov	r8, r2
 800890a:	f7ff fccf 	bl	80082ac <_Balloc>
 800890e:	4604      	mov	r4, r0
 8008910:	b930      	cbnz	r0, 8008920 <__d2b+0x24>
 8008912:	4602      	mov	r2, r0
 8008914:	4b25      	ldr	r3, [pc, #148]	; (80089ac <__d2b+0xb0>)
 8008916:	4826      	ldr	r0, [pc, #152]	; (80089b0 <__d2b+0xb4>)
 8008918:	f240 310a 	movw	r1, #778	; 0x30a
 800891c:	f000 faac 	bl	8008e78 <__assert_func>
 8008920:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008924:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008928:	bb35      	cbnz	r5, 8008978 <__d2b+0x7c>
 800892a:	2e00      	cmp	r6, #0
 800892c:	9301      	str	r3, [sp, #4]
 800892e:	d028      	beq.n	8008982 <__d2b+0x86>
 8008930:	4668      	mov	r0, sp
 8008932:	9600      	str	r6, [sp, #0]
 8008934:	f7ff fd82 	bl	800843c <__lo0bits>
 8008938:	9900      	ldr	r1, [sp, #0]
 800893a:	b300      	cbz	r0, 800897e <__d2b+0x82>
 800893c:	9a01      	ldr	r2, [sp, #4]
 800893e:	f1c0 0320 	rsb	r3, r0, #32
 8008942:	fa02 f303 	lsl.w	r3, r2, r3
 8008946:	430b      	orrs	r3, r1
 8008948:	40c2      	lsrs	r2, r0
 800894a:	6163      	str	r3, [r4, #20]
 800894c:	9201      	str	r2, [sp, #4]
 800894e:	9b01      	ldr	r3, [sp, #4]
 8008950:	61a3      	str	r3, [r4, #24]
 8008952:	2b00      	cmp	r3, #0
 8008954:	bf14      	ite	ne
 8008956:	2202      	movne	r2, #2
 8008958:	2201      	moveq	r2, #1
 800895a:	6122      	str	r2, [r4, #16]
 800895c:	b1d5      	cbz	r5, 8008994 <__d2b+0x98>
 800895e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008962:	4405      	add	r5, r0
 8008964:	f8c9 5000 	str.w	r5, [r9]
 8008968:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800896c:	f8c8 0000 	str.w	r0, [r8]
 8008970:	4620      	mov	r0, r4
 8008972:	b003      	add	sp, #12
 8008974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008978:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800897c:	e7d5      	b.n	800892a <__d2b+0x2e>
 800897e:	6161      	str	r1, [r4, #20]
 8008980:	e7e5      	b.n	800894e <__d2b+0x52>
 8008982:	a801      	add	r0, sp, #4
 8008984:	f7ff fd5a 	bl	800843c <__lo0bits>
 8008988:	9b01      	ldr	r3, [sp, #4]
 800898a:	6163      	str	r3, [r4, #20]
 800898c:	2201      	movs	r2, #1
 800898e:	6122      	str	r2, [r4, #16]
 8008990:	3020      	adds	r0, #32
 8008992:	e7e3      	b.n	800895c <__d2b+0x60>
 8008994:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008998:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800899c:	f8c9 0000 	str.w	r0, [r9]
 80089a0:	6918      	ldr	r0, [r3, #16]
 80089a2:	f7ff fd2b 	bl	80083fc <__hi0bits>
 80089a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089aa:	e7df      	b.n	800896c <__d2b+0x70>
 80089ac:	08009cd3 	.word	0x08009cd3
 80089b0:	08009ce4 	.word	0x08009ce4

080089b4 <_calloc_r>:
 80089b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089b6:	fba1 2402 	umull	r2, r4, r1, r2
 80089ba:	b94c      	cbnz	r4, 80089d0 <_calloc_r+0x1c>
 80089bc:	4611      	mov	r1, r2
 80089be:	9201      	str	r2, [sp, #4]
 80089c0:	f000 f87a 	bl	8008ab8 <_malloc_r>
 80089c4:	9a01      	ldr	r2, [sp, #4]
 80089c6:	4605      	mov	r5, r0
 80089c8:	b930      	cbnz	r0, 80089d8 <_calloc_r+0x24>
 80089ca:	4628      	mov	r0, r5
 80089cc:	b003      	add	sp, #12
 80089ce:	bd30      	pop	{r4, r5, pc}
 80089d0:	220c      	movs	r2, #12
 80089d2:	6002      	str	r2, [r0, #0]
 80089d4:	2500      	movs	r5, #0
 80089d6:	e7f8      	b.n	80089ca <_calloc_r+0x16>
 80089d8:	4621      	mov	r1, r4
 80089da:	f7fe f94f 	bl	8006c7c <memset>
 80089de:	e7f4      	b.n	80089ca <_calloc_r+0x16>

080089e0 <_free_r>:
 80089e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089e2:	2900      	cmp	r1, #0
 80089e4:	d044      	beq.n	8008a70 <_free_r+0x90>
 80089e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ea:	9001      	str	r0, [sp, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f1a1 0404 	sub.w	r4, r1, #4
 80089f2:	bfb8      	it	lt
 80089f4:	18e4      	addlt	r4, r4, r3
 80089f6:	f000 fa9b 	bl	8008f30 <__malloc_lock>
 80089fa:	4a1e      	ldr	r2, [pc, #120]	; (8008a74 <_free_r+0x94>)
 80089fc:	9801      	ldr	r0, [sp, #4]
 80089fe:	6813      	ldr	r3, [r2, #0]
 8008a00:	b933      	cbnz	r3, 8008a10 <_free_r+0x30>
 8008a02:	6063      	str	r3, [r4, #4]
 8008a04:	6014      	str	r4, [r2, #0]
 8008a06:	b003      	add	sp, #12
 8008a08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a0c:	f000 ba96 	b.w	8008f3c <__malloc_unlock>
 8008a10:	42a3      	cmp	r3, r4
 8008a12:	d908      	bls.n	8008a26 <_free_r+0x46>
 8008a14:	6825      	ldr	r5, [r4, #0]
 8008a16:	1961      	adds	r1, r4, r5
 8008a18:	428b      	cmp	r3, r1
 8008a1a:	bf01      	itttt	eq
 8008a1c:	6819      	ldreq	r1, [r3, #0]
 8008a1e:	685b      	ldreq	r3, [r3, #4]
 8008a20:	1949      	addeq	r1, r1, r5
 8008a22:	6021      	streq	r1, [r4, #0]
 8008a24:	e7ed      	b.n	8008a02 <_free_r+0x22>
 8008a26:	461a      	mov	r2, r3
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	b10b      	cbz	r3, 8008a30 <_free_r+0x50>
 8008a2c:	42a3      	cmp	r3, r4
 8008a2e:	d9fa      	bls.n	8008a26 <_free_r+0x46>
 8008a30:	6811      	ldr	r1, [r2, #0]
 8008a32:	1855      	adds	r5, r2, r1
 8008a34:	42a5      	cmp	r5, r4
 8008a36:	d10b      	bne.n	8008a50 <_free_r+0x70>
 8008a38:	6824      	ldr	r4, [r4, #0]
 8008a3a:	4421      	add	r1, r4
 8008a3c:	1854      	adds	r4, r2, r1
 8008a3e:	42a3      	cmp	r3, r4
 8008a40:	6011      	str	r1, [r2, #0]
 8008a42:	d1e0      	bne.n	8008a06 <_free_r+0x26>
 8008a44:	681c      	ldr	r4, [r3, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	6053      	str	r3, [r2, #4]
 8008a4a:	4421      	add	r1, r4
 8008a4c:	6011      	str	r1, [r2, #0]
 8008a4e:	e7da      	b.n	8008a06 <_free_r+0x26>
 8008a50:	d902      	bls.n	8008a58 <_free_r+0x78>
 8008a52:	230c      	movs	r3, #12
 8008a54:	6003      	str	r3, [r0, #0]
 8008a56:	e7d6      	b.n	8008a06 <_free_r+0x26>
 8008a58:	6825      	ldr	r5, [r4, #0]
 8008a5a:	1961      	adds	r1, r4, r5
 8008a5c:	428b      	cmp	r3, r1
 8008a5e:	bf04      	itt	eq
 8008a60:	6819      	ldreq	r1, [r3, #0]
 8008a62:	685b      	ldreq	r3, [r3, #4]
 8008a64:	6063      	str	r3, [r4, #4]
 8008a66:	bf04      	itt	eq
 8008a68:	1949      	addeq	r1, r1, r5
 8008a6a:	6021      	streq	r1, [r4, #0]
 8008a6c:	6054      	str	r4, [r2, #4]
 8008a6e:	e7ca      	b.n	8008a06 <_free_r+0x26>
 8008a70:	b003      	add	sp, #12
 8008a72:	bd30      	pop	{r4, r5, pc}
 8008a74:	20004b84 	.word	0x20004b84

08008a78 <sbrk_aligned>:
 8008a78:	b570      	push	{r4, r5, r6, lr}
 8008a7a:	4e0e      	ldr	r6, [pc, #56]	; (8008ab4 <sbrk_aligned+0x3c>)
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	6831      	ldr	r1, [r6, #0]
 8008a80:	4605      	mov	r5, r0
 8008a82:	b911      	cbnz	r1, 8008a8a <sbrk_aligned+0x12>
 8008a84:	f000 f9e8 	bl	8008e58 <_sbrk_r>
 8008a88:	6030      	str	r0, [r6, #0]
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	f000 f9e3 	bl	8008e58 <_sbrk_r>
 8008a92:	1c43      	adds	r3, r0, #1
 8008a94:	d00a      	beq.n	8008aac <sbrk_aligned+0x34>
 8008a96:	1cc4      	adds	r4, r0, #3
 8008a98:	f024 0403 	bic.w	r4, r4, #3
 8008a9c:	42a0      	cmp	r0, r4
 8008a9e:	d007      	beq.n	8008ab0 <sbrk_aligned+0x38>
 8008aa0:	1a21      	subs	r1, r4, r0
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	f000 f9d8 	bl	8008e58 <_sbrk_r>
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	d101      	bne.n	8008ab0 <sbrk_aligned+0x38>
 8008aac:	f04f 34ff 	mov.w	r4, #4294967295
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}
 8008ab4:	20004b88 	.word	0x20004b88

08008ab8 <_malloc_r>:
 8008ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008abc:	1ccd      	adds	r5, r1, #3
 8008abe:	f025 0503 	bic.w	r5, r5, #3
 8008ac2:	3508      	adds	r5, #8
 8008ac4:	2d0c      	cmp	r5, #12
 8008ac6:	bf38      	it	cc
 8008ac8:	250c      	movcc	r5, #12
 8008aca:	2d00      	cmp	r5, #0
 8008acc:	4607      	mov	r7, r0
 8008ace:	db01      	blt.n	8008ad4 <_malloc_r+0x1c>
 8008ad0:	42a9      	cmp	r1, r5
 8008ad2:	d905      	bls.n	8008ae0 <_malloc_r+0x28>
 8008ad4:	230c      	movs	r3, #12
 8008ad6:	603b      	str	r3, [r7, #0]
 8008ad8:	2600      	movs	r6, #0
 8008ada:	4630      	mov	r0, r6
 8008adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae0:	4e2e      	ldr	r6, [pc, #184]	; (8008b9c <_malloc_r+0xe4>)
 8008ae2:	f000 fa25 	bl	8008f30 <__malloc_lock>
 8008ae6:	6833      	ldr	r3, [r6, #0]
 8008ae8:	461c      	mov	r4, r3
 8008aea:	bb34      	cbnz	r4, 8008b3a <_malloc_r+0x82>
 8008aec:	4629      	mov	r1, r5
 8008aee:	4638      	mov	r0, r7
 8008af0:	f7ff ffc2 	bl	8008a78 <sbrk_aligned>
 8008af4:	1c43      	adds	r3, r0, #1
 8008af6:	4604      	mov	r4, r0
 8008af8:	d14d      	bne.n	8008b96 <_malloc_r+0xde>
 8008afa:	6834      	ldr	r4, [r6, #0]
 8008afc:	4626      	mov	r6, r4
 8008afe:	2e00      	cmp	r6, #0
 8008b00:	d140      	bne.n	8008b84 <_malloc_r+0xcc>
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	4631      	mov	r1, r6
 8008b06:	4638      	mov	r0, r7
 8008b08:	eb04 0803 	add.w	r8, r4, r3
 8008b0c:	f000 f9a4 	bl	8008e58 <_sbrk_r>
 8008b10:	4580      	cmp	r8, r0
 8008b12:	d13a      	bne.n	8008b8a <_malloc_r+0xd2>
 8008b14:	6821      	ldr	r1, [r4, #0]
 8008b16:	3503      	adds	r5, #3
 8008b18:	1a6d      	subs	r5, r5, r1
 8008b1a:	f025 0503 	bic.w	r5, r5, #3
 8008b1e:	3508      	adds	r5, #8
 8008b20:	2d0c      	cmp	r5, #12
 8008b22:	bf38      	it	cc
 8008b24:	250c      	movcc	r5, #12
 8008b26:	4629      	mov	r1, r5
 8008b28:	4638      	mov	r0, r7
 8008b2a:	f7ff ffa5 	bl	8008a78 <sbrk_aligned>
 8008b2e:	3001      	adds	r0, #1
 8008b30:	d02b      	beq.n	8008b8a <_malloc_r+0xd2>
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	442b      	add	r3, r5
 8008b36:	6023      	str	r3, [r4, #0]
 8008b38:	e00e      	b.n	8008b58 <_malloc_r+0xa0>
 8008b3a:	6822      	ldr	r2, [r4, #0]
 8008b3c:	1b52      	subs	r2, r2, r5
 8008b3e:	d41e      	bmi.n	8008b7e <_malloc_r+0xc6>
 8008b40:	2a0b      	cmp	r2, #11
 8008b42:	d916      	bls.n	8008b72 <_malloc_r+0xba>
 8008b44:	1961      	adds	r1, r4, r5
 8008b46:	42a3      	cmp	r3, r4
 8008b48:	6025      	str	r5, [r4, #0]
 8008b4a:	bf18      	it	ne
 8008b4c:	6059      	strne	r1, [r3, #4]
 8008b4e:	6863      	ldr	r3, [r4, #4]
 8008b50:	bf08      	it	eq
 8008b52:	6031      	streq	r1, [r6, #0]
 8008b54:	5162      	str	r2, [r4, r5]
 8008b56:	604b      	str	r3, [r1, #4]
 8008b58:	4638      	mov	r0, r7
 8008b5a:	f104 060b 	add.w	r6, r4, #11
 8008b5e:	f000 f9ed 	bl	8008f3c <__malloc_unlock>
 8008b62:	f026 0607 	bic.w	r6, r6, #7
 8008b66:	1d23      	adds	r3, r4, #4
 8008b68:	1af2      	subs	r2, r6, r3
 8008b6a:	d0b6      	beq.n	8008ada <_malloc_r+0x22>
 8008b6c:	1b9b      	subs	r3, r3, r6
 8008b6e:	50a3      	str	r3, [r4, r2]
 8008b70:	e7b3      	b.n	8008ada <_malloc_r+0x22>
 8008b72:	6862      	ldr	r2, [r4, #4]
 8008b74:	42a3      	cmp	r3, r4
 8008b76:	bf0c      	ite	eq
 8008b78:	6032      	streq	r2, [r6, #0]
 8008b7a:	605a      	strne	r2, [r3, #4]
 8008b7c:	e7ec      	b.n	8008b58 <_malloc_r+0xa0>
 8008b7e:	4623      	mov	r3, r4
 8008b80:	6864      	ldr	r4, [r4, #4]
 8008b82:	e7b2      	b.n	8008aea <_malloc_r+0x32>
 8008b84:	4634      	mov	r4, r6
 8008b86:	6876      	ldr	r6, [r6, #4]
 8008b88:	e7b9      	b.n	8008afe <_malloc_r+0x46>
 8008b8a:	230c      	movs	r3, #12
 8008b8c:	603b      	str	r3, [r7, #0]
 8008b8e:	4638      	mov	r0, r7
 8008b90:	f000 f9d4 	bl	8008f3c <__malloc_unlock>
 8008b94:	e7a1      	b.n	8008ada <_malloc_r+0x22>
 8008b96:	6025      	str	r5, [r4, #0]
 8008b98:	e7de      	b.n	8008b58 <_malloc_r+0xa0>
 8008b9a:	bf00      	nop
 8008b9c:	20004b84 	.word	0x20004b84

08008ba0 <__ssputs_r>:
 8008ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba4:	688e      	ldr	r6, [r1, #8]
 8008ba6:	429e      	cmp	r6, r3
 8008ba8:	4682      	mov	sl, r0
 8008baa:	460c      	mov	r4, r1
 8008bac:	4690      	mov	r8, r2
 8008bae:	461f      	mov	r7, r3
 8008bb0:	d838      	bhi.n	8008c24 <__ssputs_r+0x84>
 8008bb2:	898a      	ldrh	r2, [r1, #12]
 8008bb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bb8:	d032      	beq.n	8008c20 <__ssputs_r+0x80>
 8008bba:	6825      	ldr	r5, [r4, #0]
 8008bbc:	6909      	ldr	r1, [r1, #16]
 8008bbe:	eba5 0901 	sub.w	r9, r5, r1
 8008bc2:	6965      	ldr	r5, [r4, #20]
 8008bc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bcc:	3301      	adds	r3, #1
 8008bce:	444b      	add	r3, r9
 8008bd0:	106d      	asrs	r5, r5, #1
 8008bd2:	429d      	cmp	r5, r3
 8008bd4:	bf38      	it	cc
 8008bd6:	461d      	movcc	r5, r3
 8008bd8:	0553      	lsls	r3, r2, #21
 8008bda:	d531      	bpl.n	8008c40 <__ssputs_r+0xa0>
 8008bdc:	4629      	mov	r1, r5
 8008bde:	f7ff ff6b 	bl	8008ab8 <_malloc_r>
 8008be2:	4606      	mov	r6, r0
 8008be4:	b950      	cbnz	r0, 8008bfc <__ssputs_r+0x5c>
 8008be6:	230c      	movs	r3, #12
 8008be8:	f8ca 3000 	str.w	r3, [sl]
 8008bec:	89a3      	ldrh	r3, [r4, #12]
 8008bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bf2:	81a3      	strh	r3, [r4, #12]
 8008bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bfc:	6921      	ldr	r1, [r4, #16]
 8008bfe:	464a      	mov	r2, r9
 8008c00:	f7fe f82e 	bl	8006c60 <memcpy>
 8008c04:	89a3      	ldrh	r3, [r4, #12]
 8008c06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0e:	81a3      	strh	r3, [r4, #12]
 8008c10:	6126      	str	r6, [r4, #16]
 8008c12:	6165      	str	r5, [r4, #20]
 8008c14:	444e      	add	r6, r9
 8008c16:	eba5 0509 	sub.w	r5, r5, r9
 8008c1a:	6026      	str	r6, [r4, #0]
 8008c1c:	60a5      	str	r5, [r4, #8]
 8008c1e:	463e      	mov	r6, r7
 8008c20:	42be      	cmp	r6, r7
 8008c22:	d900      	bls.n	8008c26 <__ssputs_r+0x86>
 8008c24:	463e      	mov	r6, r7
 8008c26:	6820      	ldr	r0, [r4, #0]
 8008c28:	4632      	mov	r2, r6
 8008c2a:	4641      	mov	r1, r8
 8008c2c:	f000 f966 	bl	8008efc <memmove>
 8008c30:	68a3      	ldr	r3, [r4, #8]
 8008c32:	1b9b      	subs	r3, r3, r6
 8008c34:	60a3      	str	r3, [r4, #8]
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	4433      	add	r3, r6
 8008c3a:	6023      	str	r3, [r4, #0]
 8008c3c:	2000      	movs	r0, #0
 8008c3e:	e7db      	b.n	8008bf8 <__ssputs_r+0x58>
 8008c40:	462a      	mov	r2, r5
 8008c42:	f000 f981 	bl	8008f48 <_realloc_r>
 8008c46:	4606      	mov	r6, r0
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d1e1      	bne.n	8008c10 <__ssputs_r+0x70>
 8008c4c:	6921      	ldr	r1, [r4, #16]
 8008c4e:	4650      	mov	r0, sl
 8008c50:	f7ff fec6 	bl	80089e0 <_free_r>
 8008c54:	e7c7      	b.n	8008be6 <__ssputs_r+0x46>
	...

08008c58 <_svfiprintf_r>:
 8008c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5c:	4698      	mov	r8, r3
 8008c5e:	898b      	ldrh	r3, [r1, #12]
 8008c60:	061b      	lsls	r3, r3, #24
 8008c62:	b09d      	sub	sp, #116	; 0x74
 8008c64:	4607      	mov	r7, r0
 8008c66:	460d      	mov	r5, r1
 8008c68:	4614      	mov	r4, r2
 8008c6a:	d50e      	bpl.n	8008c8a <_svfiprintf_r+0x32>
 8008c6c:	690b      	ldr	r3, [r1, #16]
 8008c6e:	b963      	cbnz	r3, 8008c8a <_svfiprintf_r+0x32>
 8008c70:	2140      	movs	r1, #64	; 0x40
 8008c72:	f7ff ff21 	bl	8008ab8 <_malloc_r>
 8008c76:	6028      	str	r0, [r5, #0]
 8008c78:	6128      	str	r0, [r5, #16]
 8008c7a:	b920      	cbnz	r0, 8008c86 <_svfiprintf_r+0x2e>
 8008c7c:	230c      	movs	r3, #12
 8008c7e:	603b      	str	r3, [r7, #0]
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	e0d1      	b.n	8008e2a <_svfiprintf_r+0x1d2>
 8008c86:	2340      	movs	r3, #64	; 0x40
 8008c88:	616b      	str	r3, [r5, #20]
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c8e:	2320      	movs	r3, #32
 8008c90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c94:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c98:	2330      	movs	r3, #48	; 0x30
 8008c9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e44 <_svfiprintf_r+0x1ec>
 8008c9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ca2:	f04f 0901 	mov.w	r9, #1
 8008ca6:	4623      	mov	r3, r4
 8008ca8:	469a      	mov	sl, r3
 8008caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cae:	b10a      	cbz	r2, 8008cb4 <_svfiprintf_r+0x5c>
 8008cb0:	2a25      	cmp	r2, #37	; 0x25
 8008cb2:	d1f9      	bne.n	8008ca8 <_svfiprintf_r+0x50>
 8008cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8008cb8:	d00b      	beq.n	8008cd2 <_svfiprintf_r+0x7a>
 8008cba:	465b      	mov	r3, fp
 8008cbc:	4622      	mov	r2, r4
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	4638      	mov	r0, r7
 8008cc2:	f7ff ff6d 	bl	8008ba0 <__ssputs_r>
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	f000 80aa 	beq.w	8008e20 <_svfiprintf_r+0x1c8>
 8008ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cce:	445a      	add	r2, fp
 8008cd0:	9209      	str	r2, [sp, #36]	; 0x24
 8008cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 80a2 	beq.w	8008e20 <_svfiprintf_r+0x1c8>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ce6:	f10a 0a01 	add.w	sl, sl, #1
 8008cea:	9304      	str	r3, [sp, #16]
 8008cec:	9307      	str	r3, [sp, #28]
 8008cee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cf2:	931a      	str	r3, [sp, #104]	; 0x68
 8008cf4:	4654      	mov	r4, sl
 8008cf6:	2205      	movs	r2, #5
 8008cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cfc:	4851      	ldr	r0, [pc, #324]	; (8008e44 <_svfiprintf_r+0x1ec>)
 8008cfe:	f7f7 fa77 	bl	80001f0 <memchr>
 8008d02:	9a04      	ldr	r2, [sp, #16]
 8008d04:	b9d8      	cbnz	r0, 8008d3e <_svfiprintf_r+0xe6>
 8008d06:	06d0      	lsls	r0, r2, #27
 8008d08:	bf44      	itt	mi
 8008d0a:	2320      	movmi	r3, #32
 8008d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d10:	0711      	lsls	r1, r2, #28
 8008d12:	bf44      	itt	mi
 8008d14:	232b      	movmi	r3, #43	; 0x2b
 8008d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d20:	d015      	beq.n	8008d4e <_svfiprintf_r+0xf6>
 8008d22:	9a07      	ldr	r2, [sp, #28]
 8008d24:	4654      	mov	r4, sl
 8008d26:	2000      	movs	r0, #0
 8008d28:	f04f 0c0a 	mov.w	ip, #10
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d32:	3b30      	subs	r3, #48	; 0x30
 8008d34:	2b09      	cmp	r3, #9
 8008d36:	d94e      	bls.n	8008dd6 <_svfiprintf_r+0x17e>
 8008d38:	b1b0      	cbz	r0, 8008d68 <_svfiprintf_r+0x110>
 8008d3a:	9207      	str	r2, [sp, #28]
 8008d3c:	e014      	b.n	8008d68 <_svfiprintf_r+0x110>
 8008d3e:	eba0 0308 	sub.w	r3, r0, r8
 8008d42:	fa09 f303 	lsl.w	r3, r9, r3
 8008d46:	4313      	orrs	r3, r2
 8008d48:	9304      	str	r3, [sp, #16]
 8008d4a:	46a2      	mov	sl, r4
 8008d4c:	e7d2      	b.n	8008cf4 <_svfiprintf_r+0x9c>
 8008d4e:	9b03      	ldr	r3, [sp, #12]
 8008d50:	1d19      	adds	r1, r3, #4
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	9103      	str	r1, [sp, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	bfbb      	ittet	lt
 8008d5a:	425b      	neglt	r3, r3
 8008d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d60:	9307      	strge	r3, [sp, #28]
 8008d62:	9307      	strlt	r3, [sp, #28]
 8008d64:	bfb8      	it	lt
 8008d66:	9204      	strlt	r2, [sp, #16]
 8008d68:	7823      	ldrb	r3, [r4, #0]
 8008d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d6c:	d10c      	bne.n	8008d88 <_svfiprintf_r+0x130>
 8008d6e:	7863      	ldrb	r3, [r4, #1]
 8008d70:	2b2a      	cmp	r3, #42	; 0x2a
 8008d72:	d135      	bne.n	8008de0 <_svfiprintf_r+0x188>
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	1d1a      	adds	r2, r3, #4
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	9203      	str	r2, [sp, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	bfb8      	it	lt
 8008d80:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d84:	3402      	adds	r4, #2
 8008d86:	9305      	str	r3, [sp, #20]
 8008d88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e54 <_svfiprintf_r+0x1fc>
 8008d8c:	7821      	ldrb	r1, [r4, #0]
 8008d8e:	2203      	movs	r2, #3
 8008d90:	4650      	mov	r0, sl
 8008d92:	f7f7 fa2d 	bl	80001f0 <memchr>
 8008d96:	b140      	cbz	r0, 8008daa <_svfiprintf_r+0x152>
 8008d98:	2340      	movs	r3, #64	; 0x40
 8008d9a:	eba0 000a 	sub.w	r0, r0, sl
 8008d9e:	fa03 f000 	lsl.w	r0, r3, r0
 8008da2:	9b04      	ldr	r3, [sp, #16]
 8008da4:	4303      	orrs	r3, r0
 8008da6:	3401      	adds	r4, #1
 8008da8:	9304      	str	r3, [sp, #16]
 8008daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dae:	4826      	ldr	r0, [pc, #152]	; (8008e48 <_svfiprintf_r+0x1f0>)
 8008db0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008db4:	2206      	movs	r2, #6
 8008db6:	f7f7 fa1b 	bl	80001f0 <memchr>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d038      	beq.n	8008e30 <_svfiprintf_r+0x1d8>
 8008dbe:	4b23      	ldr	r3, [pc, #140]	; (8008e4c <_svfiprintf_r+0x1f4>)
 8008dc0:	bb1b      	cbnz	r3, 8008e0a <_svfiprintf_r+0x1b2>
 8008dc2:	9b03      	ldr	r3, [sp, #12]
 8008dc4:	3307      	adds	r3, #7
 8008dc6:	f023 0307 	bic.w	r3, r3, #7
 8008dca:	3308      	adds	r3, #8
 8008dcc:	9303      	str	r3, [sp, #12]
 8008dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd0:	4433      	add	r3, r6
 8008dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd4:	e767      	b.n	8008ca6 <_svfiprintf_r+0x4e>
 8008dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dda:	460c      	mov	r4, r1
 8008ddc:	2001      	movs	r0, #1
 8008dde:	e7a5      	b.n	8008d2c <_svfiprintf_r+0xd4>
 8008de0:	2300      	movs	r3, #0
 8008de2:	3401      	adds	r4, #1
 8008de4:	9305      	str	r3, [sp, #20]
 8008de6:	4619      	mov	r1, r3
 8008de8:	f04f 0c0a 	mov.w	ip, #10
 8008dec:	4620      	mov	r0, r4
 8008dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008df2:	3a30      	subs	r2, #48	; 0x30
 8008df4:	2a09      	cmp	r2, #9
 8008df6:	d903      	bls.n	8008e00 <_svfiprintf_r+0x1a8>
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0c5      	beq.n	8008d88 <_svfiprintf_r+0x130>
 8008dfc:	9105      	str	r1, [sp, #20]
 8008dfe:	e7c3      	b.n	8008d88 <_svfiprintf_r+0x130>
 8008e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e04:	4604      	mov	r4, r0
 8008e06:	2301      	movs	r3, #1
 8008e08:	e7f0      	b.n	8008dec <_svfiprintf_r+0x194>
 8008e0a:	ab03      	add	r3, sp, #12
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	462a      	mov	r2, r5
 8008e10:	4b0f      	ldr	r3, [pc, #60]	; (8008e50 <_svfiprintf_r+0x1f8>)
 8008e12:	a904      	add	r1, sp, #16
 8008e14:	4638      	mov	r0, r7
 8008e16:	f7fd ffd9 	bl	8006dcc <_printf_float>
 8008e1a:	1c42      	adds	r2, r0, #1
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	d1d6      	bne.n	8008dce <_svfiprintf_r+0x176>
 8008e20:	89ab      	ldrh	r3, [r5, #12]
 8008e22:	065b      	lsls	r3, r3, #25
 8008e24:	f53f af2c 	bmi.w	8008c80 <_svfiprintf_r+0x28>
 8008e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e2a:	b01d      	add	sp, #116	; 0x74
 8008e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e30:	ab03      	add	r3, sp, #12
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	462a      	mov	r2, r5
 8008e36:	4b06      	ldr	r3, [pc, #24]	; (8008e50 <_svfiprintf_r+0x1f8>)
 8008e38:	a904      	add	r1, sp, #16
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	f7fe fa6a 	bl	8007314 <_printf_i>
 8008e40:	e7eb      	b.n	8008e1a <_svfiprintf_r+0x1c2>
 8008e42:	bf00      	nop
 8008e44:	08009e3c 	.word	0x08009e3c
 8008e48:	08009e46 	.word	0x08009e46
 8008e4c:	08006dcd 	.word	0x08006dcd
 8008e50:	08008ba1 	.word	0x08008ba1
 8008e54:	08009e42 	.word	0x08009e42

08008e58 <_sbrk_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	4d06      	ldr	r5, [pc, #24]	; (8008e74 <_sbrk_r+0x1c>)
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	4604      	mov	r4, r0
 8008e60:	4608      	mov	r0, r1
 8008e62:	602b      	str	r3, [r5, #0]
 8008e64:	f7f8 fd02 	bl	800186c <_sbrk>
 8008e68:	1c43      	adds	r3, r0, #1
 8008e6a:	d102      	bne.n	8008e72 <_sbrk_r+0x1a>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	b103      	cbz	r3, 8008e72 <_sbrk_r+0x1a>
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	bd38      	pop	{r3, r4, r5, pc}
 8008e74:	20004b8c 	.word	0x20004b8c

08008e78 <__assert_func>:
 8008e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e7a:	4614      	mov	r4, r2
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <__assert_func+0x2c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4605      	mov	r5, r0
 8008e84:	68d8      	ldr	r0, [r3, #12]
 8008e86:	b14c      	cbz	r4, 8008e9c <__assert_func+0x24>
 8008e88:	4b07      	ldr	r3, [pc, #28]	; (8008ea8 <__assert_func+0x30>)
 8008e8a:	9100      	str	r1, [sp, #0]
 8008e8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e90:	4906      	ldr	r1, [pc, #24]	; (8008eac <__assert_func+0x34>)
 8008e92:	462b      	mov	r3, r5
 8008e94:	f000 f80e 	bl	8008eb4 <fiprintf>
 8008e98:	f000 faac 	bl	80093f4 <abort>
 8008e9c:	4b04      	ldr	r3, [pc, #16]	; (8008eb0 <__assert_func+0x38>)
 8008e9e:	461c      	mov	r4, r3
 8008ea0:	e7f3      	b.n	8008e8a <__assert_func+0x12>
 8008ea2:	bf00      	nop
 8008ea4:	20000010 	.word	0x20000010
 8008ea8:	08009e4d 	.word	0x08009e4d
 8008eac:	08009e5a 	.word	0x08009e5a
 8008eb0:	08009e88 	.word	0x08009e88

08008eb4 <fiprintf>:
 8008eb4:	b40e      	push	{r1, r2, r3}
 8008eb6:	b503      	push	{r0, r1, lr}
 8008eb8:	4601      	mov	r1, r0
 8008eba:	ab03      	add	r3, sp, #12
 8008ebc:	4805      	ldr	r0, [pc, #20]	; (8008ed4 <fiprintf+0x20>)
 8008ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ec2:	6800      	ldr	r0, [r0, #0]
 8008ec4:	9301      	str	r3, [sp, #4]
 8008ec6:	f000 f897 	bl	8008ff8 <_vfiprintf_r>
 8008eca:	b002      	add	sp, #8
 8008ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ed0:	b003      	add	sp, #12
 8008ed2:	4770      	bx	lr
 8008ed4:	20000010 	.word	0x20000010

08008ed8 <__ascii_mbtowc>:
 8008ed8:	b082      	sub	sp, #8
 8008eda:	b901      	cbnz	r1, 8008ede <__ascii_mbtowc+0x6>
 8008edc:	a901      	add	r1, sp, #4
 8008ede:	b142      	cbz	r2, 8008ef2 <__ascii_mbtowc+0x1a>
 8008ee0:	b14b      	cbz	r3, 8008ef6 <__ascii_mbtowc+0x1e>
 8008ee2:	7813      	ldrb	r3, [r2, #0]
 8008ee4:	600b      	str	r3, [r1, #0]
 8008ee6:	7812      	ldrb	r2, [r2, #0]
 8008ee8:	1e10      	subs	r0, r2, #0
 8008eea:	bf18      	it	ne
 8008eec:	2001      	movne	r0, #1
 8008eee:	b002      	add	sp, #8
 8008ef0:	4770      	bx	lr
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	e7fb      	b.n	8008eee <__ascii_mbtowc+0x16>
 8008ef6:	f06f 0001 	mvn.w	r0, #1
 8008efa:	e7f8      	b.n	8008eee <__ascii_mbtowc+0x16>

08008efc <memmove>:
 8008efc:	4288      	cmp	r0, r1
 8008efe:	b510      	push	{r4, lr}
 8008f00:	eb01 0402 	add.w	r4, r1, r2
 8008f04:	d902      	bls.n	8008f0c <memmove+0x10>
 8008f06:	4284      	cmp	r4, r0
 8008f08:	4623      	mov	r3, r4
 8008f0a:	d807      	bhi.n	8008f1c <memmove+0x20>
 8008f0c:	1e43      	subs	r3, r0, #1
 8008f0e:	42a1      	cmp	r1, r4
 8008f10:	d008      	beq.n	8008f24 <memmove+0x28>
 8008f12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f1a:	e7f8      	b.n	8008f0e <memmove+0x12>
 8008f1c:	4402      	add	r2, r0
 8008f1e:	4601      	mov	r1, r0
 8008f20:	428a      	cmp	r2, r1
 8008f22:	d100      	bne.n	8008f26 <memmove+0x2a>
 8008f24:	bd10      	pop	{r4, pc}
 8008f26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f2e:	e7f7      	b.n	8008f20 <memmove+0x24>

08008f30 <__malloc_lock>:
 8008f30:	4801      	ldr	r0, [pc, #4]	; (8008f38 <__malloc_lock+0x8>)
 8008f32:	f000 bc1f 	b.w	8009774 <__retarget_lock_acquire_recursive>
 8008f36:	bf00      	nop
 8008f38:	20004b90 	.word	0x20004b90

08008f3c <__malloc_unlock>:
 8008f3c:	4801      	ldr	r0, [pc, #4]	; (8008f44 <__malloc_unlock+0x8>)
 8008f3e:	f000 bc1a 	b.w	8009776 <__retarget_lock_release_recursive>
 8008f42:	bf00      	nop
 8008f44:	20004b90 	.word	0x20004b90

08008f48 <_realloc_r>:
 8008f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4c:	4680      	mov	r8, r0
 8008f4e:	4614      	mov	r4, r2
 8008f50:	460e      	mov	r6, r1
 8008f52:	b921      	cbnz	r1, 8008f5e <_realloc_r+0x16>
 8008f54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f58:	4611      	mov	r1, r2
 8008f5a:	f7ff bdad 	b.w	8008ab8 <_malloc_r>
 8008f5e:	b92a      	cbnz	r2, 8008f6c <_realloc_r+0x24>
 8008f60:	f7ff fd3e 	bl	80089e0 <_free_r>
 8008f64:	4625      	mov	r5, r4
 8008f66:	4628      	mov	r0, r5
 8008f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f6c:	f000 fc6a 	bl	8009844 <_malloc_usable_size_r>
 8008f70:	4284      	cmp	r4, r0
 8008f72:	4607      	mov	r7, r0
 8008f74:	d802      	bhi.n	8008f7c <_realloc_r+0x34>
 8008f76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f7a:	d812      	bhi.n	8008fa2 <_realloc_r+0x5a>
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	4640      	mov	r0, r8
 8008f80:	f7ff fd9a 	bl	8008ab8 <_malloc_r>
 8008f84:	4605      	mov	r5, r0
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d0ed      	beq.n	8008f66 <_realloc_r+0x1e>
 8008f8a:	42bc      	cmp	r4, r7
 8008f8c:	4622      	mov	r2, r4
 8008f8e:	4631      	mov	r1, r6
 8008f90:	bf28      	it	cs
 8008f92:	463a      	movcs	r2, r7
 8008f94:	f7fd fe64 	bl	8006c60 <memcpy>
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4640      	mov	r0, r8
 8008f9c:	f7ff fd20 	bl	80089e0 <_free_r>
 8008fa0:	e7e1      	b.n	8008f66 <_realloc_r+0x1e>
 8008fa2:	4635      	mov	r5, r6
 8008fa4:	e7df      	b.n	8008f66 <_realloc_r+0x1e>

08008fa6 <__sfputc_r>:
 8008fa6:	6893      	ldr	r3, [r2, #8]
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	b410      	push	{r4}
 8008fae:	6093      	str	r3, [r2, #8]
 8008fb0:	da08      	bge.n	8008fc4 <__sfputc_r+0x1e>
 8008fb2:	6994      	ldr	r4, [r2, #24]
 8008fb4:	42a3      	cmp	r3, r4
 8008fb6:	db01      	blt.n	8008fbc <__sfputc_r+0x16>
 8008fb8:	290a      	cmp	r1, #10
 8008fba:	d103      	bne.n	8008fc4 <__sfputc_r+0x1e>
 8008fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fc0:	f000 b94a 	b.w	8009258 <__swbuf_r>
 8008fc4:	6813      	ldr	r3, [r2, #0]
 8008fc6:	1c58      	adds	r0, r3, #1
 8008fc8:	6010      	str	r0, [r2, #0]
 8008fca:	7019      	strb	r1, [r3, #0]
 8008fcc:	4608      	mov	r0, r1
 8008fce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <__sfputs_r>:
 8008fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	460f      	mov	r7, r1
 8008fda:	4614      	mov	r4, r2
 8008fdc:	18d5      	adds	r5, r2, r3
 8008fde:	42ac      	cmp	r4, r5
 8008fe0:	d101      	bne.n	8008fe6 <__sfputs_r+0x12>
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	e007      	b.n	8008ff6 <__sfputs_r+0x22>
 8008fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fea:	463a      	mov	r2, r7
 8008fec:	4630      	mov	r0, r6
 8008fee:	f7ff ffda 	bl	8008fa6 <__sfputc_r>
 8008ff2:	1c43      	adds	r3, r0, #1
 8008ff4:	d1f3      	bne.n	8008fde <__sfputs_r+0xa>
 8008ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ff8 <_vfiprintf_r>:
 8008ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	460d      	mov	r5, r1
 8008ffe:	b09d      	sub	sp, #116	; 0x74
 8009000:	4614      	mov	r4, r2
 8009002:	4698      	mov	r8, r3
 8009004:	4606      	mov	r6, r0
 8009006:	b118      	cbz	r0, 8009010 <_vfiprintf_r+0x18>
 8009008:	6983      	ldr	r3, [r0, #24]
 800900a:	b90b      	cbnz	r3, 8009010 <_vfiprintf_r+0x18>
 800900c:	f000 fb14 	bl	8009638 <__sinit>
 8009010:	4b89      	ldr	r3, [pc, #548]	; (8009238 <_vfiprintf_r+0x240>)
 8009012:	429d      	cmp	r5, r3
 8009014:	d11b      	bne.n	800904e <_vfiprintf_r+0x56>
 8009016:	6875      	ldr	r5, [r6, #4]
 8009018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800901a:	07d9      	lsls	r1, r3, #31
 800901c:	d405      	bmi.n	800902a <_vfiprintf_r+0x32>
 800901e:	89ab      	ldrh	r3, [r5, #12]
 8009020:	059a      	lsls	r2, r3, #22
 8009022:	d402      	bmi.n	800902a <_vfiprintf_r+0x32>
 8009024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009026:	f000 fba5 	bl	8009774 <__retarget_lock_acquire_recursive>
 800902a:	89ab      	ldrh	r3, [r5, #12]
 800902c:	071b      	lsls	r3, r3, #28
 800902e:	d501      	bpl.n	8009034 <_vfiprintf_r+0x3c>
 8009030:	692b      	ldr	r3, [r5, #16]
 8009032:	b9eb      	cbnz	r3, 8009070 <_vfiprintf_r+0x78>
 8009034:	4629      	mov	r1, r5
 8009036:	4630      	mov	r0, r6
 8009038:	f000 f96e 	bl	8009318 <__swsetup_r>
 800903c:	b1c0      	cbz	r0, 8009070 <_vfiprintf_r+0x78>
 800903e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009040:	07dc      	lsls	r4, r3, #31
 8009042:	d50e      	bpl.n	8009062 <_vfiprintf_r+0x6a>
 8009044:	f04f 30ff 	mov.w	r0, #4294967295
 8009048:	b01d      	add	sp, #116	; 0x74
 800904a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904e:	4b7b      	ldr	r3, [pc, #492]	; (800923c <_vfiprintf_r+0x244>)
 8009050:	429d      	cmp	r5, r3
 8009052:	d101      	bne.n	8009058 <_vfiprintf_r+0x60>
 8009054:	68b5      	ldr	r5, [r6, #8]
 8009056:	e7df      	b.n	8009018 <_vfiprintf_r+0x20>
 8009058:	4b79      	ldr	r3, [pc, #484]	; (8009240 <_vfiprintf_r+0x248>)
 800905a:	429d      	cmp	r5, r3
 800905c:	bf08      	it	eq
 800905e:	68f5      	ldreq	r5, [r6, #12]
 8009060:	e7da      	b.n	8009018 <_vfiprintf_r+0x20>
 8009062:	89ab      	ldrh	r3, [r5, #12]
 8009064:	0598      	lsls	r0, r3, #22
 8009066:	d4ed      	bmi.n	8009044 <_vfiprintf_r+0x4c>
 8009068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800906a:	f000 fb84 	bl	8009776 <__retarget_lock_release_recursive>
 800906e:	e7e9      	b.n	8009044 <_vfiprintf_r+0x4c>
 8009070:	2300      	movs	r3, #0
 8009072:	9309      	str	r3, [sp, #36]	; 0x24
 8009074:	2320      	movs	r3, #32
 8009076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800907a:	f8cd 800c 	str.w	r8, [sp, #12]
 800907e:	2330      	movs	r3, #48	; 0x30
 8009080:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009244 <_vfiprintf_r+0x24c>
 8009084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009088:	f04f 0901 	mov.w	r9, #1
 800908c:	4623      	mov	r3, r4
 800908e:	469a      	mov	sl, r3
 8009090:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009094:	b10a      	cbz	r2, 800909a <_vfiprintf_r+0xa2>
 8009096:	2a25      	cmp	r2, #37	; 0x25
 8009098:	d1f9      	bne.n	800908e <_vfiprintf_r+0x96>
 800909a:	ebba 0b04 	subs.w	fp, sl, r4
 800909e:	d00b      	beq.n	80090b8 <_vfiprintf_r+0xc0>
 80090a0:	465b      	mov	r3, fp
 80090a2:	4622      	mov	r2, r4
 80090a4:	4629      	mov	r1, r5
 80090a6:	4630      	mov	r0, r6
 80090a8:	f7ff ff94 	bl	8008fd4 <__sfputs_r>
 80090ac:	3001      	adds	r0, #1
 80090ae:	f000 80aa 	beq.w	8009206 <_vfiprintf_r+0x20e>
 80090b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090b4:	445a      	add	r2, fp
 80090b6:	9209      	str	r2, [sp, #36]	; 0x24
 80090b8:	f89a 3000 	ldrb.w	r3, [sl]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f000 80a2 	beq.w	8009206 <_vfiprintf_r+0x20e>
 80090c2:	2300      	movs	r3, #0
 80090c4:	f04f 32ff 	mov.w	r2, #4294967295
 80090c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090cc:	f10a 0a01 	add.w	sl, sl, #1
 80090d0:	9304      	str	r3, [sp, #16]
 80090d2:	9307      	str	r3, [sp, #28]
 80090d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090d8:	931a      	str	r3, [sp, #104]	; 0x68
 80090da:	4654      	mov	r4, sl
 80090dc:	2205      	movs	r2, #5
 80090de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e2:	4858      	ldr	r0, [pc, #352]	; (8009244 <_vfiprintf_r+0x24c>)
 80090e4:	f7f7 f884 	bl	80001f0 <memchr>
 80090e8:	9a04      	ldr	r2, [sp, #16]
 80090ea:	b9d8      	cbnz	r0, 8009124 <_vfiprintf_r+0x12c>
 80090ec:	06d1      	lsls	r1, r2, #27
 80090ee:	bf44      	itt	mi
 80090f0:	2320      	movmi	r3, #32
 80090f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090f6:	0713      	lsls	r3, r2, #28
 80090f8:	bf44      	itt	mi
 80090fa:	232b      	movmi	r3, #43	; 0x2b
 80090fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009100:	f89a 3000 	ldrb.w	r3, [sl]
 8009104:	2b2a      	cmp	r3, #42	; 0x2a
 8009106:	d015      	beq.n	8009134 <_vfiprintf_r+0x13c>
 8009108:	9a07      	ldr	r2, [sp, #28]
 800910a:	4654      	mov	r4, sl
 800910c:	2000      	movs	r0, #0
 800910e:	f04f 0c0a 	mov.w	ip, #10
 8009112:	4621      	mov	r1, r4
 8009114:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009118:	3b30      	subs	r3, #48	; 0x30
 800911a:	2b09      	cmp	r3, #9
 800911c:	d94e      	bls.n	80091bc <_vfiprintf_r+0x1c4>
 800911e:	b1b0      	cbz	r0, 800914e <_vfiprintf_r+0x156>
 8009120:	9207      	str	r2, [sp, #28]
 8009122:	e014      	b.n	800914e <_vfiprintf_r+0x156>
 8009124:	eba0 0308 	sub.w	r3, r0, r8
 8009128:	fa09 f303 	lsl.w	r3, r9, r3
 800912c:	4313      	orrs	r3, r2
 800912e:	9304      	str	r3, [sp, #16]
 8009130:	46a2      	mov	sl, r4
 8009132:	e7d2      	b.n	80090da <_vfiprintf_r+0xe2>
 8009134:	9b03      	ldr	r3, [sp, #12]
 8009136:	1d19      	adds	r1, r3, #4
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	9103      	str	r1, [sp, #12]
 800913c:	2b00      	cmp	r3, #0
 800913e:	bfbb      	ittet	lt
 8009140:	425b      	neglt	r3, r3
 8009142:	f042 0202 	orrlt.w	r2, r2, #2
 8009146:	9307      	strge	r3, [sp, #28]
 8009148:	9307      	strlt	r3, [sp, #28]
 800914a:	bfb8      	it	lt
 800914c:	9204      	strlt	r2, [sp, #16]
 800914e:	7823      	ldrb	r3, [r4, #0]
 8009150:	2b2e      	cmp	r3, #46	; 0x2e
 8009152:	d10c      	bne.n	800916e <_vfiprintf_r+0x176>
 8009154:	7863      	ldrb	r3, [r4, #1]
 8009156:	2b2a      	cmp	r3, #42	; 0x2a
 8009158:	d135      	bne.n	80091c6 <_vfiprintf_r+0x1ce>
 800915a:	9b03      	ldr	r3, [sp, #12]
 800915c:	1d1a      	adds	r2, r3, #4
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	9203      	str	r2, [sp, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	bfb8      	it	lt
 8009166:	f04f 33ff 	movlt.w	r3, #4294967295
 800916a:	3402      	adds	r4, #2
 800916c:	9305      	str	r3, [sp, #20]
 800916e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009254 <_vfiprintf_r+0x25c>
 8009172:	7821      	ldrb	r1, [r4, #0]
 8009174:	2203      	movs	r2, #3
 8009176:	4650      	mov	r0, sl
 8009178:	f7f7 f83a 	bl	80001f0 <memchr>
 800917c:	b140      	cbz	r0, 8009190 <_vfiprintf_r+0x198>
 800917e:	2340      	movs	r3, #64	; 0x40
 8009180:	eba0 000a 	sub.w	r0, r0, sl
 8009184:	fa03 f000 	lsl.w	r0, r3, r0
 8009188:	9b04      	ldr	r3, [sp, #16]
 800918a:	4303      	orrs	r3, r0
 800918c:	3401      	adds	r4, #1
 800918e:	9304      	str	r3, [sp, #16]
 8009190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009194:	482c      	ldr	r0, [pc, #176]	; (8009248 <_vfiprintf_r+0x250>)
 8009196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800919a:	2206      	movs	r2, #6
 800919c:	f7f7 f828 	bl	80001f0 <memchr>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d03f      	beq.n	8009224 <_vfiprintf_r+0x22c>
 80091a4:	4b29      	ldr	r3, [pc, #164]	; (800924c <_vfiprintf_r+0x254>)
 80091a6:	bb1b      	cbnz	r3, 80091f0 <_vfiprintf_r+0x1f8>
 80091a8:	9b03      	ldr	r3, [sp, #12]
 80091aa:	3307      	adds	r3, #7
 80091ac:	f023 0307 	bic.w	r3, r3, #7
 80091b0:	3308      	adds	r3, #8
 80091b2:	9303      	str	r3, [sp, #12]
 80091b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b6:	443b      	add	r3, r7
 80091b8:	9309      	str	r3, [sp, #36]	; 0x24
 80091ba:	e767      	b.n	800908c <_vfiprintf_r+0x94>
 80091bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80091c0:	460c      	mov	r4, r1
 80091c2:	2001      	movs	r0, #1
 80091c4:	e7a5      	b.n	8009112 <_vfiprintf_r+0x11a>
 80091c6:	2300      	movs	r3, #0
 80091c8:	3401      	adds	r4, #1
 80091ca:	9305      	str	r3, [sp, #20]
 80091cc:	4619      	mov	r1, r3
 80091ce:	f04f 0c0a 	mov.w	ip, #10
 80091d2:	4620      	mov	r0, r4
 80091d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091d8:	3a30      	subs	r2, #48	; 0x30
 80091da:	2a09      	cmp	r2, #9
 80091dc:	d903      	bls.n	80091e6 <_vfiprintf_r+0x1ee>
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0c5      	beq.n	800916e <_vfiprintf_r+0x176>
 80091e2:	9105      	str	r1, [sp, #20]
 80091e4:	e7c3      	b.n	800916e <_vfiprintf_r+0x176>
 80091e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80091ea:	4604      	mov	r4, r0
 80091ec:	2301      	movs	r3, #1
 80091ee:	e7f0      	b.n	80091d2 <_vfiprintf_r+0x1da>
 80091f0:	ab03      	add	r3, sp, #12
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	462a      	mov	r2, r5
 80091f6:	4b16      	ldr	r3, [pc, #88]	; (8009250 <_vfiprintf_r+0x258>)
 80091f8:	a904      	add	r1, sp, #16
 80091fa:	4630      	mov	r0, r6
 80091fc:	f7fd fde6 	bl	8006dcc <_printf_float>
 8009200:	4607      	mov	r7, r0
 8009202:	1c78      	adds	r0, r7, #1
 8009204:	d1d6      	bne.n	80091b4 <_vfiprintf_r+0x1bc>
 8009206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009208:	07d9      	lsls	r1, r3, #31
 800920a:	d405      	bmi.n	8009218 <_vfiprintf_r+0x220>
 800920c:	89ab      	ldrh	r3, [r5, #12]
 800920e:	059a      	lsls	r2, r3, #22
 8009210:	d402      	bmi.n	8009218 <_vfiprintf_r+0x220>
 8009212:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009214:	f000 faaf 	bl	8009776 <__retarget_lock_release_recursive>
 8009218:	89ab      	ldrh	r3, [r5, #12]
 800921a:	065b      	lsls	r3, r3, #25
 800921c:	f53f af12 	bmi.w	8009044 <_vfiprintf_r+0x4c>
 8009220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009222:	e711      	b.n	8009048 <_vfiprintf_r+0x50>
 8009224:	ab03      	add	r3, sp, #12
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	462a      	mov	r2, r5
 800922a:	4b09      	ldr	r3, [pc, #36]	; (8009250 <_vfiprintf_r+0x258>)
 800922c:	a904      	add	r1, sp, #16
 800922e:	4630      	mov	r0, r6
 8009230:	f7fe f870 	bl	8007314 <_printf_i>
 8009234:	e7e4      	b.n	8009200 <_vfiprintf_r+0x208>
 8009236:	bf00      	nop
 8009238:	08009fb4 	.word	0x08009fb4
 800923c:	08009fd4 	.word	0x08009fd4
 8009240:	08009f94 	.word	0x08009f94
 8009244:	08009e3c 	.word	0x08009e3c
 8009248:	08009e46 	.word	0x08009e46
 800924c:	08006dcd 	.word	0x08006dcd
 8009250:	08008fd5 	.word	0x08008fd5
 8009254:	08009e42 	.word	0x08009e42

08009258 <__swbuf_r>:
 8009258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925a:	460e      	mov	r6, r1
 800925c:	4614      	mov	r4, r2
 800925e:	4605      	mov	r5, r0
 8009260:	b118      	cbz	r0, 800926a <__swbuf_r+0x12>
 8009262:	6983      	ldr	r3, [r0, #24]
 8009264:	b90b      	cbnz	r3, 800926a <__swbuf_r+0x12>
 8009266:	f000 f9e7 	bl	8009638 <__sinit>
 800926a:	4b21      	ldr	r3, [pc, #132]	; (80092f0 <__swbuf_r+0x98>)
 800926c:	429c      	cmp	r4, r3
 800926e:	d12b      	bne.n	80092c8 <__swbuf_r+0x70>
 8009270:	686c      	ldr	r4, [r5, #4]
 8009272:	69a3      	ldr	r3, [r4, #24]
 8009274:	60a3      	str	r3, [r4, #8]
 8009276:	89a3      	ldrh	r3, [r4, #12]
 8009278:	071a      	lsls	r2, r3, #28
 800927a:	d52f      	bpl.n	80092dc <__swbuf_r+0x84>
 800927c:	6923      	ldr	r3, [r4, #16]
 800927e:	b36b      	cbz	r3, 80092dc <__swbuf_r+0x84>
 8009280:	6923      	ldr	r3, [r4, #16]
 8009282:	6820      	ldr	r0, [r4, #0]
 8009284:	1ac0      	subs	r0, r0, r3
 8009286:	6963      	ldr	r3, [r4, #20]
 8009288:	b2f6      	uxtb	r6, r6
 800928a:	4283      	cmp	r3, r0
 800928c:	4637      	mov	r7, r6
 800928e:	dc04      	bgt.n	800929a <__swbuf_r+0x42>
 8009290:	4621      	mov	r1, r4
 8009292:	4628      	mov	r0, r5
 8009294:	f000 f93c 	bl	8009510 <_fflush_r>
 8009298:	bb30      	cbnz	r0, 80092e8 <__swbuf_r+0x90>
 800929a:	68a3      	ldr	r3, [r4, #8]
 800929c:	3b01      	subs	r3, #1
 800929e:	60a3      	str	r3, [r4, #8]
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	1c5a      	adds	r2, r3, #1
 80092a4:	6022      	str	r2, [r4, #0]
 80092a6:	701e      	strb	r6, [r3, #0]
 80092a8:	6963      	ldr	r3, [r4, #20]
 80092aa:	3001      	adds	r0, #1
 80092ac:	4283      	cmp	r3, r0
 80092ae:	d004      	beq.n	80092ba <__swbuf_r+0x62>
 80092b0:	89a3      	ldrh	r3, [r4, #12]
 80092b2:	07db      	lsls	r3, r3, #31
 80092b4:	d506      	bpl.n	80092c4 <__swbuf_r+0x6c>
 80092b6:	2e0a      	cmp	r6, #10
 80092b8:	d104      	bne.n	80092c4 <__swbuf_r+0x6c>
 80092ba:	4621      	mov	r1, r4
 80092bc:	4628      	mov	r0, r5
 80092be:	f000 f927 	bl	8009510 <_fflush_r>
 80092c2:	b988      	cbnz	r0, 80092e8 <__swbuf_r+0x90>
 80092c4:	4638      	mov	r0, r7
 80092c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092c8:	4b0a      	ldr	r3, [pc, #40]	; (80092f4 <__swbuf_r+0x9c>)
 80092ca:	429c      	cmp	r4, r3
 80092cc:	d101      	bne.n	80092d2 <__swbuf_r+0x7a>
 80092ce:	68ac      	ldr	r4, [r5, #8]
 80092d0:	e7cf      	b.n	8009272 <__swbuf_r+0x1a>
 80092d2:	4b09      	ldr	r3, [pc, #36]	; (80092f8 <__swbuf_r+0xa0>)
 80092d4:	429c      	cmp	r4, r3
 80092d6:	bf08      	it	eq
 80092d8:	68ec      	ldreq	r4, [r5, #12]
 80092da:	e7ca      	b.n	8009272 <__swbuf_r+0x1a>
 80092dc:	4621      	mov	r1, r4
 80092de:	4628      	mov	r0, r5
 80092e0:	f000 f81a 	bl	8009318 <__swsetup_r>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d0cb      	beq.n	8009280 <__swbuf_r+0x28>
 80092e8:	f04f 37ff 	mov.w	r7, #4294967295
 80092ec:	e7ea      	b.n	80092c4 <__swbuf_r+0x6c>
 80092ee:	bf00      	nop
 80092f0:	08009fb4 	.word	0x08009fb4
 80092f4:	08009fd4 	.word	0x08009fd4
 80092f8:	08009f94 	.word	0x08009f94

080092fc <__ascii_wctomb>:
 80092fc:	b149      	cbz	r1, 8009312 <__ascii_wctomb+0x16>
 80092fe:	2aff      	cmp	r2, #255	; 0xff
 8009300:	bf85      	ittet	hi
 8009302:	238a      	movhi	r3, #138	; 0x8a
 8009304:	6003      	strhi	r3, [r0, #0]
 8009306:	700a      	strbls	r2, [r1, #0]
 8009308:	f04f 30ff 	movhi.w	r0, #4294967295
 800930c:	bf98      	it	ls
 800930e:	2001      	movls	r0, #1
 8009310:	4770      	bx	lr
 8009312:	4608      	mov	r0, r1
 8009314:	4770      	bx	lr
	...

08009318 <__swsetup_r>:
 8009318:	4b32      	ldr	r3, [pc, #200]	; (80093e4 <__swsetup_r+0xcc>)
 800931a:	b570      	push	{r4, r5, r6, lr}
 800931c:	681d      	ldr	r5, [r3, #0]
 800931e:	4606      	mov	r6, r0
 8009320:	460c      	mov	r4, r1
 8009322:	b125      	cbz	r5, 800932e <__swsetup_r+0x16>
 8009324:	69ab      	ldr	r3, [r5, #24]
 8009326:	b913      	cbnz	r3, 800932e <__swsetup_r+0x16>
 8009328:	4628      	mov	r0, r5
 800932a:	f000 f985 	bl	8009638 <__sinit>
 800932e:	4b2e      	ldr	r3, [pc, #184]	; (80093e8 <__swsetup_r+0xd0>)
 8009330:	429c      	cmp	r4, r3
 8009332:	d10f      	bne.n	8009354 <__swsetup_r+0x3c>
 8009334:	686c      	ldr	r4, [r5, #4]
 8009336:	89a3      	ldrh	r3, [r4, #12]
 8009338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800933c:	0719      	lsls	r1, r3, #28
 800933e:	d42c      	bmi.n	800939a <__swsetup_r+0x82>
 8009340:	06dd      	lsls	r5, r3, #27
 8009342:	d411      	bmi.n	8009368 <__swsetup_r+0x50>
 8009344:	2309      	movs	r3, #9
 8009346:	6033      	str	r3, [r6, #0]
 8009348:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800934c:	81a3      	strh	r3, [r4, #12]
 800934e:	f04f 30ff 	mov.w	r0, #4294967295
 8009352:	e03e      	b.n	80093d2 <__swsetup_r+0xba>
 8009354:	4b25      	ldr	r3, [pc, #148]	; (80093ec <__swsetup_r+0xd4>)
 8009356:	429c      	cmp	r4, r3
 8009358:	d101      	bne.n	800935e <__swsetup_r+0x46>
 800935a:	68ac      	ldr	r4, [r5, #8]
 800935c:	e7eb      	b.n	8009336 <__swsetup_r+0x1e>
 800935e:	4b24      	ldr	r3, [pc, #144]	; (80093f0 <__swsetup_r+0xd8>)
 8009360:	429c      	cmp	r4, r3
 8009362:	bf08      	it	eq
 8009364:	68ec      	ldreq	r4, [r5, #12]
 8009366:	e7e6      	b.n	8009336 <__swsetup_r+0x1e>
 8009368:	0758      	lsls	r0, r3, #29
 800936a:	d512      	bpl.n	8009392 <__swsetup_r+0x7a>
 800936c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800936e:	b141      	cbz	r1, 8009382 <__swsetup_r+0x6a>
 8009370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009374:	4299      	cmp	r1, r3
 8009376:	d002      	beq.n	800937e <__swsetup_r+0x66>
 8009378:	4630      	mov	r0, r6
 800937a:	f7ff fb31 	bl	80089e0 <_free_r>
 800937e:	2300      	movs	r3, #0
 8009380:	6363      	str	r3, [r4, #52]	; 0x34
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009388:	81a3      	strh	r3, [r4, #12]
 800938a:	2300      	movs	r3, #0
 800938c:	6063      	str	r3, [r4, #4]
 800938e:	6923      	ldr	r3, [r4, #16]
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	f043 0308 	orr.w	r3, r3, #8
 8009398:	81a3      	strh	r3, [r4, #12]
 800939a:	6923      	ldr	r3, [r4, #16]
 800939c:	b94b      	cbnz	r3, 80093b2 <__swsetup_r+0x9a>
 800939e:	89a3      	ldrh	r3, [r4, #12]
 80093a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093a8:	d003      	beq.n	80093b2 <__swsetup_r+0x9a>
 80093aa:	4621      	mov	r1, r4
 80093ac:	4630      	mov	r0, r6
 80093ae:	f000 fa09 	bl	80097c4 <__smakebuf_r>
 80093b2:	89a0      	ldrh	r0, [r4, #12]
 80093b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093b8:	f010 0301 	ands.w	r3, r0, #1
 80093bc:	d00a      	beq.n	80093d4 <__swsetup_r+0xbc>
 80093be:	2300      	movs	r3, #0
 80093c0:	60a3      	str	r3, [r4, #8]
 80093c2:	6963      	ldr	r3, [r4, #20]
 80093c4:	425b      	negs	r3, r3
 80093c6:	61a3      	str	r3, [r4, #24]
 80093c8:	6923      	ldr	r3, [r4, #16]
 80093ca:	b943      	cbnz	r3, 80093de <__swsetup_r+0xc6>
 80093cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093d0:	d1ba      	bne.n	8009348 <__swsetup_r+0x30>
 80093d2:	bd70      	pop	{r4, r5, r6, pc}
 80093d4:	0781      	lsls	r1, r0, #30
 80093d6:	bf58      	it	pl
 80093d8:	6963      	ldrpl	r3, [r4, #20]
 80093da:	60a3      	str	r3, [r4, #8]
 80093dc:	e7f4      	b.n	80093c8 <__swsetup_r+0xb0>
 80093de:	2000      	movs	r0, #0
 80093e0:	e7f7      	b.n	80093d2 <__swsetup_r+0xba>
 80093e2:	bf00      	nop
 80093e4:	20000010 	.word	0x20000010
 80093e8:	08009fb4 	.word	0x08009fb4
 80093ec:	08009fd4 	.word	0x08009fd4
 80093f0:	08009f94 	.word	0x08009f94

080093f4 <abort>:
 80093f4:	b508      	push	{r3, lr}
 80093f6:	2006      	movs	r0, #6
 80093f8:	f000 fa54 	bl	80098a4 <raise>
 80093fc:	2001      	movs	r0, #1
 80093fe:	f7f8 f9be 	bl	800177e <_exit>
	...

08009404 <__sflush_r>:
 8009404:	898a      	ldrh	r2, [r1, #12]
 8009406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800940a:	4605      	mov	r5, r0
 800940c:	0710      	lsls	r0, r2, #28
 800940e:	460c      	mov	r4, r1
 8009410:	d458      	bmi.n	80094c4 <__sflush_r+0xc0>
 8009412:	684b      	ldr	r3, [r1, #4]
 8009414:	2b00      	cmp	r3, #0
 8009416:	dc05      	bgt.n	8009424 <__sflush_r+0x20>
 8009418:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800941a:	2b00      	cmp	r3, #0
 800941c:	dc02      	bgt.n	8009424 <__sflush_r+0x20>
 800941e:	2000      	movs	r0, #0
 8009420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009424:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009426:	2e00      	cmp	r6, #0
 8009428:	d0f9      	beq.n	800941e <__sflush_r+0x1a>
 800942a:	2300      	movs	r3, #0
 800942c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009430:	682f      	ldr	r7, [r5, #0]
 8009432:	602b      	str	r3, [r5, #0]
 8009434:	d032      	beq.n	800949c <__sflush_r+0x98>
 8009436:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009438:	89a3      	ldrh	r3, [r4, #12]
 800943a:	075a      	lsls	r2, r3, #29
 800943c:	d505      	bpl.n	800944a <__sflush_r+0x46>
 800943e:	6863      	ldr	r3, [r4, #4]
 8009440:	1ac0      	subs	r0, r0, r3
 8009442:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009444:	b10b      	cbz	r3, 800944a <__sflush_r+0x46>
 8009446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009448:	1ac0      	subs	r0, r0, r3
 800944a:	2300      	movs	r3, #0
 800944c:	4602      	mov	r2, r0
 800944e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009450:	6a21      	ldr	r1, [r4, #32]
 8009452:	4628      	mov	r0, r5
 8009454:	47b0      	blx	r6
 8009456:	1c43      	adds	r3, r0, #1
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	d106      	bne.n	800946a <__sflush_r+0x66>
 800945c:	6829      	ldr	r1, [r5, #0]
 800945e:	291d      	cmp	r1, #29
 8009460:	d82c      	bhi.n	80094bc <__sflush_r+0xb8>
 8009462:	4a2a      	ldr	r2, [pc, #168]	; (800950c <__sflush_r+0x108>)
 8009464:	40ca      	lsrs	r2, r1
 8009466:	07d6      	lsls	r6, r2, #31
 8009468:	d528      	bpl.n	80094bc <__sflush_r+0xb8>
 800946a:	2200      	movs	r2, #0
 800946c:	6062      	str	r2, [r4, #4]
 800946e:	04d9      	lsls	r1, r3, #19
 8009470:	6922      	ldr	r2, [r4, #16]
 8009472:	6022      	str	r2, [r4, #0]
 8009474:	d504      	bpl.n	8009480 <__sflush_r+0x7c>
 8009476:	1c42      	adds	r2, r0, #1
 8009478:	d101      	bne.n	800947e <__sflush_r+0x7a>
 800947a:	682b      	ldr	r3, [r5, #0]
 800947c:	b903      	cbnz	r3, 8009480 <__sflush_r+0x7c>
 800947e:	6560      	str	r0, [r4, #84]	; 0x54
 8009480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009482:	602f      	str	r7, [r5, #0]
 8009484:	2900      	cmp	r1, #0
 8009486:	d0ca      	beq.n	800941e <__sflush_r+0x1a>
 8009488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800948c:	4299      	cmp	r1, r3
 800948e:	d002      	beq.n	8009496 <__sflush_r+0x92>
 8009490:	4628      	mov	r0, r5
 8009492:	f7ff faa5 	bl	80089e0 <_free_r>
 8009496:	2000      	movs	r0, #0
 8009498:	6360      	str	r0, [r4, #52]	; 0x34
 800949a:	e7c1      	b.n	8009420 <__sflush_r+0x1c>
 800949c:	6a21      	ldr	r1, [r4, #32]
 800949e:	2301      	movs	r3, #1
 80094a0:	4628      	mov	r0, r5
 80094a2:	47b0      	blx	r6
 80094a4:	1c41      	adds	r1, r0, #1
 80094a6:	d1c7      	bne.n	8009438 <__sflush_r+0x34>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d0c4      	beq.n	8009438 <__sflush_r+0x34>
 80094ae:	2b1d      	cmp	r3, #29
 80094b0:	d001      	beq.n	80094b6 <__sflush_r+0xb2>
 80094b2:	2b16      	cmp	r3, #22
 80094b4:	d101      	bne.n	80094ba <__sflush_r+0xb6>
 80094b6:	602f      	str	r7, [r5, #0]
 80094b8:	e7b1      	b.n	800941e <__sflush_r+0x1a>
 80094ba:	89a3      	ldrh	r3, [r4, #12]
 80094bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094c0:	81a3      	strh	r3, [r4, #12]
 80094c2:	e7ad      	b.n	8009420 <__sflush_r+0x1c>
 80094c4:	690f      	ldr	r7, [r1, #16]
 80094c6:	2f00      	cmp	r7, #0
 80094c8:	d0a9      	beq.n	800941e <__sflush_r+0x1a>
 80094ca:	0793      	lsls	r3, r2, #30
 80094cc:	680e      	ldr	r6, [r1, #0]
 80094ce:	bf08      	it	eq
 80094d0:	694b      	ldreq	r3, [r1, #20]
 80094d2:	600f      	str	r7, [r1, #0]
 80094d4:	bf18      	it	ne
 80094d6:	2300      	movne	r3, #0
 80094d8:	eba6 0807 	sub.w	r8, r6, r7
 80094dc:	608b      	str	r3, [r1, #8]
 80094de:	f1b8 0f00 	cmp.w	r8, #0
 80094e2:	dd9c      	ble.n	800941e <__sflush_r+0x1a>
 80094e4:	6a21      	ldr	r1, [r4, #32]
 80094e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094e8:	4643      	mov	r3, r8
 80094ea:	463a      	mov	r2, r7
 80094ec:	4628      	mov	r0, r5
 80094ee:	47b0      	blx	r6
 80094f0:	2800      	cmp	r0, #0
 80094f2:	dc06      	bgt.n	8009502 <__sflush_r+0xfe>
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094fa:	81a3      	strh	r3, [r4, #12]
 80094fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009500:	e78e      	b.n	8009420 <__sflush_r+0x1c>
 8009502:	4407      	add	r7, r0
 8009504:	eba8 0800 	sub.w	r8, r8, r0
 8009508:	e7e9      	b.n	80094de <__sflush_r+0xda>
 800950a:	bf00      	nop
 800950c:	20400001 	.word	0x20400001

08009510 <_fflush_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	690b      	ldr	r3, [r1, #16]
 8009514:	4605      	mov	r5, r0
 8009516:	460c      	mov	r4, r1
 8009518:	b913      	cbnz	r3, 8009520 <_fflush_r+0x10>
 800951a:	2500      	movs	r5, #0
 800951c:	4628      	mov	r0, r5
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	b118      	cbz	r0, 800952a <_fflush_r+0x1a>
 8009522:	6983      	ldr	r3, [r0, #24]
 8009524:	b90b      	cbnz	r3, 800952a <_fflush_r+0x1a>
 8009526:	f000 f887 	bl	8009638 <__sinit>
 800952a:	4b14      	ldr	r3, [pc, #80]	; (800957c <_fflush_r+0x6c>)
 800952c:	429c      	cmp	r4, r3
 800952e:	d11b      	bne.n	8009568 <_fflush_r+0x58>
 8009530:	686c      	ldr	r4, [r5, #4]
 8009532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d0ef      	beq.n	800951a <_fflush_r+0xa>
 800953a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800953c:	07d0      	lsls	r0, r2, #31
 800953e:	d404      	bmi.n	800954a <_fflush_r+0x3a>
 8009540:	0599      	lsls	r1, r3, #22
 8009542:	d402      	bmi.n	800954a <_fflush_r+0x3a>
 8009544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009546:	f000 f915 	bl	8009774 <__retarget_lock_acquire_recursive>
 800954a:	4628      	mov	r0, r5
 800954c:	4621      	mov	r1, r4
 800954e:	f7ff ff59 	bl	8009404 <__sflush_r>
 8009552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009554:	07da      	lsls	r2, r3, #31
 8009556:	4605      	mov	r5, r0
 8009558:	d4e0      	bmi.n	800951c <_fflush_r+0xc>
 800955a:	89a3      	ldrh	r3, [r4, #12]
 800955c:	059b      	lsls	r3, r3, #22
 800955e:	d4dd      	bmi.n	800951c <_fflush_r+0xc>
 8009560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009562:	f000 f908 	bl	8009776 <__retarget_lock_release_recursive>
 8009566:	e7d9      	b.n	800951c <_fflush_r+0xc>
 8009568:	4b05      	ldr	r3, [pc, #20]	; (8009580 <_fflush_r+0x70>)
 800956a:	429c      	cmp	r4, r3
 800956c:	d101      	bne.n	8009572 <_fflush_r+0x62>
 800956e:	68ac      	ldr	r4, [r5, #8]
 8009570:	e7df      	b.n	8009532 <_fflush_r+0x22>
 8009572:	4b04      	ldr	r3, [pc, #16]	; (8009584 <_fflush_r+0x74>)
 8009574:	429c      	cmp	r4, r3
 8009576:	bf08      	it	eq
 8009578:	68ec      	ldreq	r4, [r5, #12]
 800957a:	e7da      	b.n	8009532 <_fflush_r+0x22>
 800957c:	08009fb4 	.word	0x08009fb4
 8009580:	08009fd4 	.word	0x08009fd4
 8009584:	08009f94 	.word	0x08009f94

08009588 <std>:
 8009588:	2300      	movs	r3, #0
 800958a:	b510      	push	{r4, lr}
 800958c:	4604      	mov	r4, r0
 800958e:	e9c0 3300 	strd	r3, r3, [r0]
 8009592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009596:	6083      	str	r3, [r0, #8]
 8009598:	8181      	strh	r1, [r0, #12]
 800959a:	6643      	str	r3, [r0, #100]	; 0x64
 800959c:	81c2      	strh	r2, [r0, #14]
 800959e:	6183      	str	r3, [r0, #24]
 80095a0:	4619      	mov	r1, r3
 80095a2:	2208      	movs	r2, #8
 80095a4:	305c      	adds	r0, #92	; 0x5c
 80095a6:	f7fd fb69 	bl	8006c7c <memset>
 80095aa:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <std+0x38>)
 80095ac:	6263      	str	r3, [r4, #36]	; 0x24
 80095ae:	4b05      	ldr	r3, [pc, #20]	; (80095c4 <std+0x3c>)
 80095b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80095b2:	4b05      	ldr	r3, [pc, #20]	; (80095c8 <std+0x40>)
 80095b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095b6:	4b05      	ldr	r3, [pc, #20]	; (80095cc <std+0x44>)
 80095b8:	6224      	str	r4, [r4, #32]
 80095ba:	6323      	str	r3, [r4, #48]	; 0x30
 80095bc:	bd10      	pop	{r4, pc}
 80095be:	bf00      	nop
 80095c0:	080098dd 	.word	0x080098dd
 80095c4:	080098ff 	.word	0x080098ff
 80095c8:	08009937 	.word	0x08009937
 80095cc:	0800995b 	.word	0x0800995b

080095d0 <_cleanup_r>:
 80095d0:	4901      	ldr	r1, [pc, #4]	; (80095d8 <_cleanup_r+0x8>)
 80095d2:	f000 b8af 	b.w	8009734 <_fwalk_reent>
 80095d6:	bf00      	nop
 80095d8:	08009511 	.word	0x08009511

080095dc <__sfmoreglue>:
 80095dc:	b570      	push	{r4, r5, r6, lr}
 80095de:	2268      	movs	r2, #104	; 0x68
 80095e0:	1e4d      	subs	r5, r1, #1
 80095e2:	4355      	muls	r5, r2
 80095e4:	460e      	mov	r6, r1
 80095e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095ea:	f7ff fa65 	bl	8008ab8 <_malloc_r>
 80095ee:	4604      	mov	r4, r0
 80095f0:	b140      	cbz	r0, 8009604 <__sfmoreglue+0x28>
 80095f2:	2100      	movs	r1, #0
 80095f4:	e9c0 1600 	strd	r1, r6, [r0]
 80095f8:	300c      	adds	r0, #12
 80095fa:	60a0      	str	r0, [r4, #8]
 80095fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009600:	f7fd fb3c 	bl	8006c7c <memset>
 8009604:	4620      	mov	r0, r4
 8009606:	bd70      	pop	{r4, r5, r6, pc}

08009608 <__sfp_lock_acquire>:
 8009608:	4801      	ldr	r0, [pc, #4]	; (8009610 <__sfp_lock_acquire+0x8>)
 800960a:	f000 b8b3 	b.w	8009774 <__retarget_lock_acquire_recursive>
 800960e:	bf00      	nop
 8009610:	20004b91 	.word	0x20004b91

08009614 <__sfp_lock_release>:
 8009614:	4801      	ldr	r0, [pc, #4]	; (800961c <__sfp_lock_release+0x8>)
 8009616:	f000 b8ae 	b.w	8009776 <__retarget_lock_release_recursive>
 800961a:	bf00      	nop
 800961c:	20004b91 	.word	0x20004b91

08009620 <__sinit_lock_acquire>:
 8009620:	4801      	ldr	r0, [pc, #4]	; (8009628 <__sinit_lock_acquire+0x8>)
 8009622:	f000 b8a7 	b.w	8009774 <__retarget_lock_acquire_recursive>
 8009626:	bf00      	nop
 8009628:	20004b92 	.word	0x20004b92

0800962c <__sinit_lock_release>:
 800962c:	4801      	ldr	r0, [pc, #4]	; (8009634 <__sinit_lock_release+0x8>)
 800962e:	f000 b8a2 	b.w	8009776 <__retarget_lock_release_recursive>
 8009632:	bf00      	nop
 8009634:	20004b92 	.word	0x20004b92

08009638 <__sinit>:
 8009638:	b510      	push	{r4, lr}
 800963a:	4604      	mov	r4, r0
 800963c:	f7ff fff0 	bl	8009620 <__sinit_lock_acquire>
 8009640:	69a3      	ldr	r3, [r4, #24]
 8009642:	b11b      	cbz	r3, 800964c <__sinit+0x14>
 8009644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009648:	f7ff bff0 	b.w	800962c <__sinit_lock_release>
 800964c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009650:	6523      	str	r3, [r4, #80]	; 0x50
 8009652:	4b13      	ldr	r3, [pc, #76]	; (80096a0 <__sinit+0x68>)
 8009654:	4a13      	ldr	r2, [pc, #76]	; (80096a4 <__sinit+0x6c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	62a2      	str	r2, [r4, #40]	; 0x28
 800965a:	42a3      	cmp	r3, r4
 800965c:	bf04      	itt	eq
 800965e:	2301      	moveq	r3, #1
 8009660:	61a3      	streq	r3, [r4, #24]
 8009662:	4620      	mov	r0, r4
 8009664:	f000 f820 	bl	80096a8 <__sfp>
 8009668:	6060      	str	r0, [r4, #4]
 800966a:	4620      	mov	r0, r4
 800966c:	f000 f81c 	bl	80096a8 <__sfp>
 8009670:	60a0      	str	r0, [r4, #8]
 8009672:	4620      	mov	r0, r4
 8009674:	f000 f818 	bl	80096a8 <__sfp>
 8009678:	2200      	movs	r2, #0
 800967a:	60e0      	str	r0, [r4, #12]
 800967c:	2104      	movs	r1, #4
 800967e:	6860      	ldr	r0, [r4, #4]
 8009680:	f7ff ff82 	bl	8009588 <std>
 8009684:	68a0      	ldr	r0, [r4, #8]
 8009686:	2201      	movs	r2, #1
 8009688:	2109      	movs	r1, #9
 800968a:	f7ff ff7d 	bl	8009588 <std>
 800968e:	68e0      	ldr	r0, [r4, #12]
 8009690:	2202      	movs	r2, #2
 8009692:	2112      	movs	r1, #18
 8009694:	f7ff ff78 	bl	8009588 <std>
 8009698:	2301      	movs	r3, #1
 800969a:	61a3      	str	r3, [r4, #24]
 800969c:	e7d2      	b.n	8009644 <__sinit+0xc>
 800969e:	bf00      	nop
 80096a0:	08009c1c 	.word	0x08009c1c
 80096a4:	080095d1 	.word	0x080095d1

080096a8 <__sfp>:
 80096a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096aa:	4607      	mov	r7, r0
 80096ac:	f7ff ffac 	bl	8009608 <__sfp_lock_acquire>
 80096b0:	4b1e      	ldr	r3, [pc, #120]	; (800972c <__sfp+0x84>)
 80096b2:	681e      	ldr	r6, [r3, #0]
 80096b4:	69b3      	ldr	r3, [r6, #24]
 80096b6:	b913      	cbnz	r3, 80096be <__sfp+0x16>
 80096b8:	4630      	mov	r0, r6
 80096ba:	f7ff ffbd 	bl	8009638 <__sinit>
 80096be:	3648      	adds	r6, #72	; 0x48
 80096c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096c4:	3b01      	subs	r3, #1
 80096c6:	d503      	bpl.n	80096d0 <__sfp+0x28>
 80096c8:	6833      	ldr	r3, [r6, #0]
 80096ca:	b30b      	cbz	r3, 8009710 <__sfp+0x68>
 80096cc:	6836      	ldr	r6, [r6, #0]
 80096ce:	e7f7      	b.n	80096c0 <__sfp+0x18>
 80096d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80096d4:	b9d5      	cbnz	r5, 800970c <__sfp+0x64>
 80096d6:	4b16      	ldr	r3, [pc, #88]	; (8009730 <__sfp+0x88>)
 80096d8:	60e3      	str	r3, [r4, #12]
 80096da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096de:	6665      	str	r5, [r4, #100]	; 0x64
 80096e0:	f000 f847 	bl	8009772 <__retarget_lock_init_recursive>
 80096e4:	f7ff ff96 	bl	8009614 <__sfp_lock_release>
 80096e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096f0:	6025      	str	r5, [r4, #0]
 80096f2:	61a5      	str	r5, [r4, #24]
 80096f4:	2208      	movs	r2, #8
 80096f6:	4629      	mov	r1, r5
 80096f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096fc:	f7fd fabe 	bl	8006c7c <memset>
 8009700:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009704:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009708:	4620      	mov	r0, r4
 800970a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800970c:	3468      	adds	r4, #104	; 0x68
 800970e:	e7d9      	b.n	80096c4 <__sfp+0x1c>
 8009710:	2104      	movs	r1, #4
 8009712:	4638      	mov	r0, r7
 8009714:	f7ff ff62 	bl	80095dc <__sfmoreglue>
 8009718:	4604      	mov	r4, r0
 800971a:	6030      	str	r0, [r6, #0]
 800971c:	2800      	cmp	r0, #0
 800971e:	d1d5      	bne.n	80096cc <__sfp+0x24>
 8009720:	f7ff ff78 	bl	8009614 <__sfp_lock_release>
 8009724:	230c      	movs	r3, #12
 8009726:	603b      	str	r3, [r7, #0]
 8009728:	e7ee      	b.n	8009708 <__sfp+0x60>
 800972a:	bf00      	nop
 800972c:	08009c1c 	.word	0x08009c1c
 8009730:	ffff0001 	.word	0xffff0001

08009734 <_fwalk_reent>:
 8009734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009738:	4606      	mov	r6, r0
 800973a:	4688      	mov	r8, r1
 800973c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009740:	2700      	movs	r7, #0
 8009742:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009746:	f1b9 0901 	subs.w	r9, r9, #1
 800974a:	d505      	bpl.n	8009758 <_fwalk_reent+0x24>
 800974c:	6824      	ldr	r4, [r4, #0]
 800974e:	2c00      	cmp	r4, #0
 8009750:	d1f7      	bne.n	8009742 <_fwalk_reent+0xe>
 8009752:	4638      	mov	r0, r7
 8009754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009758:	89ab      	ldrh	r3, [r5, #12]
 800975a:	2b01      	cmp	r3, #1
 800975c:	d907      	bls.n	800976e <_fwalk_reent+0x3a>
 800975e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009762:	3301      	adds	r3, #1
 8009764:	d003      	beq.n	800976e <_fwalk_reent+0x3a>
 8009766:	4629      	mov	r1, r5
 8009768:	4630      	mov	r0, r6
 800976a:	47c0      	blx	r8
 800976c:	4307      	orrs	r7, r0
 800976e:	3568      	adds	r5, #104	; 0x68
 8009770:	e7e9      	b.n	8009746 <_fwalk_reent+0x12>

08009772 <__retarget_lock_init_recursive>:
 8009772:	4770      	bx	lr

08009774 <__retarget_lock_acquire_recursive>:
 8009774:	4770      	bx	lr

08009776 <__retarget_lock_release_recursive>:
 8009776:	4770      	bx	lr

08009778 <__swhatbuf_r>:
 8009778:	b570      	push	{r4, r5, r6, lr}
 800977a:	460e      	mov	r6, r1
 800977c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009780:	2900      	cmp	r1, #0
 8009782:	b096      	sub	sp, #88	; 0x58
 8009784:	4614      	mov	r4, r2
 8009786:	461d      	mov	r5, r3
 8009788:	da08      	bge.n	800979c <__swhatbuf_r+0x24>
 800978a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	602a      	str	r2, [r5, #0]
 8009792:	061a      	lsls	r2, r3, #24
 8009794:	d410      	bmi.n	80097b8 <__swhatbuf_r+0x40>
 8009796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800979a:	e00e      	b.n	80097ba <__swhatbuf_r+0x42>
 800979c:	466a      	mov	r2, sp
 800979e:	f000 f903 	bl	80099a8 <_fstat_r>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	dbf1      	blt.n	800978a <__swhatbuf_r+0x12>
 80097a6:	9a01      	ldr	r2, [sp, #4]
 80097a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097b0:	425a      	negs	r2, r3
 80097b2:	415a      	adcs	r2, r3
 80097b4:	602a      	str	r2, [r5, #0]
 80097b6:	e7ee      	b.n	8009796 <__swhatbuf_r+0x1e>
 80097b8:	2340      	movs	r3, #64	; 0x40
 80097ba:	2000      	movs	r0, #0
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	b016      	add	sp, #88	; 0x58
 80097c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080097c4 <__smakebuf_r>:
 80097c4:	898b      	ldrh	r3, [r1, #12]
 80097c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097c8:	079d      	lsls	r5, r3, #30
 80097ca:	4606      	mov	r6, r0
 80097cc:	460c      	mov	r4, r1
 80097ce:	d507      	bpl.n	80097e0 <__smakebuf_r+0x1c>
 80097d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097d4:	6023      	str	r3, [r4, #0]
 80097d6:	6123      	str	r3, [r4, #16]
 80097d8:	2301      	movs	r3, #1
 80097da:	6163      	str	r3, [r4, #20]
 80097dc:	b002      	add	sp, #8
 80097de:	bd70      	pop	{r4, r5, r6, pc}
 80097e0:	ab01      	add	r3, sp, #4
 80097e2:	466a      	mov	r2, sp
 80097e4:	f7ff ffc8 	bl	8009778 <__swhatbuf_r>
 80097e8:	9900      	ldr	r1, [sp, #0]
 80097ea:	4605      	mov	r5, r0
 80097ec:	4630      	mov	r0, r6
 80097ee:	f7ff f963 	bl	8008ab8 <_malloc_r>
 80097f2:	b948      	cbnz	r0, 8009808 <__smakebuf_r+0x44>
 80097f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097f8:	059a      	lsls	r2, r3, #22
 80097fa:	d4ef      	bmi.n	80097dc <__smakebuf_r+0x18>
 80097fc:	f023 0303 	bic.w	r3, r3, #3
 8009800:	f043 0302 	orr.w	r3, r3, #2
 8009804:	81a3      	strh	r3, [r4, #12]
 8009806:	e7e3      	b.n	80097d0 <__smakebuf_r+0xc>
 8009808:	4b0d      	ldr	r3, [pc, #52]	; (8009840 <__smakebuf_r+0x7c>)
 800980a:	62b3      	str	r3, [r6, #40]	; 0x28
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	6020      	str	r0, [r4, #0]
 8009810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009814:	81a3      	strh	r3, [r4, #12]
 8009816:	9b00      	ldr	r3, [sp, #0]
 8009818:	6163      	str	r3, [r4, #20]
 800981a:	9b01      	ldr	r3, [sp, #4]
 800981c:	6120      	str	r0, [r4, #16]
 800981e:	b15b      	cbz	r3, 8009838 <__smakebuf_r+0x74>
 8009820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009824:	4630      	mov	r0, r6
 8009826:	f000 f8d1 	bl	80099cc <_isatty_r>
 800982a:	b128      	cbz	r0, 8009838 <__smakebuf_r+0x74>
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	f023 0303 	bic.w	r3, r3, #3
 8009832:	f043 0301 	orr.w	r3, r3, #1
 8009836:	81a3      	strh	r3, [r4, #12]
 8009838:	89a0      	ldrh	r0, [r4, #12]
 800983a:	4305      	orrs	r5, r0
 800983c:	81a5      	strh	r5, [r4, #12]
 800983e:	e7cd      	b.n	80097dc <__smakebuf_r+0x18>
 8009840:	080095d1 	.word	0x080095d1

08009844 <_malloc_usable_size_r>:
 8009844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009848:	1f18      	subs	r0, r3, #4
 800984a:	2b00      	cmp	r3, #0
 800984c:	bfbc      	itt	lt
 800984e:	580b      	ldrlt	r3, [r1, r0]
 8009850:	18c0      	addlt	r0, r0, r3
 8009852:	4770      	bx	lr

08009854 <_raise_r>:
 8009854:	291f      	cmp	r1, #31
 8009856:	b538      	push	{r3, r4, r5, lr}
 8009858:	4604      	mov	r4, r0
 800985a:	460d      	mov	r5, r1
 800985c:	d904      	bls.n	8009868 <_raise_r+0x14>
 800985e:	2316      	movs	r3, #22
 8009860:	6003      	str	r3, [r0, #0]
 8009862:	f04f 30ff 	mov.w	r0, #4294967295
 8009866:	bd38      	pop	{r3, r4, r5, pc}
 8009868:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800986a:	b112      	cbz	r2, 8009872 <_raise_r+0x1e>
 800986c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009870:	b94b      	cbnz	r3, 8009886 <_raise_r+0x32>
 8009872:	4620      	mov	r0, r4
 8009874:	f000 f830 	bl	80098d8 <_getpid_r>
 8009878:	462a      	mov	r2, r5
 800987a:	4601      	mov	r1, r0
 800987c:	4620      	mov	r0, r4
 800987e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009882:	f000 b817 	b.w	80098b4 <_kill_r>
 8009886:	2b01      	cmp	r3, #1
 8009888:	d00a      	beq.n	80098a0 <_raise_r+0x4c>
 800988a:	1c59      	adds	r1, r3, #1
 800988c:	d103      	bne.n	8009896 <_raise_r+0x42>
 800988e:	2316      	movs	r3, #22
 8009890:	6003      	str	r3, [r0, #0]
 8009892:	2001      	movs	r0, #1
 8009894:	e7e7      	b.n	8009866 <_raise_r+0x12>
 8009896:	2400      	movs	r4, #0
 8009898:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800989c:	4628      	mov	r0, r5
 800989e:	4798      	blx	r3
 80098a0:	2000      	movs	r0, #0
 80098a2:	e7e0      	b.n	8009866 <_raise_r+0x12>

080098a4 <raise>:
 80098a4:	4b02      	ldr	r3, [pc, #8]	; (80098b0 <raise+0xc>)
 80098a6:	4601      	mov	r1, r0
 80098a8:	6818      	ldr	r0, [r3, #0]
 80098aa:	f7ff bfd3 	b.w	8009854 <_raise_r>
 80098ae:	bf00      	nop
 80098b0:	20000010 	.word	0x20000010

080098b4 <_kill_r>:
 80098b4:	b538      	push	{r3, r4, r5, lr}
 80098b6:	4d07      	ldr	r5, [pc, #28]	; (80098d4 <_kill_r+0x20>)
 80098b8:	2300      	movs	r3, #0
 80098ba:	4604      	mov	r4, r0
 80098bc:	4608      	mov	r0, r1
 80098be:	4611      	mov	r1, r2
 80098c0:	602b      	str	r3, [r5, #0]
 80098c2:	f7f7 ff4c 	bl	800175e <_kill>
 80098c6:	1c43      	adds	r3, r0, #1
 80098c8:	d102      	bne.n	80098d0 <_kill_r+0x1c>
 80098ca:	682b      	ldr	r3, [r5, #0]
 80098cc:	b103      	cbz	r3, 80098d0 <_kill_r+0x1c>
 80098ce:	6023      	str	r3, [r4, #0]
 80098d0:	bd38      	pop	{r3, r4, r5, pc}
 80098d2:	bf00      	nop
 80098d4:	20004b8c 	.word	0x20004b8c

080098d8 <_getpid_r>:
 80098d8:	f7f7 bf39 	b.w	800174e <_getpid>

080098dc <__sread>:
 80098dc:	b510      	push	{r4, lr}
 80098de:	460c      	mov	r4, r1
 80098e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e4:	f000 f894 	bl	8009a10 <_read_r>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	bfab      	itete	ge
 80098ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098ee:	89a3      	ldrhlt	r3, [r4, #12]
 80098f0:	181b      	addge	r3, r3, r0
 80098f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098f6:	bfac      	ite	ge
 80098f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80098fa:	81a3      	strhlt	r3, [r4, #12]
 80098fc:	bd10      	pop	{r4, pc}

080098fe <__swrite>:
 80098fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009902:	461f      	mov	r7, r3
 8009904:	898b      	ldrh	r3, [r1, #12]
 8009906:	05db      	lsls	r3, r3, #23
 8009908:	4605      	mov	r5, r0
 800990a:	460c      	mov	r4, r1
 800990c:	4616      	mov	r6, r2
 800990e:	d505      	bpl.n	800991c <__swrite+0x1e>
 8009910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009914:	2302      	movs	r3, #2
 8009916:	2200      	movs	r2, #0
 8009918:	f000 f868 	bl	80099ec <_lseek_r>
 800991c:	89a3      	ldrh	r3, [r4, #12]
 800991e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009922:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009926:	81a3      	strh	r3, [r4, #12]
 8009928:	4632      	mov	r2, r6
 800992a:	463b      	mov	r3, r7
 800992c:	4628      	mov	r0, r5
 800992e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009932:	f000 b817 	b.w	8009964 <_write_r>

08009936 <__sseek>:
 8009936:	b510      	push	{r4, lr}
 8009938:	460c      	mov	r4, r1
 800993a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800993e:	f000 f855 	bl	80099ec <_lseek_r>
 8009942:	1c43      	adds	r3, r0, #1
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	bf15      	itete	ne
 8009948:	6560      	strne	r0, [r4, #84]	; 0x54
 800994a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800994e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009952:	81a3      	strheq	r3, [r4, #12]
 8009954:	bf18      	it	ne
 8009956:	81a3      	strhne	r3, [r4, #12]
 8009958:	bd10      	pop	{r4, pc}

0800995a <__sclose>:
 800995a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800995e:	f000 b813 	b.w	8009988 <_close_r>
	...

08009964 <_write_r>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	4d07      	ldr	r5, [pc, #28]	; (8009984 <_write_r+0x20>)
 8009968:	4604      	mov	r4, r0
 800996a:	4608      	mov	r0, r1
 800996c:	4611      	mov	r1, r2
 800996e:	2200      	movs	r2, #0
 8009970:	602a      	str	r2, [r5, #0]
 8009972:	461a      	mov	r2, r3
 8009974:	f7f7 ff2a 	bl	80017cc <_write>
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	d102      	bne.n	8009982 <_write_r+0x1e>
 800997c:	682b      	ldr	r3, [r5, #0]
 800997e:	b103      	cbz	r3, 8009982 <_write_r+0x1e>
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	20004b8c 	.word	0x20004b8c

08009988 <_close_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	4d06      	ldr	r5, [pc, #24]	; (80099a4 <_close_r+0x1c>)
 800998c:	2300      	movs	r3, #0
 800998e:	4604      	mov	r4, r0
 8009990:	4608      	mov	r0, r1
 8009992:	602b      	str	r3, [r5, #0]
 8009994:	f7f7 ff36 	bl	8001804 <_close>
 8009998:	1c43      	adds	r3, r0, #1
 800999a:	d102      	bne.n	80099a2 <_close_r+0x1a>
 800999c:	682b      	ldr	r3, [r5, #0]
 800999e:	b103      	cbz	r3, 80099a2 <_close_r+0x1a>
 80099a0:	6023      	str	r3, [r4, #0]
 80099a2:	bd38      	pop	{r3, r4, r5, pc}
 80099a4:	20004b8c 	.word	0x20004b8c

080099a8 <_fstat_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4d07      	ldr	r5, [pc, #28]	; (80099c8 <_fstat_r+0x20>)
 80099ac:	2300      	movs	r3, #0
 80099ae:	4604      	mov	r4, r0
 80099b0:	4608      	mov	r0, r1
 80099b2:	4611      	mov	r1, r2
 80099b4:	602b      	str	r3, [r5, #0]
 80099b6:	f7f7 ff31 	bl	800181c <_fstat>
 80099ba:	1c43      	adds	r3, r0, #1
 80099bc:	d102      	bne.n	80099c4 <_fstat_r+0x1c>
 80099be:	682b      	ldr	r3, [r5, #0]
 80099c0:	b103      	cbz	r3, 80099c4 <_fstat_r+0x1c>
 80099c2:	6023      	str	r3, [r4, #0]
 80099c4:	bd38      	pop	{r3, r4, r5, pc}
 80099c6:	bf00      	nop
 80099c8:	20004b8c 	.word	0x20004b8c

080099cc <_isatty_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4d06      	ldr	r5, [pc, #24]	; (80099e8 <_isatty_r+0x1c>)
 80099d0:	2300      	movs	r3, #0
 80099d2:	4604      	mov	r4, r0
 80099d4:	4608      	mov	r0, r1
 80099d6:	602b      	str	r3, [r5, #0]
 80099d8:	f7f7 ff30 	bl	800183c <_isatty>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d102      	bne.n	80099e6 <_isatty_r+0x1a>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	b103      	cbz	r3, 80099e6 <_isatty_r+0x1a>
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	20004b8c 	.word	0x20004b8c

080099ec <_lseek_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4d07      	ldr	r5, [pc, #28]	; (8009a0c <_lseek_r+0x20>)
 80099f0:	4604      	mov	r4, r0
 80099f2:	4608      	mov	r0, r1
 80099f4:	4611      	mov	r1, r2
 80099f6:	2200      	movs	r2, #0
 80099f8:	602a      	str	r2, [r5, #0]
 80099fa:	461a      	mov	r2, r3
 80099fc:	f7f7 ff29 	bl	8001852 <_lseek>
 8009a00:	1c43      	adds	r3, r0, #1
 8009a02:	d102      	bne.n	8009a0a <_lseek_r+0x1e>
 8009a04:	682b      	ldr	r3, [r5, #0]
 8009a06:	b103      	cbz	r3, 8009a0a <_lseek_r+0x1e>
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	20004b8c 	.word	0x20004b8c

08009a10 <_read_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4d07      	ldr	r5, [pc, #28]	; (8009a30 <_read_r+0x20>)
 8009a14:	4604      	mov	r4, r0
 8009a16:	4608      	mov	r0, r1
 8009a18:	4611      	mov	r1, r2
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	602a      	str	r2, [r5, #0]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	f7f7 feb7 	bl	8001792 <_read>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d102      	bne.n	8009a2e <_read_r+0x1e>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	b103      	cbz	r3, 8009a2e <_read_r+0x1e>
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	20004b8c 	.word	0x20004b8c

08009a34 <_init>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	bf00      	nop
 8009a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3a:	bc08      	pop	{r3}
 8009a3c:	469e      	mov	lr, r3
 8009a3e:	4770      	bx	lr

08009a40 <_fini>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	bf00      	nop
 8009a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a46:	bc08      	pop	{r3}
 8009a48:	469e      	mov	lr, r3
 8009a4a:	4770      	bx	lr
